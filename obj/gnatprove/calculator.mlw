(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content : tinteger_32B }
 
 function tinteger_32B__ref_tinteger_32B__content__projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref_tinteger_32B__content__projection
 
 meta "inline:no" function tinteger_32B__ref_tinteger_32B__content__projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B as Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__2__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32 as Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__projection
 
 meta "inline:no" function int32__ref_int32__content__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int32__rep
 use        Calculator__int32 as Calculator__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculator__int32.int32) : int =
  (Calculator__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculator__int32.int32, 
 predicate in_range = Calculator__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tinteger_64B =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_64B__ref =
  { mutable tinteger_64B__content : tinteger_64B }
 
 function tinteger_64B__ref_tinteger_64B__content__projection 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref_tinteger_64B__content__projection
 
 meta "inline:no" function tinteger_64B__ref_tinteger_64B__content__projection
 
 val tinteger_64B__havoc 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B__rep
 use        Interfaces__Tinteger_64B as Interfaces__Tinteger_64B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__Tinteger_64B.tinteger_64B) : int =
  (Interfaces__Tinteger_64B.tinteger_64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__Tinteger_64B.tinteger_64B, 
 predicate in_range = Interfaces__Tinteger_64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__2__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__2__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__2__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64__rep
 use        Interfaces__integer_64 as Interfaces__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__integer_64.integer_64) : int =
  (Interfaces__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__integer_64.integer_64, 
 predicate in_range = Interfaces__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int64" defined at calculator.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int64__ref =
  { mutable int64__content : int64 }
 
 function int64__ref_int64__content__projection 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref_int64__content__projection
 
 meta "inline:no" function int64__ref_int64__content__projection
 
 val int64__havoc 
   (x : int64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int64" defined at calculator.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int64__rep
 use        Calculator__int64 as Calculator__int64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculator__int64.int64) : int =
  (Calculator__int64.int64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculator__int64.int64, 
 predicate in_range = Calculator__int64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "result" defined at calculator.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Calculator__result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32__rep as Calculator__int32__rep

 type __split_fields =
  { rec__calculator__result__success [@name:Success] [@model_trace:.2839] : bool; rec__calculator__result__value [@model_trace:.2849] [@name:Value] : Calculator__int32.int32 }
 
 function __split_fields_rec__calculator__result__success__projection [@name:Success] [@model_trace:.2839] 
   (a : __split_fields) : bool =
  a.rec__calculator__result__success
 
 meta "model_projection" function __split_fields_rec__calculator__result__success__projection
 
 meta "inline:no" function __split_fields_rec__calculator__result__success__projection
 
 function __split_fields_rec__calculator__result__value__projection [@model_trace:.2849] [@name:Value] 
   (a : __split_fields) : Calculator__int32.int32 =
  a.rec__calculator__result__value
 
 meta "model_projection" function __split_fields_rec__calculator__result__value__projection
 
 meta "inline:no" function __split_fields_rec__calculator__result__value__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate calculator__result__success__pred 
   (a : __rep) =
  true
 val calculator__result__success__pred 
   (a : __rep) : bool
  ensures { result <-> calculator__result__success__pred (a : __rep) }
 
 val rec__calculator__result__success_ 
   (a : __rep) : bool
  requires {  (calculator__result__success__pred a) }
  ensures {  (result = a.__split_fields.rec__calculator__result__success) }
 
 predicate calculator__result__value__pred 
   (a : __rep) =
  true
 val calculator__result__value__pred 
   (a : __rep) : bool
  ensures { result <-> calculator__result__value__pred (a : __rep) }
 
 val rec__calculator__result__value_ 
   (a : __rep) : Calculator__int32.int32
  requires {  (calculator__result__value__pred a) }
  ensures {  (result = a.__split_fields.rec__calculator__result__value) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__calculator__result__success = b.__split_fields.rec__calculator__result__success) /\ ((Calculator__int32__rep.to_rep a.__split_fields.rec__calculator__result__value) = (Calculator__int32__rep.to_rep b.__split_fields.rec__calculator__result__value)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "result" defined at calculator.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculator__result
 use export Calculator__result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type result__ =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant calculator__result__success__first__bit 
   : int

 
 val constant calculator__result__success__last__bit 
   : int

 
 val constant calculator__result__success__position 
   : int

 
 axiom calculator__result__success__first__bit_axiom :
  ((calculator__result__success__first__bit ) >= (0 : int))
 
 axiom calculator__result__success__last__bit_axiom :
  ((calculator__result__success__last__bit ) > (calculator__result__success__first__bit ))
 
 axiom calculator__result__success__position_axiom :
  ((calculator__result__success__position ) >= (0 : int))
 
 val constant calculator__result__value__first__bit 
   : int

 
 val constant calculator__result__value__last__bit 
   : int

 
 val constant calculator__result__value__position 
   : int

 
 axiom calculator__result__value__first__bit_axiom :
  ((calculator__result__value__first__bit ) >= (0 : int))
 
 axiom calculator__result__value__last__bit_axiom :
  ((calculator__result__value__last__bit ) > (calculator__result__value__first__bit ))
 
 axiom calculator__result__value__position_axiom :
  ((calculator__result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : result__) (b : result__) : bool
 
 val constant dummy 
   : result__

 
 type result____ref =
  { mutable result____content : result__ }
 
 function result____ref_result____content__projection 
   (a : result____ref) : result__ =
  a.result____content
 
 meta "model_projection" function result____ref_result____content__projection
 
 meta "inline:no" function result____ref_result____content__projection
 
 val result____havoc 
   (x : result____ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "locker" defined at locker.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Locker__locker__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pin__pin as Pin__pin
 use        Pin__pin__rep as Pin__pin__rep

 type __split_fields =
  { rec__locker__locker__number [@name:Number] [@model_trace:.4043] : Pin__pin.pin; rec__locker__locker__locked [@model_trace:.4055] [@name:Locked] : bool }
 
 function __split_fields_rec__locker__locker__number__projection [@name:Number] [@model_trace:.4043] 
   (a : __split_fields) : Pin__pin.pin =
  a.rec__locker__locker__number
 
 meta "model_projection" function __split_fields_rec__locker__locker__number__projection
 
 meta "inline:no" function __split_fields_rec__locker__locker__number__projection
 
 function __split_fields_rec__locker__locker__locked__projection [@model_trace:.4055] [@name:Locked] 
   (a : __split_fields) : bool =
  a.rec__locker__locker__locked
 
 meta "model_projection" function __split_fields_rec__locker__locker__locked__projection
 
 meta "inline:no" function __split_fields_rec__locker__locker__locked__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate locker__locker__number__pred 
   (a : __rep) =
  true
 val locker__locker__number__pred 
   (a : __rep) : bool
  ensures { result <-> locker__locker__number__pred (a : __rep) }
 
 val rec__locker__locker__number_ 
   (a : __rep) : Pin__pin.pin
  requires {  (locker__locker__number__pred a) }
  ensures {  (result = a.__split_fields.rec__locker__locker__number) }
 
 predicate locker__locker__locked__pred 
   (a : __rep) =
  true
 val locker__locker__locked__pred 
   (a : __rep) : bool
  ensures { result <-> locker__locker__locked__pred (a : __rep) }
 
 val rec__locker__locker__locked_ 
   (a : __rep) : bool
  requires {  (locker__locker__locked__pred a) }
  ensures {  (result = a.__split_fields.rec__locker__locker__locked) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Pin__pin__rep.to_rep a.__split_fields.rec__locker__locker__number) = (Pin__pin__rep.to_rep b.__split_fields.rec__locker__locker__number)) /\ (a.__split_fields.rec__locker__locker__locked = b.__split_fields.rec__locker__locker__locked) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Locker__locker
 use export Locker__locker__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type locker =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant locker__locker__number__first__bit 
   : int

 
 val constant locker__locker__number__last__bit 
   : int

 
 val constant locker__locker__number__position 
   : int

 
 axiom locker__locker__number__first__bit_axiom :
  ((locker__locker__number__first__bit ) >= (0 : int))
 
 axiom locker__locker__number__last__bit_axiom :
  ((locker__locker__number__last__bit ) > (locker__locker__number__first__bit ))
 
 axiom locker__locker__number__position_axiom :
  ((locker__locker__number__position ) >= (0 : int))
 
 val constant locker__locker__locked__first__bit 
   : int

 
 val constant locker__locker__locked__last__bit 
   : int

 
 val constant locker__locker__locked__position 
   : int

 
 axiom locker__locker__locked__first__bit_axiom :
  ((locker__locker__locked__first__bit ) >= (0 : int))
 
 axiom locker__locker__locked__last__bit_axiom :
  ((locker__locker__locked__last__bit ) > (locker__locker__locked__first__bit ))
 
 axiom locker__locker__locked__position_axiom :
  ((locker__locker__locked__position ) >= (0 : int))
 
 val function user_eq 
   (a : locker) (b : locker) : bool
 
 val constant dummy 
   : locker

 
 type locker__ref =
  { mutable locker__content : locker }
 
 function locker__ref_locker__content__projection 
   (a : locker__ref) : locker =
  a.locker__content
 
 meta "model_projection" function locker__ref_locker__content__projection
 
 meta "inline:no" function locker__ref_locker__content__projection
 
 val locker__havoc 
   (x : locker__ref) : unit
  writes {x}

end

(* Module for defining the constant "l" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 18 0 0][@model_projected] [@model_trace:2868] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 18 0 0][@model_trace:2879] [@name:A] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 18 0 0][@name:B] [@model_trace:2886] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "l" defined at locker.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Locker__is_locked__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"locker.ads" 15 0 0][@model_projected] [@name:L] [@model_trace:4021] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at locker.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__is_locked__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__is_locked
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val function is_locked 
   (l : Locker__locker.locker) : bool
 
 val predicate is_locked__function_guard 
   (temp___result_156 : bool) (l : Locker__locker.locker)

end

(* Module for possibly declaring a logic function for "add" defined at calculator.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__add
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function add 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate add__function_guard 
   (temp___result_157 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for defining the constant "l" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 21 0 0][@model_trace:2916] [@model_projected] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 21 0 0][@name:A] [@model_trace:2927] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 21 0 0][@name:B] [@model_trace:2934] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "sub" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__sub
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function sub 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate sub__function_guard 
   (temp___result_158 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for defining the constant "l" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 24 0 0][@model_projected] [@name:L] [@model_trace:2964] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 24 0 0][@name:A] [@model_trace:2975] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 24 0 0][@model_trace:2982] [@name:B] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mul" defined at calculator.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__mul
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function mul 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate mul__function_guard 
   (temp___result_159 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for defining the constant "l" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 27 0 0][@model_projected] [@model_trace:3012] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 27 0 0][@model_trace:3023] [@name:A] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 27 0 0][@name:B] [@model_trace:3030] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "div" defined at calculator.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__div
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function div 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate div__function_guard 
   (temp___result_160 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end
(* Module for defining a ref holding the value of variable "v" defined at calculator.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__add__v
 use        "_gnatprove_standard".Main
 use        "int".Int

 val v [#"calculator.adb" 9 0 0][@model_trace:2362] [@model_projected] [@name:V]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at calculator.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "v" defined at calculator.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__sub__v
 use        "_gnatprove_standard".Main
 use        "int".Int

 val v [#"calculator.adb" 24 0 0][@model_projected] [@model_trace:2467] [@name:V]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at calculator.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "v" defined at calculator.adb:39, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__mul__v
 use        "_gnatprove_standard".Main
 use        "int".Int

 val v [#"calculator.adb" 39 0 0][@model_projected] [@model_trace:2572] [@name:V]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at calculator.adb:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "v" defined at calculator.adb:54, created in Gnat2Why.Decls.Translate_Variable *)
module Calculator__div__v
 use        "_gnatprove_standard".Main
 use        "int".Int

 val v [#"calculator.adb" 54 0 0][@model_trace:2677] [@model_projected] [@name:V]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at calculator.adb:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) =
  (if (( temp___is_init_161 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_165)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_166 : int) (temp___skip_top_level_167 : bool) }

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__integer_32 as Interfaces__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) =
  (if (( temp___is_init_168 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_172)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_173 : int) (temp___skip_top_level_174 : bool) }

end

(* Module giving axioms for type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculator__int32 as Calculator__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) =
  (if (( temp___is_init_175 \/ (Calculator__int32.first <= Calculator__int32.last) )) then (
   (Calculator__int32.dynamic_property Calculator__int32.first Calculator__int32.last temp___expr_179)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_180 : int) (temp___skip_top_level_181 : bool) }

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__integer_64 as Interfaces__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) =
  (if (( temp___is_init_182 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_186)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_186 : int) (temp___is_init_182 : bool) (temp___skip_constant_183 : bool) (temp___do_toplevel_184 : bool) (temp___do_typ_inv_185 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_187 : int) (temp___skip_top_level_188 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_187 : int) (temp___skip_top_level_188 : bool) }

end

(* Module giving axioms for type "int64" defined at calculator.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__int64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculator__int64 as Calculator__int64

 predicate dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) =
  (if (( temp___is_init_189 \/ (Calculator__int64.first <= Calculator__int64.last) )) then (
   (Calculator__int64.dynamic_property Calculator__int64.first Calculator__int64.last temp___expr_193)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_193 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_194 : int) (temp___skip_top_level_195 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_194 : int) (temp___skip_top_level_195 : bool) }

end

(* Module giving axioms for type "result" defined at calculator.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculator__result as Calculator__result

 predicate dynamic_invariant [@inline] 
   (temp___expr_200 : Calculator__result.result__) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_200 : Calculator__result.result__) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_200 : Calculator__result.result__) (temp___is_init_196 : bool) (temp___skip_constant_197 : bool) (temp___do_toplevel_198 : bool) (temp___do_typ_inv_199 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_201 : Calculator__result.result__) (temp___skip_top_level_202 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_201 : Calculator__result.result__) (temp___skip_top_level_202 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_201 : Calculator__result.result__) (temp___skip_top_level_202 : bool) }

end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  (if (( temp___is_init_205 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_209)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : int) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_210 : int) (temp___skip_top_level_211 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_210 : int) (temp___skip_top_level_211 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_210 : int) (temp___skip_top_level_211 : bool) }

end

(* Module giving axioms for type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Locker__locker___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 predicate dynamic_invariant [@inline] 
   (temp___expr_216 : Locker__locker.locker) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_216 : Locker__locker.locker) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_216 : Locker__locker.locker) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_217 : Locker__locker.locker) (temp___skip_top_level_218 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_217 : Locker__locker.locker) (temp___skip_top_level_218 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_217 : Locker__locker.locker) (temp___skip_top_level_218 : bool) }

end
(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__is_locked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__is_locked as Locker__is_locked
 use        Locker__locker___axiom as Locker__locker___axiom

 val is_locked 
   (l : Locker__locker.locker) : bool
  requires {  true }
  ensures {  ( ( (result = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard result l) )/\true ) }
 
 axiom is_locked__post_axiom :
  (forall l   : Locker__locker.locker [(Locker__is_locked.is_locked l)].
   ( (Locker__locker___axiom.dynamic_invariant l True True True True) -> (let result = (Locker__is_locked.is_locked l) in (
    (if ((Locker__is_locked.is_locked__function_guard result l)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "add" defined at calculator.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__add___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__add as Calculator__add
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Locker__locker___axiom as Locker__locker___axiom

 val add 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:20272] not ( ((epsilon temp___result_221 : bool.
   ( (temp___result_221 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_221 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__add.add l a b)) /\ (Calculator__add.add__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom add__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__add.add l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:20272] not ( ((epsilon temp___result_222 : bool.
    ( (temp___result_222 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_222 l) )) = True) ) ) ) -> (let result = (Calculator__add.add l a b) in (
    (if ((Calculator__add.add__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "sub" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__sub___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__sub as Calculator__sub
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Locker__locker___axiom as Locker__locker___axiom

 val sub 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:20293] not ( ((epsilon temp___result_223 : bool.
   ( (temp___result_223 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_223 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__sub.sub l a b)) /\ (Calculator__sub.sub__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom sub__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__sub.sub l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:20293] not ( ((epsilon temp___result_224 : bool.
    ( (temp___result_224 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_224 l) )) = True) ) ) ) -> (let result = (Calculator__sub.sub l a b) in (
    (if ((Calculator__sub.sub__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "mul" defined at calculator.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__mul___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__mul as Calculator__mul
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Locker__locker___axiom as Locker__locker___axiom

 val mul 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:20314] not ( ((epsilon temp___result_225 : bool.
   ( (temp___result_225 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_225 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__mul.mul l a b)) /\ (Calculator__mul.mul__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mul__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__mul.mul l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:20314] not ( ((epsilon temp___result_226 : bool.
    ( (temp___result_226 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_226 l) )) = True) ) ) ) -> (let result = (Calculator__mul.mul l a b) in (
    (if ((Calculator__mul.mul__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "div" defined at calculator.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__div___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__div as Calculator__div
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Locker__locker___axiom as Locker__locker___axiom

 val div 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:20335] not ( ((epsilon temp___result_227 : bool.
   ( (temp___result_227 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_227 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__div.div l a b)) /\ (Calculator__div.div__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom div__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__div.div l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:20335] not ( ((epsilon temp___result_228 : bool.
    ( (temp___result_228 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_228 l) )) = True) ) ) ) -> (let result = (Calculator__div.div l a b) in (
    (if ((Calculator__div.div__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "calculator" defined at calculator.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Calculator__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"calculator.ads" 8 0 0][@GP_Subp:calculator.ads:8] 
   (__void_param : unit)
  requires { [#"calculator.ads" 8 0 0] true }
   = [@vc:divergent]
  ( [#"calculator.ads" 8 0 0] assume { [#"calculator.ads" 8 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"calculator.ads" 8 0 0] ());
  ([#"calculator.ads" 10 0 0] ());
  ([#"calculator.ads" 11 0 0] ());
  ([#"calculator.ads" 13 0 0] ());
  ([#"calculator.ads" 18 0 0] ());
  ([#"calculator.ads" 19 0 0] ());
  ([#"calculator.ads" 21 0 0] ());
  ([#"calculator.ads" 22 0 0] ());
  ([#"calculator.ads" 24 0 0] ());
  ([#"calculator.ads" 25 0 0] ());
  ([#"calculator.ads" 27 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ([#"calculator.ads" 28 0 0] ());
  ();
  ([#"calculator.adb" 6 0 0] ());
  ([#"calculator.adb" 8 0 0] ());
  ([#"calculator.adb" 23 0 0] ());
  ([#"calculator.adb" 38 0 0] ());
  ([#"calculator.adb" 53 0 0] ());
  ();
  ( [@GP_Sloc:calculator.adb:72:1] ([#"calculator.adb" 72 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "add" defined at calculator.ads:18, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__add__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Calculator__add__l as Calculator__add__l
 use        Calculator__add__a as Calculator__add__a
 use        Calculator__add__b as Calculator__add__b
 use        Locker__is_locked as Locker__is_locked
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Calculator__result as Calculator__result
 use        Calculator__add__v as Calculator__add__v
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int32__rep as Calculator__int32__rep
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Calculator__add__v___axiom as Calculator__add__v___axiom
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Calculator__add__l___axiom as Calculator__add__l___axiom
 use        Calculator__add__a___axiom as Calculator__add__a___axiom
 use        Calculator__add__b___axiom as Calculator__add__b___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Pin__pin___axiom as Pin__pin___axiom

 val calculator__add__result [@model_trace:2861@result] [@model_projected] [@name:Add]  : Calculator__result.result____ref 
 
 let def [#"calculator.ads" 18 0 0][@GP_Subp:calculator.ads:18] 
   (__void_param : unit)
  requires { [#"calculator.ads" 18 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:18 *)
  ;
  [#"calculator.ads" 18 0 0] assume { [#"calculator.ads" 18 0 0] (Locker__locker___axiom.dynamic_invariant Calculator__add__l.l True False True True) };
  [#"calculator.ads" 18 0 0] assume { [#"calculator.ads" 18 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__add__a.a True False True True) };
  [#"calculator.ads" 18 0 0] assume { [#"calculator.ads" 18 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__add__b.b True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:18 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:18 *)
  ;
  [#"calculator.ads" 18 0 0] begin ensures {true} let _ = (let _ = not ( (Locker__is_locked___axiom.is_locked(Calculator__add__l.l)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculator.ads:18 *)
  ;
  [#"calculator.ads" 18 0 0] assume { [#"calculator.ads" 18 0 0] ( [@GP_Pretty_Ada:20272] not ( ((epsilon temp___result_229 : bool.
   ( (temp___result_229 = (Locker__is_locked.is_locked Calculator__add__l.l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_229 Calculator__add__l.l) )) = True) ) ) };
  [#"calculator.ads" 18 0 0] try
   ( ();
   ([#"calculator.adb" 9 0 0] ( [#"calculator.adb" 9 0 0] (Calculator__add__v.v.int__content <- ( (Calculator__add__a.a + Calculator__add__b.b) ));
   [#"calculator.adb" 9 0 0] assume { [#"calculator.adb" 9 0 0] (Calculator__int64___axiom.dynamic_invariant Calculator__add__v.v.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:calculator.adb:11:16] ([#"calculator.adb" 11 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:11:7] ([#"calculator.adb" 11 0 0] (if (( ([#"calculator.adb" 11 0 0] [#"calculator.adb" 11 0 0] (([@branch_id=2379] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked(Calculator__add__l.l)) )));
   ( [@branch_id=2379] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:12:10] ([#"calculator.adb" 12 0 0] ( [#"calculator.adb" 12 0 0] (calculator__add__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 12 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculator.adb:15:10] ([#"calculator.adb" 15 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:15:7] ([#"calculator.adb" 15 0 0] (if (( ([#"calculator.adb" 15 0 0] [#"calculator.adb" 15 0 0] (([@branch_id=2393] Main.spark__branch).bool__content <- ( ( (Calculator__add__v.v.int__content < (( -2147483648) : int)) || (Calculator__add__v.v.int__content > (2147483647 : int)) ) )));
   ( [@branch_id=2393] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:16:10] ([#"calculator.adb" 16 0 0] ( [#"calculator.adb" 16 0 0] (calculator__add__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 16 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculator.adb:18:47] ([#"calculator.adb" 18 0 0] ()) );
    ( [@GP_Sloc:calculator.adb:18:10] ([#"calculator.adb" 18 0 0] ( [#"calculator.adb" 18 0 0] (calculator__add__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((1 : int))); Calculator__result.rec__calculator__result__value = (Calculator__int32__rep.of_rep(([#"calculator.adb" 18 0 0] ( [@vc:annotation] [@comment:         return (Success=>True,  Value=>Int32(V));                                               ^ calculator.adb:18:47:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__return__aggr__typeconv] [@GP_Id:0] [@GP_Sloc:calculator.adb:18:47] (Calculator__int32.range_check_(Calculator__add__v.v.int__content)) )))) } } ));
     raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculator__add__result.Calculator__result.result____content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sub" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__sub__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Locker__is_locked as Locker__is_locked
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Calculator__result as Calculator__result
 use        Calculator__sub__l as Calculator__sub__l
 use        Calculator__sub__a as Calculator__sub__a
 use        Calculator__sub__b as Calculator__sub__b
 use        Calculator__sub__v as Calculator__sub__v
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int32__rep as Calculator__int32__rep
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Calculator__sub__v___axiom as Calculator__sub__v___axiom
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Calculator__sub__l___axiom as Calculator__sub__l___axiom
 use        Calculator__sub__a___axiom as Calculator__sub__a___axiom
 use        Calculator__sub__b___axiom as Calculator__sub__b___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Pin__pin___axiom as Pin__pin___axiom

 val calculator__sub__result [@name:Sub] [@model_projected] [@model_trace:2909@result]  : Calculator__result.result____ref 
 
 let def [#"calculator.ads" 21 0 0][@GP_Subp:calculator.ads:21] 
   (__void_param : unit)
  requires { [#"calculator.ads" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:21 *)
  ;
  [#"calculator.ads" 21 0 0] assume { [#"calculator.ads" 21 0 0] (Locker__locker___axiom.dynamic_invariant Calculator__sub__l.l True False True True) };
  [#"calculator.ads" 21 0 0] assume { [#"calculator.ads" 21 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__sub__a.a True False True True) };
  [#"calculator.ads" 21 0 0] assume { [#"calculator.ads" 21 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__sub__b.b True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:21 *)
  ;
  [#"calculator.ads" 21 0 0] begin ensures {true} let _ = (let _ = not ( (Locker__is_locked___axiom.is_locked(Calculator__sub__l.l)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculator.ads:21 *)
  ;
  [#"calculator.ads" 21 0 0] assume { [#"calculator.ads" 21 0 0] ( [@GP_Pretty_Ada:20293] not ( ((epsilon temp___result_230 : bool.
   ( (temp___result_230 = (Locker__is_locked.is_locked Calculator__sub__l.l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_230 Calculator__sub__l.l) )) = True) ) ) };
  [#"calculator.ads" 21 0 0] try
   ( ();
   ([#"calculator.adb" 24 0 0] ( [#"calculator.adb" 24 0 0] (Calculator__sub__v.v.int__content <- ( (Calculator__sub__a.a - Calculator__sub__b.b) ));
   [#"calculator.adb" 24 0 0] assume { [#"calculator.adb" 24 0 0] (Calculator__int64___axiom.dynamic_invariant Calculator__sub__v.v.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:calculator.adb:26:16] ([#"calculator.adb" 26 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:26:7] ([#"calculator.adb" 26 0 0] (if (( ([#"calculator.adb" 26 0 0] [#"calculator.adb" 26 0 0] (([@branch_id=2484] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked(Calculator__sub__l.l)) )));
   ( [@branch_id=2484] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:27:10] ([#"calculator.adb" 27 0 0] ( [#"calculator.adb" 27 0 0] (calculator__sub__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 27 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculator.adb:30:10] ([#"calculator.adb" 30 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:30:7] ([#"calculator.adb" 30 0 0] (if (( ([#"calculator.adb" 30 0 0] [#"calculator.adb" 30 0 0] (([@branch_id=2498] Main.spark__branch).bool__content <- ( ( (Calculator__sub__v.v.int__content < (( -2147483648) : int)) || (Calculator__sub__v.v.int__content > (2147483647 : int)) ) )));
   ( [@branch_id=2498] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:31:10] ([#"calculator.adb" 31 0 0] ( [#"calculator.adb" 31 0 0] (calculator__sub__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 31 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculator.adb:33:47] ([#"calculator.adb" 33 0 0] ()) );
    ( [@GP_Sloc:calculator.adb:33:10] ([#"calculator.adb" 33 0 0] ( [#"calculator.adb" 33 0 0] (calculator__sub__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((1 : int))); Calculator__result.rec__calculator__result__value = (Calculator__int32__rep.of_rep(([#"calculator.adb" 33 0 0] ( [@vc:annotation] [@comment:         return (Success=>True,  Value=>Int32(V));                                               ^ calculator.adb:33:47:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__return__aggr__typeconv] [@GP_Id:1] [@GP_Sloc:calculator.adb:33:47] (Calculator__int32.range_check_(Calculator__sub__v.v.int__content)) )))) } } ));
     raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculator__sub__result.Calculator__result.result____content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "mul" defined at calculator.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__mul__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Locker__is_locked as Locker__is_locked
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Calculator__result as Calculator__result
 use        Calculator__mul__l as Calculator__mul__l
 use        Calculator__mul__a as Calculator__mul__a
 use        Calculator__mul__b as Calculator__mul__b
 use        Calculator__mul__v as Calculator__mul__v
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int32__rep as Calculator__int32__rep
 use        Interfaces__Tinteger_64B as Interfaces__Tinteger_64B
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Calculator__mul__v___axiom as Calculator__mul__v___axiom
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Calculator__mul__l___axiom as Calculator__mul__l___axiom
 use        Calculator__mul__a___axiom as Calculator__mul__a___axiom
 use        Calculator__mul__b___axiom as Calculator__mul__b___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Interfaces__Tinteger_64B___axiom as Interfaces__Tinteger_64B___axiom

 val calculator__mul__result [@model_projected] [@name:Mul] [@model_trace:2957@result]  : Calculator__result.result____ref 
 
 let def [#"calculator.ads" 24 0 0][@GP_Subp:calculator.ads:24] 
   (__void_param : unit)
  requires { [#"calculator.ads" 24 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:24 *)
  ;
  [#"calculator.ads" 24 0 0] assume { [#"calculator.ads" 24 0 0] (Locker__locker___axiom.dynamic_invariant Calculator__mul__l.l True False True True) };
  [#"calculator.ads" 24 0 0] assume { [#"calculator.ads" 24 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__mul__a.a True False True True) };
  [#"calculator.ads" 24 0 0] assume { [#"calculator.ads" 24 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__mul__b.b True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:24 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:24 *)
  ;
  [#"calculator.ads" 24 0 0] begin ensures {true} let _ = (let _ = not ( (Locker__is_locked___axiom.is_locked(Calculator__mul__l.l)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculator.ads:24 *)
  ;
  [#"calculator.ads" 24 0 0] assume { [#"calculator.ads" 24 0 0] ( [@GP_Pretty_Ada:20314] not ( ((epsilon temp___result_231 : bool.
   ( (temp___result_231 = (Locker__is_locked.is_locked Calculator__mul__l.l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_231 Calculator__mul__l.l) )) = True) ) ) };
  [#"calculator.ads" 24 0 0] try
   ( ();
   ([#"calculator.adb" 39 0 0] ( [#"calculator.adb" 39 0 0] (Calculator__mul__v.v.int__content <- ( ([#"calculator.adb" 39 0 0] ( [@comment:      V: Int64 := Int64(A) * Int64(B);                            ^ calculator.adb:39:28:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:2] [@GP_Shape:v_decl__mult] [@GP_Sloc:calculator.adb:39:28] (Interfaces__Tinteger_64B.range_check_((Calculator__mul__a.a * Calculator__mul__b.b))) )) ));
    assume {  (Calculator__int64___axiom.dynamic_invariant Calculator__mul__v.v.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:calculator.adb:41:16] ([#"calculator.adb" 41 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:41:7] ([#"calculator.adb" 41 0 0] (if (( ([#"calculator.adb" 41 0 0] [#"calculator.adb" 41 0 0] (([@branch_id=2589] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked(Calculator__mul__l.l)) )));
   ( [@branch_id=2589] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:42:10] ([#"calculator.adb" 42 0 0] ( [#"calculator.adb" 42 0 0] (calculator__mul__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 42 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculator.adb:45:10] ([#"calculator.adb" 45 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:45:7] ([#"calculator.adb" 45 0 0] (if (( ([#"calculator.adb" 45 0 0] [#"calculator.adb" 45 0 0] (([@branch_id=2603] Main.spark__branch).bool__content <- ( ( (Calculator__mul__v.v.int__content < (( -2147483648) : int)) || (Calculator__mul__v.v.int__content > (2147483647 : int)) ) )));
   ( [@branch_id=2603] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:46:10] ([#"calculator.adb" 46 0 0] ( [#"calculator.adb" 46 0 0] (calculator__mul__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 46 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculator.adb:48:46] ([#"calculator.adb" 48 0 0] ()) );
    ( [@GP_Sloc:calculator.adb:48:10] ([#"calculator.adb" 48 0 0] ( [#"calculator.adb" 48 0 0] (calculator__mul__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((1 : int))); Calculator__result.rec__calculator__result__value = (Calculator__int32__rep.of_rep(([#"calculator.adb" 48 0 0] ( [@GP_Sloc:calculator.adb:48:46] [@comment:         return (Success=>True, Value=>Int32(V));                                              ^ calculator.adb:48:46:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__return__aggr__typeconv] [@GP_Id:3] (Calculator__int32.range_check_(Calculator__mul__v.v.int__content)) )))) } } ));
     raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculator__mul__result.Calculator__result.result____content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "div" defined at calculator.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Calculator__div__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Int_Division as Int_Division
 use        "_gnatprove_standard".Boolean as Boolean
 use        Locker__is_locked as Locker__is_locked
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Calculator__result as Calculator__result
 use        Calculator__div__l as Calculator__div__l
 use        Calculator__div__a as Calculator__div__a
 use        Calculator__div__b as Calculator__div__b
 use        Calculator__div__v as Calculator__div__v
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int32__rep as Calculator__int32__rep
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Calculator__div__v___axiom as Calculator__div__v___axiom
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__int64___axiom as Calculator__int64___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Calculator__div__l___axiom as Calculator__div__l___axiom
 use        Calculator__div__a___axiom as Calculator__div__a___axiom
 use        Calculator__div__b___axiom as Calculator__div__b___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Pin__pin___axiom as Pin__pin___axiom

 val calculator__div__result [@name:Div] [@model_projected] [@model_trace:3005@result]  : Calculator__result.result____ref 
 
 let def [#"calculator.ads" 27 0 0][@GP_Subp:calculator.ads:27] 
   (__void_param : unit)
  requires { [#"calculator.ads" 27 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram calculator.ads:27 *)
  ;
  [#"calculator.ads" 27 0 0] assume { [#"calculator.ads" 27 0 0] (Locker__locker___axiom.dynamic_invariant Calculator__div__l.l True False True True) };
  [#"calculator.ads" 27 0 0] assume { [#"calculator.ads" 27 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__div__a.a True False True True) };
  [#"calculator.ads" 27 0 0] assume { [#"calculator.ads" 27 0 0] (Calculator__int32___axiom.dynamic_invariant Calculator__div__b.b True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram calculator.ads:27 *)
  ;
  () (* Check for RTE in the Pre of the subprogram calculator.ads:27 *)
  ;
  [#"calculator.ads" 27 0 0] begin ensures {true} let _ = (let _ = not ( (Locker__is_locked___axiom.is_locked(Calculator__div__l.l)) ) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram calculator.ads:27 *)
  ;
  [#"calculator.ads" 27 0 0] assume { [#"calculator.ads" 27 0 0] ( [@GP_Pretty_Ada:20335] not ( ((epsilon temp___result_232 : bool.
   ( (temp___result_232 = (Locker__is_locked.is_locked Calculator__div__l.l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_232 Calculator__div__l.l) )) = True) ) ) };
  [#"calculator.ads" 27 0 0] try
   ( ();
   ([#"calculator.adb" 54 0 0] ( [#"calculator.adb" 54 0 0] (Calculator__div__v.v.int__content <- ( (0 : int) ));
   [#"calculator.adb" 54 0 0] assume { [#"calculator.adb" 54 0 0] (Calculator__int64___axiom.dynamic_invariant Calculator__div__v.v.int__content True False True True) } ));
   ();
   ( [@GP_Sloc:calculator.adb:56:16] ([#"calculator.adb" 56 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:56:7] ([#"calculator.adb" 56 0 0] (if (( ([#"calculator.adb" 56 0 0] [#"calculator.adb" 56 0 0] (([@branch_id=2688] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked(Calculator__div__l.l)) )));
   ( [@branch_id=2688] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:57:10] ([#"calculator.adb" 57 0 0] ( [#"calculator.adb" 57 0 0] (calculator__div__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 57 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculator.adb:60:7] ([#"calculator.adb" 60 0 0] (if (( ([#"calculator.adb" 60 0 0] [#"calculator.adb" 60 0 0] (([@branch_id=2702] Main.spark__branch).bool__content <- ( (Calculator__div__b.b = (0 : int)) )));
   ( [@branch_id=2702] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:61:10] ([#"calculator.adb" 61 0 0] ( [#"calculator.adb" 61 0 0] (calculator__div__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 61 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:calculator.adb:64:7] ([#"calculator.adb" 64 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:64:9] ([#"calculator.adb" 64 0 0] [#"calculator.adb" 64 0 0] (Calculator__div__v.v.int__content <- ( ([#"calculator.adb" 64 0 0] ( [@vc:annotation] [@GP_Reason:VC_DIVISION_CHECK] [@comment:      V := Int64(A) / Int64(B);                     ^ calculator.adb:64:21:VC_DIVISION_CHECK] [@GP_Sloc:calculator.adb:64:21] [@GP_Id:4] [@GP_Shape:v_assign__div] (Int_Division.div_(Calculator__div__a.a) (Calculator__div__b.b)) )) ))) );
   ( [@GP_Sloc:calculator.adb:65:10] ([#"calculator.adb" 65 0 0] ()) );
   ( [@GP_Sloc:calculator.adb:65:7] ([#"calculator.adb" 65 0 0] (if (( ([#"calculator.adb" 65 0 0] [#"calculator.adb" 65 0 0] (([@branch_id=2723] Main.spark__branch).bool__content <- ( ( (Calculator__div__v.v.int__content < (( -2147483648) : int)) || (Calculator__div__v.v.int__content > (2147483647 : int)) ) )));
   ( [@branch_id=2723] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:calculator.adb:66:10] ([#"calculator.adb" 66 0 0] ( [#"calculator.adb" 66 0 0] (calculator__div__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((0 : int))); Calculator__result.rec__calculator__result__value = ( 0 : Calculator__int32.int32 ) } } ));
    [#"calculator.adb" 66 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:calculator.adb:68:46] ([#"calculator.adb" 68 0 0] ()) );
    ( [@GP_Sloc:calculator.adb:68:10] ([#"calculator.adb" 68 0 0] ( [#"calculator.adb" 68 0 0] (calculator__div__result.Calculator__result.result____content <- ( { Calculator__result.__split_fields = { Calculator__result.rec__calculator__result__success = (Boolean.of_int((1 : int))); Calculator__result.rec__calculator__result__value = (Calculator__int32__rep.of_rep(([#"calculator.adb" 68 0 0] ( [@GP_Sloc:calculator.adb:68:46] [@comment:         return (Success=>True, Value=>Int32(V));                                              ^ calculator.adb:68:46:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__return__aggr__typeconv] [@GP_Id:5] (Calculator__int32.range_check_(Calculator__div__v.v.int__content)) )))) } } ));
     raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  calculator__div__result.Calculator__result.result____content )
end
