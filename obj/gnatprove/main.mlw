(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 31 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 30 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 104 0 0][@name:Default_Priority] [@model_trace:14459] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 val constant first 
   : int
  ensures { result =  (31 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:14 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 14 0 0][@name:Max_MyString_Length] [@model_trace:29619] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13b" defined at mystring.ads:50 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13b =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13b" defined at mystring.ads:50 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b__rep
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__mystring__T13b.t13b) : int =
  (Main__lines__mystring__T13b.t13b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__mystring__T13b.t13b, 
 predicate in_range = Main__lines__mystring__T13b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__TmystringstrD1.tmystringstrD1) : int =
  (Main__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Main__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:49 instantiated at main.adb:22, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__mystringstr as Main__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__main__lines__mystring__length [@model_trace:.29528] [@name:Length] : Main__lines__mystring__T13b.t13b; rec__main__lines__mystring__str [@name:Str] [@model_trace:.29543] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__main__lines__mystring__length__projection [@model_trace:.29528] [@name:Length] 
   (a : __split_fields) : Main__lines__mystring__T13b.t13b =
  a.rec__main__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
 
 function __split_fields_rec__main__lines__mystring__str__projection [@name:Str] [@model_trace:.29543] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__main__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate main__lines__mystring__length__pred 
   (a : __rep) =
  true
 val main__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__length__pred (a : __rep) }
 
 val rec__main__lines__mystring__length_ 
   (a : __rep) : Main__lines__mystring__T13b.t13b
  requires {  (main__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__length) }
 
 predicate main__lines__mystring__str__pred 
   (a : __rep) =
  true
 val main__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__str__pred (a : __rep) }
 
 val rec__main__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (main__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__lines__mystring__T13b__rep.to_rep a.__split_fields.rec__main__lines__mystring__length) = (Main__lines__mystring__T13b__rep.to_rep b.__split_fields.rec__main__lines__mystring__length)) /\ (Main__lines__mystringstr.bool_eq a.__split_fields.rec__main__lines__mystring__str b.__split_fields.rec__main__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:49 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
 use export Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant main__lines__mystring__length__first__bit 
   : int

 
 val constant main__lines__mystring__length__last__bit 
   : int

 
 val constant main__lines__mystring__length__position 
   : int

 
 axiom main__lines__mystring__length__first__bit_axiom :
  ((main__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__length__last__bit_axiom :
  ((main__lines__mystring__length__last__bit ) > (main__lines__mystring__length__first__bit ))
 
 axiom main__lines__mystring__length__position_axiom :
  ((main__lines__mystring__length__position ) >= (0 : int))
 
 val constant main__lines__mystring__str__first__bit 
   : int

 
 val constant main__lines__mystring__str__last__bit 
   : int

 
 val constant main__lines__mystring__str__position 
   : int

 
 axiom main__lines__mystring__str__first__bit_axiom :
  ((main__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__str__last__bit_axiom :
  ((main__lines__mystring__str__last__bit ) > (main__lines__mystring__str__first__bit ))
 
 axiom main__lines__mystring__str__position_axiom :
  ((main__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:20 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 20 0 0][@model_projected] [@name:M] [@model_trace:29227] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:20 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:35 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 35 0 0][@model_projected] [@name:M] [@model_trace:29378] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:35 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:35 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function length 
   (m : Main__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Main__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:20 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Main__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:24 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 24 0 0][@model_projected] [@model_trace:29261] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:24 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:24 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Main__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 28 0 0][@model_projected] [@name:M1] [@model_trace:29280] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 28 0 0][@model_trace:29289] [@model_projected] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 30 0 0][@model_projected] [@model_trace:29344] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 30 0 0][@model_trace:29353] [@model_projected] [@name:M2] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10b" defined at mystring.ads:33 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 42 0 0][@model_projected] [@model_trace:29464] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 42 0 0][@model_trace:29473] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function get 
   (m : Main__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Main__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 38 0 0][@model_projected] [@model_trace:29420] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 38 0 0][@name:From] [@model_trace:29429] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 38 0 0][@model_trace:29438] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Main__lines__mystring.mystring) (m : Main__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T143b" defined at mystring.adb:23 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T143b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t143b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t143b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t143b__ref =
  { mutable t143b__content : t143b }
 
 function t143b__ref_t143b__content__projection 
   (a : t143b__ref) : t143b =
  a.t143b__content
 
 meta "model_projection" function t143b__ref_t143b__content__projection
 
 meta "inline:no" function t143b__ref_t143b__content__projection
 
 val t143b__havoc 
   (x : t143b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T144b" defined at mystring.adb:23 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T144b
 use export Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t144b =
  tmystringstrB
 
 type t144b__ref =
  { mutable t144b__content : t144b }
 
 function t144b__ref_t144b__content__projection 
   (a : t144b__ref) : t144b =
  a.t144b__content
 
 meta "model_projection" function t144b__ref_t144b__content__projection
 
 meta "inline:no" function t144b__ref_t144b__content__projection
 
 val t144b__havoc 
   (x : t144b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS146bP1" defined at mystring.adb:27 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__TS146bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS146bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS146bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS146bP1__ref =
  { mutable tS146bP1__content : tS146bP1 }
 
 function tS146bP1__ref_tS146bP1__content__projection 
   (a : tS146bP1__ref) : tS146bP1 =
  a.tS146bP1__content
 
 meta "model_projection" function tS146bP1__ref_tS146bP1__content__projection
 
 meta "inline:no" function tS146bP1__ref_tS146bP1__content__projection
 
 val tS146bP1__havoc 
   (x : tS146bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S146b" defined at mystring.adb:27 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__S146b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s146b =
  string
 
 type s146b__ref =
  { mutable s146b__content : s146b }
 
 function s146b__ref_s146b__content__projection 
   (a : s146b__ref) : s146b =
  a.s146b__content
 
 meta "model_projection" function s146b__ref_s146b__content__projection
 
 meta "inline:no" function s146b__ref_s146b__content__projection
 
 val s146b__havoc 
   (x : s146b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T147b" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T147b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t147b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t147b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t147b__ref =
  { mutable t147b__content : t147b }
 
 function t147b__ref_t147b__content__projection 
   (a : t147b__ref) : t147b =
  a.t147b__content
 
 meta "model_projection" function t147b__ref_t147b__content__projection
 
 meta "inline:no" function t147b__ref_t147b__content__projection
 
 val t147b__havoc 
   (x : t147b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T147b" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T147b__rep
 use        Main__lines__from_string__T147b as Main__lines__from_string__T147b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__from_string__T147b.t147b) : int =
  (Main__lines__from_string__T147b.t147b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__from_string__T147b.t147b, 
 predicate in_range = Main__lines__from_string__T147b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T148b" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T148b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T149b" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__L_1__T149b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t149b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t149b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t149b__ref =
  { mutable t149b__content : t149b }
 
 function t149b__ref_t149b__content__projection 
   (a : t149b__ref) : t149b =
  a.t149b__content
 
 meta "model_projection" function t149b__ref_t149b__content__projection
 
 meta "inline:no" function t149b__ref_t149b__content__projection
 
 val t149b__havoc 
   (x : t149b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T160b" defined at mystring.adb:75 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L159b__T160b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t160b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t160b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t160b__ref =
  { mutable t160b__content : t160b }
 
 function t160b__ref_t160b__content__projection 
   (a : t160b__ref) : t160b =
  a.t160b__content
 
 meta "model_projection" function t160b__ref_t160b__content__projection
 
 meta "inline:no" function t160b__ref_t160b__content__projection
 
 val t160b__havoc 
   (x : t160b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T158b" defined at mystring.adb:75 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L157b__T158b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t158b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t158b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t158b__ref =
  { mutable t158b__content : t158b }
 
 function t158b__ref_t158b__content__projection 
   (a : t158b__ref) : t158b =
  a.t158b__content
 
 meta "model_projection" function t158b__ref_t158b__content__projection
 
 meta "inline:no" function t158b__ref_t158b__content__projection
 
 val t158b__havoc 
   (x : t158b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T163b" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T163b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t163b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t163b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t163b__ref =
  { mutable t163b__content : t163b }
 
 function t163b__ref_t163b__content__projection 
   (a : t163b__ref) : t163b =
  a.t163b__content
 
 meta "model_projection" function t163b__ref_t163b__content__projection
 
 meta "inline:no" function t163b__ref_t163b__content__projection
 
 val t163b__havoc 
   (x : t163b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T163b" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T163b__rep
 use        Main__lines__substring__T163b as Main__lines__substring__T163b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__substring__T163b.t163b) : int =
  (Main__lines__substring__T163b.t163b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__substring__T163b.t163b, 
 predicate in_range = Main__lines__substring__T163b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T164b" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T164b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T165b" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T165b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t165b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t165b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t165b__ref =
  { mutable t165b__content : t165b }
 
 function t165b__ref_t165b__content__projection 
   (a : t165b__ref) : t165b =
  a.t165b__content
 
 meta "model_projection" function t165b__ref_t165b__content__projection
 
 meta "inline:no" function t165b__ref_t165b__content__projection
 
 val t165b__havoc 
   (x : t165b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tinteger_32B =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref =
  { mutable tinteger_32B__content : tinteger_32B }
 
 function tinteger_32B__ref_tinteger_32B__content__projection 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref_tinteger_32B__content__projection
 
 meta "inline:no" function tinteger_32B__ref_tinteger_32B__content__projection
 
 val tinteger_32B__havoc 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B as Interfaces__Tinteger_32B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__Tinteger_32B.tinteger_32B) : int =
  (Interfaces__Tinteger_32B.tinteger_32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__2__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__2__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__2__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32 as Interfaces__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__integer_32.integer_32) : int =
  (Interfaces__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__projection
 
 meta "inline:no" function int32__ref_int32__content__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Calculator__int32__rep
 use        Calculator__int32 as Calculator__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Calculator__int32.int32) : int =
  (Calculator__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Calculator__int32.int32, 
 predicate in_range = Calculator__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__2__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__2__projection
 
 meta "inline:no" function int32__ref_int32__content__2__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at main.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Main__int32__rep
 use        Main__int32 as Main__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__int32.int32) : int =
  (Main__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__int32.int32, 
 predicate in_range = Main__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "result" defined at calculator.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Calculator__result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32__rep as Calculator__int32__rep

 type __split_fields =
  { rec__calculator__result__success [@name:Success] [@model_trace:.9286] : bool; rec__calculator__result__value [@model_trace:.9296] [@name:Value] : Calculator__int32.int32 }
 
 function __split_fields_rec__calculator__result__success__projection [@name:Success] [@model_trace:.9286] 
   (a : __split_fields) : bool =
  a.rec__calculator__result__success
 
 meta "model_projection" function __split_fields_rec__calculator__result__success__projection
 
 meta "inline:no" function __split_fields_rec__calculator__result__success__projection
 
 function __split_fields_rec__calculator__result__value__projection [@model_trace:.9296] [@name:Value] 
   (a : __split_fields) : Calculator__int32.int32 =
  a.rec__calculator__result__value
 
 meta "model_projection" function __split_fields_rec__calculator__result__value__projection
 
 meta "inline:no" function __split_fields_rec__calculator__result__value__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate calculator__result__success__pred 
   (a : __rep) =
  true
 val calculator__result__success__pred 
   (a : __rep) : bool
  ensures { result <-> calculator__result__success__pred (a : __rep) }
 
 val rec__calculator__result__success_ 
   (a : __rep) : bool
  requires {  (calculator__result__success__pred a) }
  ensures {  (result = a.__split_fields.rec__calculator__result__success) }
 
 predicate calculator__result__value__pred 
   (a : __rep) =
  true
 val calculator__result__value__pred 
   (a : __rep) : bool
  ensures { result <-> calculator__result__value__pred (a : __rep) }
 
 val rec__calculator__result__value_ 
   (a : __rep) : Calculator__int32.int32
  requires {  (calculator__result__value__pred a) }
  ensures {  (result = a.__split_fields.rec__calculator__result__value) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__calculator__result__success = b.__split_fields.rec__calculator__result__success) /\ ((Calculator__int32__rep.to_rep a.__split_fields.rec__calculator__result__value) = (Calculator__int32__rep.to_rep b.__split_fields.rec__calculator__result__value)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "result" defined at calculator.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Calculator__result
 use export Calculator__result__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type result__ =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant calculator__result__success__first__bit 
   : int

 
 val constant calculator__result__success__last__bit 
   : int

 
 val constant calculator__result__success__position 
   : int

 
 axiom calculator__result__success__first__bit_axiom :
  ((calculator__result__success__first__bit ) >= (0 : int))
 
 axiom calculator__result__success__last__bit_axiom :
  ((calculator__result__success__last__bit ) > (calculator__result__success__first__bit ))
 
 axiom calculator__result__success__position_axiom :
  ((calculator__result__success__position ) >= (0 : int))
 
 val constant calculator__result__value__first__bit 
   : int

 
 val constant calculator__result__value__last__bit 
   : int

 
 val constant calculator__result__value__position 
   : int

 
 axiom calculator__result__value__first__bit_axiom :
  ((calculator__result__value__first__bit ) >= (0 : int))
 
 axiom calculator__result__value__last__bit_axiom :
  ((calculator__result__value__last__bit ) > (calculator__result__value__first__bit ))
 
 axiom calculator__result__value__position_axiom :
  ((calculator__result__value__position ) >= (0 : int))
 
 val function user_eq 
   (a : result__) (b : result__) : bool
 
 val constant dummy 
   : result__

 
 type result____ref =
  { mutable result____content : result__ }
 
 function result____ref_result____content__projection 
   (a : result____ref) : result__ =
  a.result____content
 
 meta "model_projection" function result____ref_result____content__projection
 
 meta "inline:no" function result____ref_result____content__projection
 
 val result____havoc 
   (x : result____ref) : unit
  writes {x}

end

(* Module for axiomatizing type "result" defined at main.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Main__result
 use export Calculator__result
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "locker" defined at locker.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Locker__locker__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Pin__pin as Pin__pin
 use        Pin__pin__rep as Pin__pin__rep

 type __split_fields =
  { rec__locker__locker__number [@name:Number] [@model_trace:.9653] : Pin__pin.pin; rec__locker__locker__locked [@model_trace:.9665] [@name:Locked] : bool }
 
 function __split_fields_rec__locker__locker__number__projection [@name:Number] [@model_trace:.9653] 
   (a : __split_fields) : Pin__pin.pin =
  a.rec__locker__locker__number
 
 meta "model_projection" function __split_fields_rec__locker__locker__number__projection
 
 meta "inline:no" function __split_fields_rec__locker__locker__number__projection
 
 function __split_fields_rec__locker__locker__locked__projection [@model_trace:.9665] [@name:Locked] 
   (a : __split_fields) : bool =
  a.rec__locker__locker__locked
 
 meta "model_projection" function __split_fields_rec__locker__locker__locked__projection
 
 meta "inline:no" function __split_fields_rec__locker__locker__locked__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate locker__locker__number__pred 
   (a : __rep) =
  true
 val locker__locker__number__pred 
   (a : __rep) : bool
  ensures { result <-> locker__locker__number__pred (a : __rep) }
 
 val rec__locker__locker__number_ 
   (a : __rep) : Pin__pin.pin
  requires {  (locker__locker__number__pred a) }
  ensures {  (result = a.__split_fields.rec__locker__locker__number) }
 
 predicate locker__locker__locked__pred 
   (a : __rep) =
  true
 val locker__locker__locked__pred 
   (a : __rep) : bool
  ensures { result <-> locker__locker__locked__pred (a : __rep) }
 
 val rec__locker__locker__locked_ 
   (a : __rep) : bool
  requires {  (locker__locker__locked__pred a) }
  ensures {  (result = a.__split_fields.rec__locker__locker__locked) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Pin__pin__rep.to_rep a.__split_fields.rec__locker__locker__number) = (Pin__pin__rep.to_rep b.__split_fields.rec__locker__locker__number)) /\ (a.__split_fields.rec__locker__locker__locked = b.__split_fields.rec__locker__locker__locked) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Locker__locker
 use export Locker__locker__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type locker =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant locker__locker__number__first__bit 
   : int

 
 val constant locker__locker__number__last__bit 
   : int

 
 val constant locker__locker__number__position 
   : int

 
 axiom locker__locker__number__first__bit_axiom :
  ((locker__locker__number__first__bit ) >= (0 : int))
 
 axiom locker__locker__number__last__bit_axiom :
  ((locker__locker__number__last__bit ) > (locker__locker__number__first__bit ))
 
 axiom locker__locker__number__position_axiom :
  ((locker__locker__number__position ) >= (0 : int))
 
 val constant locker__locker__locked__first__bit 
   : int

 
 val constant locker__locker__locked__last__bit 
   : int

 
 val constant locker__locker__locked__position 
   : int

 
 axiom locker__locker__locked__first__bit_axiom :
  ((locker__locker__locked__first__bit ) >= (0 : int))
 
 axiom locker__locker__locked__last__bit_axiom :
  ((locker__locker__locked__last__bit ) > (locker__locker__locked__first__bit ))
 
 axiom locker__locker__locked__position_axiom :
  ((locker__locker__locked__position ) >= (0 : int))
 
 val function user_eq 
   (a : locker) (b : locker) : bool
 
 val constant dummy 
   : locker

 
 type locker__ref =
  { mutable locker__content : locker }
 
 function locker__ref_locker__content__projection 
   (a : locker__ref) : locker =
  a.locker__content
 
 meta "model_projection" function locker__ref_locker__content__projection
 
 meta "inline:no" function locker__ref_locker__content__projection
 
 val locker__havoc 
   (x : locker__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type stack_index =
  < range 1 512 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = stack_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type stack_index__ref =
  { mutable stack_index__content : stack_index }
 
 function stack_index__ref_stack_index__content__projection 
   (a : stack_index__ref) : stack_index =
  a.stack_index__content
 
 meta "model_projection" function stack_index__ref_stack_index__content__projection
 
 meta "inline:no" function stack_index__ref_stack_index__content__projection
 
 val stack_index__havoc 
   (x : stack_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_index__rep
 use        Stack__stack_index as Stack__stack_index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__stack_index.stack_index) : int =
  (Stack__stack_index.stack_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__stack_index.stack_index, 
 predicate in_range = Stack__stack_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__3__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__3__projection
 
 meta "inline:no" function int32__ref_int32__content__3__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32__rep
 use        Stack__int32 as Stack__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__int32.int32) : int =
  (Stack__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__int32.int32, 
 predicate in_range = Stack__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Stack__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__int32 as Stack__int32
 use        Stack__int32__rep as Stack__int32__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Stack__int32.int32
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_163   : int.
   (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
    ((Stack__int32__rep.to_rep (get a temp___idx_163)) = (Stack__int32__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_163   : int.
    (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
     ((Stack__int32__rep.to_rep (get a temp___idx_163)) = (Stack__int32__rep.to_rep (get b ((b__first - a__first) + temp___idx_163))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Stack__int32__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Stack__int32.component_type, 
 type map = Array__Int__Stack__int32.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Stack__int32.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Stack__int32_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__int32__rep as Stack__int32__rep
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Stack__int32.component_type, 
 function to_rep = Stack__int32__rep.to_rep, 
 type map = Array__Int__Stack__int32.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Stack__int32.get, 
 function bool_eq = Array__Int__Stack__int32.bool_eq

end

(* Module for axiomatizing type "Tstack_arrayB" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__Tstack_arrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Stack__stack_index as Stack__stack_index
 use        Stack__int32 as Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 type component_type =
  Stack__int32.int32
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Stack__int32.map, 
 function array_bool_eq = Array__Int__Stack__int32.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stack__stack_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tstack_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tstack_arrayB__ref =
  { mutable tstack_arrayB__content : tstack_arrayB }
 
 function tstack_arrayB__ref_tstack_arrayB__content__projection 
   (a : tstack_arrayB__ref) : tstack_arrayB =
  a.tstack_arrayB__content
 
 meta "model_projection" function tstack_arrayB__ref_tstack_arrayB__content__projection
 
 meta "inline:no" function tstack_arrayB__ref_tstack_arrayB__content__projection
 
 val tstack_arrayB__havoc 
   (x : tstack_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__int32 as Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 type component_type =
  Stack__int32.int32
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (512 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Stack__int32.map, 
 function array_bool_eq = Array__Int__Stack__int32.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack_instance" defined at stack.ads:36, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack__stack_instance__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Stack__stack_array as Stack__stack_array
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 type __split_fields =
  { rec__stack__stack_instance__data [@name:Data] [@model_trace:.19508] : Array__Int__Stack__int32.map; rec__stack__stack_instance__top_index [@model_trace:.19518] [@name:Top_Index] : Standard__natural.natural }
 
 function __split_fields_rec__stack__stack_instance__data__projection [@name:Data] [@model_trace:.19508] 
   (a : __split_fields) : Array__Int__Stack__int32.map =
  a.rec__stack__stack_instance__data
 
 meta "model_projection" function __split_fields_rec__stack__stack_instance__data__projection
 
 meta "inline:no" function __split_fields_rec__stack__stack_instance__data__projection
 
 function __split_fields_rec__stack__stack_instance__top_index__projection [@model_trace:.19518] [@name:Top_Index] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__stack__stack_instance__top_index
 
 meta "model_projection" function __split_fields_rec__stack__stack_instance__top_index__projection
 
 meta "inline:no" function __split_fields_rec__stack__stack_instance__top_index__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__4__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__4__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__4__projection
 
 meta "inline:no" function __rep___split_fields__4__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate stack__stack_instance__data__pred 
   (a : __rep) =
  true
 val stack__stack_instance__data__pred 
   (a : __rep) : bool
  ensures { result <-> stack__stack_instance__data__pred (a : __rep) }
 
 val rec__stack__stack_instance__data_ 
   (a : __rep) : Array__Int__Stack__int32.map
  requires {  (stack__stack_instance__data__pred a) }
  ensures {  (result = a.__split_fields.rec__stack__stack_instance__data) }
 
 predicate stack__stack_instance__top_index__pred 
   (a : __rep) =
  true
 val stack__stack_instance__top_index__pred 
   (a : __rep) : bool
  ensures { result <-> stack__stack_instance__top_index__pred (a : __rep) }
 
 val rec__stack__stack_instance__top_index_ 
   (a : __rep) : Standard__natural.natural
  requires {  (stack__stack_instance__top_index__pred a) }
  ensures {  (result = a.__split_fields.rec__stack__stack_instance__top_index) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (Stack__stack_array.bool_eq a.__split_fields.rec__stack__stack_instance__data b.__split_fields.rec__stack__stack_instance__data) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__stack__stack_instance__top_index) = (Standard__natural__rep.to_rep b.__split_fields.rec__stack__stack_instance__top_index)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "stack_instance" defined at stack.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_instance
 use export Stack__stack_instance__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type stack_instance =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant stack__stack_instance__data__first__bit 
   : int

 
 val constant stack__stack_instance__data__last__bit 
   : int

 
 val constant stack__stack_instance__data__position 
   : int

 
 axiom stack__stack_instance__data__first__bit_axiom :
  ((stack__stack_instance__data__first__bit ) >= (0 : int))
 
 axiom stack__stack_instance__data__last__bit_axiom :
  ((stack__stack_instance__data__last__bit ) > (stack__stack_instance__data__first__bit ))
 
 axiom stack__stack_instance__data__position_axiom :
  ((stack__stack_instance__data__position ) >= (0 : int))
 
 val constant stack__stack_instance__top_index__first__bit 
   : int

 
 val constant stack__stack_instance__top_index__last__bit 
   : int

 
 val constant stack__stack_instance__top_index__position 
   : int

 
 axiom stack__stack_instance__top_index__first__bit_axiom :
  ((stack__stack_instance__top_index__first__bit ) >= (0 : int))
 
 axiom stack__stack_instance__top_index__last__bit_axiom :
  ((stack__stack_instance__top_index__last__bit ) > (stack__stack_instance__top_index__first__bit ))
 
 axiom stack__stack_instance__top_index__position_axiom :
  ((stack__stack_instance__top_index__position ) >= (0 : int))
 
 val function user_eq 
   (a : stack_instance) (b : stack_instance) : bool
 
 val constant dummy 
   : stack_instance

 
 type stack_instance__ref =
  { mutable stack_instance__content : stack_instance }
 
 function stack_instance__ref_stack_instance__content__projection 
   (a : stack_instance__ref) : stack_instance =
  a.stack_instance__content
 
 meta "model_projection" function stack_instance__ref_stack_instance__content__projection
 
 meta "inline:no" function stack_instance__ref_stack_instance__content__projection
 
 val stack_instance__havoc 
   (x : stack_instance__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type location_index =
  < range 1 256 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = location_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type location_index__ref =
  { mutable location_index__content : location_index }
 
 function location_index__ref_location_index__content__projection 
   (a : location_index__ref) : location_index =
  a.location_index__content
 
 meta "model_projection" function location_index__ref_location_index__content__projection
 
 meta "inline:no" function location_index__ref_location_index__content__projection
 
 val location_index__havoc 
   (x : location_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__location_index.location_index) : int =
  (Memorystore__location_index.location_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__location_index.location_index, 
 predicate in_range = Memorystore__location_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int32__ref =
  { mutable int32__content : int32 }
 
 function int32__ref_int32__content__4__projection 
   (a : int32__ref) : int32 =
  a.int32__content
 
 meta "model_projection" function int32__ref_int32__content__4__projection
 
 meta "inline:no" function int32__ref_int32__content__4__projection
 
 val int32__havoc 
   (x : int32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32__rep
 use        Memorystore__int32 as Memorystore__int32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Memorystore__int32.int32) : int =
  (Memorystore__int32.int32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Memorystore__int32.int32, 
 predicate in_range = Memorystore__int32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "cell_opt" defined at memorystore.ads:41, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep

 type __split_fields =
  { rec__memorystore__cell_opt__valid [@model_trace:.8301] [@name:Valid] : bool; rec__memorystore__cell_opt__val [@name:Val] [@model_trace:.8312] : Memorystore__int32.int32 }
 
 function __split_fields_rec__memorystore__cell_opt__valid__projection [@model_trace:.8301] [@name:Valid] 
   (a : __split_fields) : bool =
  a.rec__memorystore__cell_opt__valid
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__valid__projection
 
 function __split_fields_rec__memorystore__cell_opt__val__projection [@name:Val] [@model_trace:.8312] 
   (a : __split_fields) : Memorystore__int32.int32 =
  a.rec__memorystore__cell_opt__val
 
 meta "model_projection" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__cell_opt__val__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__5__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__5__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__5__projection
 
 meta "inline:no" function __rep___split_fields__5__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__cell_opt__valid__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__valid__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__valid__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__valid_ 
   (a : __rep) : bool
  requires {  (memorystore__cell_opt__valid__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__valid) }
 
 predicate memorystore__cell_opt__val__pred 
   (a : __rep) =
  true
 val memorystore__cell_opt__val__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__cell_opt__val__pred (a : __rep) }
 
 val rec__memorystore__cell_opt__val_ 
   (a : __rep) : Memorystore__int32.int32
  requires {  (memorystore__cell_opt__val__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__cell_opt__val) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (a.__split_fields.rec__memorystore__cell_opt__valid = b.__split_fields.rec__memorystore__cell_opt__valid) /\ ((Memorystore__int32__rep.to_rep a.__split_fields.rec__memorystore__cell_opt__val) = (Memorystore__int32__rep.to_rep b.__split_fields.rec__memorystore__cell_opt__val)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__cell_opt
 use export Memorystore__cell_opt__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type cell_opt =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__cell_opt__valid__first__bit 
   : int

 
 val constant memorystore__cell_opt__valid__last__bit 
   : int

 
 val constant memorystore__cell_opt__valid__position 
   : int

 
 axiom memorystore__cell_opt__valid__first__bit_axiom :
  ((memorystore__cell_opt__valid__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__valid__last__bit_axiom :
  ((memorystore__cell_opt__valid__last__bit ) > (memorystore__cell_opt__valid__first__bit ))
 
 axiom memorystore__cell_opt__valid__position_axiom :
  ((memorystore__cell_opt__valid__position ) >= (0 : int))
 
 val constant memorystore__cell_opt__val__first__bit 
   : int

 
 val constant memorystore__cell_opt__val__last__bit 
   : int

 
 val constant memorystore__cell_opt__val__position 
   : int

 
 axiom memorystore__cell_opt__val__first__bit_axiom :
  ((memorystore__cell_opt__val__first__bit ) >= (0 : int))
 
 axiom memorystore__cell_opt__val__last__bit_axiom :
  ((memorystore__cell_opt__val__last__bit ) > (memorystore__cell_opt__val__first__bit ))
 
 axiom memorystore__cell_opt__val__position_axiom :
  ((memorystore__cell_opt__val__position ) >= (0 : int))
 
 val function user_eq 
   (a : cell_opt) (b : cell_opt) : bool
 
 val constant dummy 
   : cell_opt

 
 type cell_opt__ref =
  { mutable cell_opt__content : cell_opt }
 
 function cell_opt__ref_cell_opt__content__projection 
   (a : cell_opt__ref) : cell_opt =
  a.cell_opt__content
 
 meta "model_projection" function cell_opt__ref_cell_opt__content__projection
 
 meta "inline:no" function cell_opt__ref_cell_opt__content__projection
 
 val cell_opt__havoc 
   (x : cell_opt__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Memorystore__cell_opt
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Memorystore__cell_opt.cell_opt
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_164   : int.
   (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
    (Memorystore__cell_opt.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_164   : int.
    (if (( (a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last) )) then (
     (Memorystore__cell_opt.bool_eq (get a temp___idx_164) (get b ((b__first - a__first) + temp___idx_164)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Memorystore__cell_opt__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Memorystore__cell_opt.component_type, 
 type map = Array__Int__Memorystore__cell_opt.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Memorystore__cell_opt.get

end

(* Module for axiomatizing type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__Tmem_arrayB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Memorystore__location_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmem_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmem_arrayB__ref =
  { mutable tmem_arrayB__content : tmem_arrayB }
 
 function tmem_arrayB__ref_tmem_arrayB__content__projection 
   (a : tmem_arrayB__ref) : tmem_arrayB =
  a.tmem_arrayB__content
 
 meta "model_projection" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 meta "inline:no" function tmem_arrayB__ref_tmem_arrayB__content__projection
 
 val tmem_arrayB__havoc 
   (x : tmem_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__mem_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type component_type =
  Memorystore__cell_opt.cell_opt
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (256 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Memorystore__cell_opt.map, 
 function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "database" defined at memorystore.ads:48, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__mem_array as Memorystore__mem_array
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 type __split_fields =
  { rec__memorystore__database__mem [@name:Mem] [@model_trace:.8347] : Array__Int__Memorystore__cell_opt.map; rec__memorystore__database__cnt [@name:Cnt] [@model_trace:.8357] : Standard__natural.natural }
 
 function __split_fields_rec__memorystore__database__mem__projection [@name:Mem] [@model_trace:.8347] 
   (a : __split_fields) : Array__Int__Memorystore__cell_opt.map =
  a.rec__memorystore__database__mem
 
 meta "model_projection" function __split_fields_rec__memorystore__database__mem__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__mem__projection
 
 function __split_fields_rec__memorystore__database__cnt__projection [@name:Cnt] [@model_trace:.8357] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__memorystore__database__cnt
 
 meta "model_projection" function __split_fields_rec__memorystore__database__cnt__projection
 
 meta "inline:no" function __split_fields_rec__memorystore__database__cnt__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__6__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__6__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__6__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__6__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__6__projection
 
 meta "inline:no" function __rep___split_fields__6__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate memorystore__database__mem__pred 
   (a : __rep) =
  true
 val memorystore__database__mem__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__mem__pred (a : __rep) }
 
 val rec__memorystore__database__mem_ 
   (a : __rep) : Array__Int__Memorystore__cell_opt.map
  requires {  (memorystore__database__mem__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__mem) }
 
 predicate memorystore__database__cnt__pred 
   (a : __rep) =
  true
 val memorystore__database__cnt__pred 
   (a : __rep) : bool
  ensures { result <-> memorystore__database__cnt__pred (a : __rep) }
 
 val rec__memorystore__database__cnt_ 
   (a : __rep) : Standard__natural.natural
  requires {  (memorystore__database__cnt__pred a) }
  ensures {  (result = a.__split_fields.rec__memorystore__database__cnt) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( (Memorystore__mem_array.bool_eq a.__split_fields.rec__memorystore__database__mem b.__split_fields.rec__memorystore__database__mem) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__memorystore__database__cnt) = (Standard__natural__rep.to_rep b.__split_fields.rec__memorystore__database__cnt)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__database
 use export Memorystore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant memorystore__database__mem__first__bit 
   : int

 
 val constant memorystore__database__mem__last__bit 
   : int

 
 val constant memorystore__database__mem__position 
   : int

 
 axiom memorystore__database__mem__first__bit_axiom :
  ((memorystore__database__mem__first__bit ) >= (0 : int))
 
 axiom memorystore__database__mem__last__bit_axiom :
  ((memorystore__database__mem__last__bit ) > (memorystore__database__mem__first__bit ))
 
 axiom memorystore__database__mem__position_axiom :
  ((memorystore__database__mem__position ) >= (0 : int))
 
 val constant memorystore__database__cnt__first__bit 
   : int

 
 val constant memorystore__database__cnt__last__bit 
   : int

 
 val constant memorystore__database__cnt__position 
   : int

 
 axiom memorystore__database__cnt__first__bit_axiom :
  ((memorystore__database__cnt__first__bit ) >= (0 : int))
 
 axiom memorystore__database__cnt__last__bit_axiom :
  ((memorystore__database__cnt__last__bit ) > (memorystore__database__cnt__first__bit ))
 
 axiom memorystore__database__cnt__position_axiom :
  ((memorystore__database__cnt__position ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_165 : int) (__void_param : unit)

end

(* Module for axiomatizing type "T16b" defined at main.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Main__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_trace:13006] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at mycommandline.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 14 0 0][@name:Number] [@model_trace:4350] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_166 : Standard__string.string) (number : int)

end

(* Module for defining the constant "pin_str" defined at main.adb:40, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_1__pin_str
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant pin_str [#"main.adb" 40 0 0][@model_trace:2448] [@model_projected] [@name:PIN_Str] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T19b" defined at main.adb:43, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__L18b__T19b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t19b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t19b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t19b__ref =
  { mutable t19b__content : t19b }
 
 function t19b__ref_t19b__content__projection 
   (a : t19b__ref) : t19b =
  a.t19b__content
 
 meta "model_projection" function t19b__ref_t19b__content__projection
 
 meta "inline:no" function t19b__ref_t19b__content__projection
 
 val t19b__havoc 
   (x : t19b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20b" defined at main.adb:44, created in Gnat2Why.Types.Translate_Type *)
module Main__B_1__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at pin.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 5 0 0][@model_trace:7985] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_168 : int) (s : Standard__string.string)

end

(* Module for defining the constant "n" defined at locker.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Locker__init__n
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant n [#"locker.ads" 9 0 0][@name:N] [@model_trace:9553] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at locker.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__init__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "l" defined at locker.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Locker__is_locked__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"locker.ads" 15 0 0][@model_projected] [@name:L] [@model_trace:9631] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at locker.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__is_locked__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__is_locked
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val function is_locked 
   (l : Locker__locker.locker) : bool
 
 val predicate is_locked__function_guard 
   (temp___result_169 : bool) (l : Locker__locker.locker)

end

(* Module for axiomatizing type "T22b" defined at main.adb:55, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T22b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:12694] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T23b" defined at main.adb:57, created in Gnat2Why.Types.Translate_Type *)
module Main__L_2__T23b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.4880] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.4890] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.4880] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.4890] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__7__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__7__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__7__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__7__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__7__projection
 
 meta "inline:no" function __rep___split_fields__7__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_170   : int.
   (if (( (a__first <= temp___idx_170) /\ (temp___idx_170 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_170) (get b ((b__first - a__first) + temp___idx_170)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_170   : int.
    (if (( (a__first <= temp___idx_170) /\ (temp___idx_170 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_170) (get b ((b__first - a__first) + temp___idx_170)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TTtSP1__rep
 use        Main__B_3__TTtSP1 as Main__B_3__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_3__TTtSP1.tTtSP1) : int =
  (Main__B_3__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_3__TTtSP1.tTtSP1, 
 predicate in_range = Main__B_3__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T24b" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t24b =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t24b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t24b__ref =
  { mutable t24b__content : t24b }
 
 function t24b__ref_t24b__content__projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref_t24b__content__projection
 
 meta "inline:no" function t24b__ref_t24b__content__projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T24b" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T24b__rep
 use        Main__B_3__T24b as Main__B_3__T24b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__B_3__T24b.t24b) : int =
  (Main__B_3__T24b.t24b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__B_3__T24b.t24b, 
 predicate in_range = Main__B_3__T24b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T25b" defined at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T25b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@model_trace:4963] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26b" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at main.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at main.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T31b" defined at main.adb:83, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T31b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at stack.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__pop2__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"stack.ads" 31 0 0][@model_projected] [@model_trace:19439] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop2__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T33b" defined at main.adb:94, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T33b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 18 0 0][@model_trace:9315] [@model_projected] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 18 0 0][@name:A] [@model_trace:9326] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__add__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 18 0 0][@name:B] [@model_trace:9333] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__add__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "add" defined at calculator.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__add
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function add 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate add__function_guard 
   (temp___result_171 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for defining the constant "l" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"stack.ads" 22 0 0][@model_projected] [@model_trace:19260] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"stack.ads" 22 0 0][@name:A] [@model_trace:19280] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T34b" defined at main.adb:100, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T34b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T35b" defined at main.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T36b" defined at main.adb:102, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T37b" defined at main.adb:104, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T37b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at stack.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push2__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"stack.ads" 25 0 0][@model_projected] [@model_trace:19317] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push2__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at stack.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push2__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"stack.ads" 25 0 0][@name:A] [@model_trace:19337] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push2__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at stack.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push2__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"stack.ads" 25 0 0][@name:B] [@model_trace:19344] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at stack.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push2__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T38b" defined at main.adb:107, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_5__T38b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T39b" defined at main.adb:113, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T39b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T40b" defined at main.adb:115, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T40b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T42b" defined at main.adb:120, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T44b" defined at main.adb:131, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T44b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 21 0 0][@model_projected] [@name:L] [@model_trace:9363] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 21 0 0][@name:A] [@model_trace:9374] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__sub__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 21 0 0][@model_trace:9381] [@name:B] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__sub__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "sub" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__sub
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function sub 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate sub__function_guard 
   (temp___result_172 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for axiomatizing type "T45b" defined at main.adb:137, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T46b" defined at main.adb:139, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T46b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T47b" defined at main.adb:139, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T48b" defined at main.adb:141, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T48b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T49b" defined at main.adb:144, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_6__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T50b" defined at main.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T51b" defined at main.adb:152, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T51b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T53b" defined at main.adb:157, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T53b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at main.adb:168, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 24 0 0][@model_projected] [@model_trace:9411] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 24 0 0][@model_trace:9422] [@name:A] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__mul__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 24 0 0][@model_trace:9429] [@name:B] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__mul__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "mul" defined at calculator.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__mul
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function mul 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate mul__function_guard 
   (temp___result_173 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for axiomatizing type "T56b" defined at main.adb:174, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T56b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T57b" defined at main.adb:176, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T57b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T58b" defined at main.adb:176, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T58b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T59b" defined at main.adb:178, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T59b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T60b" defined at main.adb:181, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_7__T60b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T61b" defined at main.adb:187, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T61b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T62b" defined at main.adb:189, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T62b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T64b" defined at main.adb:194, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T64b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T66b" defined at main.adb:205, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T66b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"calculator.ads" 27 0 0][@model_projected] [@model_trace:9459] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "a" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant a [#"calculator.ads" 27 0 0][@name:A] [@model_trace:9470] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "b" defined at calculator.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Calculator__div__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant b [#"calculator.ads" 27 0 0][@model_trace:9477] [@name:B] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at calculator.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Calculator__div__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "div" defined at calculator.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Calculator__div
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Calculator__result as Calculator__result

 val function div 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
 
 val predicate div__function_guard 
   (temp___result_174 : Calculator__result.result__) (l : Locker__locker.locker) (a : int) (b : int)

end

(* Module for axiomatizing type "T67b" defined at main.adb:211, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T67b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T68b" defined at main.adb:213, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T68b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T69b" defined at main.adb:213, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T69b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T70b" defined at main.adb:215, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T70b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (28 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T71b" defined at main.adb:218, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_8__T71b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T72b" defined at main.adb:224, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T72b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T73b" defined at main.adb:226, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T73b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T75b" defined at main.adb:231, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T75b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at stringtointeger.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stringtointeger__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"stringtointeger.ads" 6 0 0][@model_projected] [@model_trace:7939] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stringtointeger.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringtointeger__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringtointeger__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_175 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "T77b" defined at main.adb:242, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_9__T77b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T78b" defined at main.adb:244, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_9__T78b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T79b" defined at main.adb:248, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T79b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T80b" defined at main.adb:250, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T80b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T82b" defined at main.adb:255, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T82b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T84b" defined at main.adb:268, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_10__T84b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T85b" defined at main.adb:268, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_10__T85b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T86b" defined at main.adb:270, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_10__T86b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (11 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T87b" defined at main.adb:274, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T87b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T88b" defined at main.adb:276, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T88b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T90b" defined at main.adb:281, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T90b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at stack.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__pop__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"stack.ads" 28 0 0][@model_projected] [@model_trace:19382] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T92b" defined at main.adb:291, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_11__T92b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T93b" defined at main.adb:293, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_11__T93b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (12 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T94b" defined at main.adb:298, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T94b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (8 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T95b" defined at main.adb:300, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T95b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T97b" defined at main.adb:305, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T97b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "max_locations" defined at memorystore.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Memorystore__max_locations
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_locations [#"memorystore.ads" 5 0 0][@model_trace:8066] [@name:Max_Locations] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T99b" defined at main.adb:316, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_12__T99b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at lockmemory.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__get__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"lockmemory.ads" 10 0 0][@model_trace:19581] [@model_projected] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at lockmemory.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__get__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "d" defined at lockmemory.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__get__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant d [#"lockmemory.ads" 10 0 0][@model_trace:19592] [@model_projected] [@name:D] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at lockmemory.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__get__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "loc" defined at lockmemory.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__get__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"lockmemory.ads" 10 0 0][@model_trace:19603] [@name:Loc] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at lockmemory.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__get__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at lockmemory.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lockmemory__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Memorystore__database as Memorystore__database

 val function get 
   (l : Locker__locker.locker) (d : Memorystore__database.database) (loc : int) : int
 
 val predicate get__function_guard 
   (temp___result_176 : int) (l : Locker__locker.locker) (d : Memorystore__database.database) (loc : int)

end

(* Module for axiomatizing type "T100b" defined at main.adb:321, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_12__T100b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T101b" defined at main.adb:321, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_12__T101b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (14 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T102b" defined at main.adb:323, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_12__T102b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T103b" defined at main.adb:328, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T103b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T104b" defined at main.adb:330, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T104b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T106b" defined at main.adb:335, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T106b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T108b" defined at main.adb:346, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_13__T108b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T109b" defined at main.adb:350, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_13__T109b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (21 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at lockmemory.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__put__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"lockmemory.ads" 14 0 0][@model_trace:19636] [@model_projected] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at lockmemory.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__put__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "loc" defined at lockmemory.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__put__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"lockmemory.ads" 15 0 0][@name:Loc] [@model_trace:19658] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at lockmemory.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__put__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "val" defined at lockmemory.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__put__val
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant val__ [#"lockmemory.ads" 15 0 0][@name:Val] [@model_trace:19669] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "val" defined at lockmemory.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__put__val___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T110b" defined at main.adb:353, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_13__T110b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (19 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T111b" defined at main.adb:358, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T111b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T112b" defined at main.adb:360, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T112b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T114b" defined at main.adb:365, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T114b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T116b" defined at main.adb:374, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_14__T116b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (45 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at lockmemory.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__remove__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"lockmemory.ads" 18 0 0][@model_projected] [@name:L] [@model_trace:19699] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at lockmemory.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__remove__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "loc" defined at lockmemory.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__remove__loc
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant loc [#"lockmemory.ads" 18 0 0][@name:Loc] [@model_trace:19721] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "loc" defined at lockmemory.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__remove__loc___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T117b" defined at main.adb:377, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_14__T117b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T118b" defined at main.adb:381, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T118b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T119b" defined at main.adb:383, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T119b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (7 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T121b" defined at main.adb:388, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T121b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "l" defined at lockmemory.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__print__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val constant l [#"lockmemory.ads" 21 0 0][@model_trace:19751] [@model_projected] [@name:L] 
   : Locker__locker.locker

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at lockmemory.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__print__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "d" defined at lockmemory.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Lockmemory__print__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val constant d [#"lockmemory.ads" 21 0 0][@model_projected] [@name:D] [@model_trace:19762] 
   : Memorystore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at lockmemory.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__print__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T123b" defined at main.adb:394, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T123b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T124b" defined at main.adb:396, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T124b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (15 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T126b" defined at main.adb:401, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T126b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T129b" defined at main.adb:409, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_15__L128b__T129b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t129b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t129b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t129b__ref =
  { mutable t129b__content : t129b }
 
 function t129b__ref_t129b__content__projection 
   (a : t129b__ref) : t129b =
  a.t129b__content
 
 meta "model_projection" function t129b__ref_t129b__content__projection
 
 meta "inline:no" function t129b__ref_t129b__content__projection
 
 val t129b__havoc 
   (x : t129b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T130b" defined at main.adb:410, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_15__T130b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "n" defined at locker.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Locker__reset_pwd__n
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant n [#"locker.ads" 13 0 0][@model_trace:9611] [@name:N] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at locker.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__reset_pwd__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T131b" defined at main.adb:416, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T131b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T132b" defined at main.adb:418, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T132b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T134b" defined at main.adb:424, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T134b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (31 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T137b" defined at main.adb:432, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_16__L136b__T137b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t137b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t137b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t137b__ref =
  { mutable t137b__content : t137b }
 
 function t137b__ref_t137b__content__projection 
   (a : t137b__ref) : t137b =
  a.t137b__content
 
 meta "model_projection" function t137b__ref_t137b__content__projection
 
 meta "inline:no" function t137b__ref_t137b__content__projection
 
 val t137b__havoc 
   (x : t137b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T138b" defined at main.adb:433, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__B_16__T138b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (20 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "n" defined at locker.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Locker__try_unlock__n
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant n [#"locker.ads" 11 0 0][@model_trace:9582] [@name:N] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at locker.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__try_unlock__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T139b" defined at main.adb:439, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T139b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T140b" defined at main.adb:440, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T140b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (10 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T142b" defined at main.adb:444, created in Gnat2Why.Types.Translate_Type *)
module Main__B_3__B_4__T142b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (17 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:45 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.ads" 45 0 0][@model_projected] [@model_trace:29492] [@name:M]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:45 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 21 0 0][@model_trace:33234] [@model_projected] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 21 0 0][@model_trace:33234'First] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 21 0 0][@model_projected] [@model_trace:33234'Last] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.adb" 28 0 0][@model_projected] [@name:M] [@model_trace:33289]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:29 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 29 0 0][@model_projected] [@model_trace:33308] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:29 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 35 0 0][@model_trace:33385] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:44 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 44 0 0][@model_projected] [@model_trace:33452] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:44 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:68 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 68 0 0][@model_trace:33629] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:68 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val r__split_fields [#"mystring.adb" 87 0 0][@model_trace:33829] [@model_projected] [@name:R]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:88 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 88 0 0][@model_trace:33852] [@model_projected] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:88 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 90 0 0][@model_projected] [@name:I] [@model_trace:33918]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:12816] [@model_projected]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:12816'First] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:12816'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_projected] [@name:Last] [@model_trace:12825]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "l" defined at main.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Main__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val l__split_fields [#"main.adb" 27 0 0][@model_trace:2390] [@model_projected] [@name:L]  : Locker__locker.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at main.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at main.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val s__split_fields [#"main.adb" 28 0 0][@model_trace:2401] [@model_projected] [@name:S]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at main.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sk" defined at main.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Main__sk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val sk__split_fields [#"main.adb" 29 0 0][@name:Sk] [@model_projected] [@model_trace:2412]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sk" defined at main.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__sk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at main.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Main__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"main.adb" 30 0 0][@model_projected] [@name:D] [@model_trace:2423]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at main.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "l" defined at locker.ads:9, created in Gnat2Why.Decls.Translate_Variable *)
module Locker__init__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val l__split_fields [#"locker.ads" 9 0 0][@model_trace:9544] [@model_projected] [@name:L]  : Locker__locker.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at locker.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__init__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__init__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val s__split_fields [#"stack.ads" 20 0 0][@model_trace:19242] [@model_projected] [@name:S]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__init__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at memorystore.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Memorystore__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"memorystore.ads" 18 0 0][@model_projected] [@name:D] [@model_trace:8116]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at memorystore.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Memorystore__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 62 0 0][@model_projected] [@name:T] [@model_trace:2539]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 63 0 0][@model_projected] [@name:NumTokens] [@model_trace:2565]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:4972]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:4972'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_trace:4972'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 16 0 0][@model_trace:4981] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token1" defined at main.adb:73, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__token1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val token1 [#"main.adb" 73 0 0][@model_trace:2601] [@model_projected] [@name:Token1]  : Array__Int__Standard__character.map__ref 
 
 val constant token1__first [#"main.adb" 73 0 0][@model_projected] [@model_trace:2601'First] [@name:Token1] 
   : Standard__integer.integer

 
 val constant token1__last [#"main.adb" 73 0 0][@model_trace:2601'Last] [@model_projected] [@name:Token1] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token1" defined at main.adb:73, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__token1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at main.adb:88, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_5__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__result as Main__result

 val r__split_fields [#"main.adb" 88 0 0][@model_projected] [@model_trace:2663] [@name:R]  : Main__result.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at main.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_5__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:89, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_5__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 89 0 0][@model_trace:2672] [@model_projected] [@name:A]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_5__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at main.adb:89, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_5__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"main.adb" 89 0 0][@model_trace:2679] [@model_projected] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at main.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_5__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:90, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_5__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 90 0 0][@name:Success] [@model_projected] [@model_trace:2691]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_5__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val s__split_fields [#"stack.ads" 31 0 0][@model_projected] [@model_trace:19450] [@name:S]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at stack.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop2__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"stack.ads" 31 0 0][@model_projected] [@name:A] [@model_trace:19459]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop2__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at stack.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop2__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"stack.ads" 31 0 0][@model_projected] [@name:B] [@model_trace:19466]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at stack.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop2__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop2__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"stack.ads" 31 0 0][@name:Success] [@model_trace:19477] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop2__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val s__split_fields [#"stack.ads" 22 0 0][@model_trace:19271] [@model_projected] [@name:S]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"stack.ads" 22 0 0][@name:Success] [@model_trace:19289] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val s__split_fields [#"stack.ads" 25 0 0][@model_trace:19328] [@model_projected] [@name:S]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:25, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push2__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"stack.ads" 25 0 0][@name:Success] [@model_trace:19354] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push2__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at main.adb:125, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_6__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__result as Main__result

 val r__split_fields [#"main.adb" 125 0 0][@model_projected] [@model_trace:2814] [@name:R]  : Main__result.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at main.adb:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_6__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:126, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_6__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 126 0 0][@model_projected] [@model_trace:2823] [@name:A]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_6__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at main.adb:126, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_6__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"main.adb" 126 0 0][@model_trace:2830] [@model_projected] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at main.adb:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_6__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:127, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_6__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 127 0 0][@name:Success] [@model_projected] [@model_trace:2842]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_6__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at main.adb:162, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_7__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__result as Main__result

 val r__split_fields [#"main.adb" 162 0 0][@model_projected] [@name:R] [@model_trace:2965]  : Main__result.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at main.adb:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_7__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:163, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_7__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 163 0 0][@model_projected] [@name:A] [@model_trace:2974]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:163, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_7__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at main.adb:163, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_7__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"main.adb" 163 0 0][@model_trace:2981] [@model_projected] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at main.adb:163, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_7__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:164, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_7__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 164 0 0][@name:Success] [@model_projected] [@model_trace:2993]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:164, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_7__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at main.adb:199, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_8__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__result as Main__result

 val r__split_fields [#"main.adb" 199 0 0][@model_projected] [@name:R] [@model_trace:3116]  : Main__result.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at main.adb:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_8__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:200, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_8__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 200 0 0][@model_projected] [@name:A] [@model_trace:3125]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:200, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_8__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "b" defined at main.adb:200, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_8__b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val b [#"main.adb" 200 0 0][@model_trace:3132] [@model_projected] [@name:B]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "b" defined at main.adb:200, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_8__b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:201, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_8__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 201 0 0][@model_trace:3144] [@name:Success] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:201, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_8__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:236, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_9__token2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token2 [#"main.adb" 236 0 0][@model_trace:3267] [@model_projected] [@name:Token2]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:236, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_9__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:238, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_9__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 238 0 0][@name:Success] [@model_trace:3307] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_9__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:260, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_10__token2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token2 [#"main.adb" 260 0 0][@model_projected] [@model_trace:3367] [@name:Token2]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:260, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_10__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token3" defined at main.adb:262, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_10__token3
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token3 [#"main.adb" 262 0 0][@model_projected] [@model_trace:3407] [@name:Token3]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token3" defined at main.adb:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_10__token3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:264, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_10__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 264 0 0][@name:Success] [@model_projected] [@model_trace:3447]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_10__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:286, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_11__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 286 0 0][@model_projected] [@name:A] [@model_trace:3517]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:286, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_11__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:287, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_11__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 287 0 0][@name:Success] [@model_projected] [@model_trace:3526]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:287, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_11__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:28, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance

 val s__split_fields [#"stack.ads" 28 0 0][@model_trace:19393] [@model_projected] [@name:S]  : Stack__stack_instance.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at stack.ads:28, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"stack.ads" 28 0 0][@model_trace:19402] [@model_projected] [@name:A]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:28, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"stack.ads" 28 0 0][@name:Success] [@model_projected] [@model_trace:19411]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:310, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_12__token2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token2 [#"main.adb" 310 0 0][@model_projected] [@model_trace:3584] [@name:Token2]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:310, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_12__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:312, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_12__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 312 0 0][@model_projected] [@name:A] [@model_trace:3624]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:312, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_12__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:313, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_12__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 313 0 0][@name:Success] [@model_projected] [@model_trace:3633]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:313, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_12__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:340, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_13__token2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token2 [#"main.adb" 340 0 0][@model_projected] [@model_trace:3719] [@name:Token2]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:340, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_13__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "a" defined at main.adb:342, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_13__a
 use        "_gnatprove_standard".Main
 use        "int".Int

 val a [#"main.adb" 342 0 0][@model_projected] [@name:A] [@model_trace:3759]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "a" defined at main.adb:342, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_13__a___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "success" defined at main.adb:343, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_13__success
 use        "_gnatprove_standard".Main
 use        "int".Int

 val success [#"main.adb" 343 0 0][@name:Success] [@model_trace:3768] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "success" defined at main.adb:343, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_13__success___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at lockmemory.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Lockmemory__put__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"lockmemory.ads" 14 0 0][@model_trace:19647] [@model_projected] [@name:D]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at lockmemory.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__put__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:370, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_14__token2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val token2 [#"main.adb" 370 0 0][@model_projected] [@name:Token2] [@model_trace:3851]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:370, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_14__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at lockmemory.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Lockmemory__remove__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database

 val d__split_fields [#"lockmemory.ads" 18 0 0][@model_trace:19710] [@model_projected] [@name:D]  : Memorystore__database.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at lockmemory.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Lockmemory__remove__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:406, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_15__token2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val token2 [#"main.adb" 406 0 0][@model_projected] [@name:Token2] [@model_trace:3973]  : Array__Int__Standard__character.map__ref 
 
 val constant token2__first [#"main.adb" 406 0 0][@model_trace:3973'First] [@model_projected] [@name:Token2] 
   : Standard__integer.integer

 
 val constant token2__last [#"main.adb" 406 0 0][@model_projected] [@name:Token2] [@model_trace:3973'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:406, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_15__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "l" defined at locker.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Locker__reset_pwd__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val l__split_fields [#"locker.ads" 13 0 0][@model_projected] [@name:L] [@model_trace:9602]  : Locker__locker.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at locker.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__reset_pwd__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "token2" defined at main.adb:429, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B_3__B_4__B_16__token2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val token2 [#"main.adb" 429 0 0][@model_trace:4075] [@model_projected] [@name:Token2]  : Array__Int__Standard__character.map__ref 
 
 val constant token2__first [#"main.adb" 429 0 0][@model_projected] [@name:Token2] [@model_trace:4075'First] 
   : Standard__integer.integer

 
 val constant token2__last [#"main.adb" 429 0 0][@model_projected] [@model_trace:4075'Last] [@name:Token2] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "token2" defined at main.adb:429, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B_3__B_4__B_16__token2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "l" defined at locker.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Locker__try_unlock__l
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 val l__split_fields [#"locker.ads" 11 0 0][@model_projected] [@model_trace:9573] [@name:L]  : Locker__locker.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "l" defined at locker.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Locker__try_unlock__l___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:45 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:51 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:51 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:73 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:73 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at locker.ads:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at stack.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at memorystore.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Memorystore__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:53, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "pop2" defined at stack.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__pop2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "push" defined at stack.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__push
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "push2" defined at stack.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__push2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "pop" defined at stack.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__pop
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at lockmemory.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lockmemory__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at lockmemory.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lockmemory__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print" defined at lockmemory.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Lockmemory__print
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "reset_pwd" defined at locker.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__reset_pwd
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "try_unlock" defined at locker.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__try_unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  (if (( temp___is_init_184 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_188)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_189 : int) (temp___skip_top_level_190 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) =
  (if (( temp___is_init_191 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_195)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_196 : int) (temp___skip_top_level_197 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) =
  (if (( temp___is_init_198 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_202)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_202 : int) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_203 : int) (temp___skip_top_level_204 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_203 : int) (temp___skip_top_level_204 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_203 : int) (temp___skip_top_level_204 : bool) }

end

(* Module giving axioms for type "T13b" defined at mystring.ads:50 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:48 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : Array__Int__Standard__character.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_209 : Array__Int__Standard__character.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : Array__Int__Standard__character.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : Array__Int__Standard__character.map) (temp___skip_top_level_212 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_211 : Array__Int__Standard__character.map) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : Array__Int__Standard__character.map) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:49 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_219 : Main__lines__mystring.mystring) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_219 : Main__lines__mystring.mystring) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_219 : Main__lines__mystring.mystring) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_221 : Main__lines__mystring.mystring) (temp___skip_top_level_222 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_221 : Main__lines__mystring.mystring) (temp___skip_top_level_222 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_221 : Main__lines__mystring.mystring) (temp___skip_top_level_222 : bool) }

end

(* Module giving axioms for type "T10b" defined at mystring.ads:33 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:21 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_250 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) =
  (if (temp___skip_constant_247) then (
   true) else (
   ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Main__lines__to_string__TresultS.first temp___expr_250) (Main__lines__to_string__TresultS.last temp___expr_250)) /\ ( ((Main__lines__to_string__TresultS.first temp___expr_250) = (1 : int)) /\ ((Main__lines__to_string__TresultS.last temp___expr_250) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_250 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_250 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) =
  ( ( true /\ ((Main__lines__to_string__TresultS.first temp___expr_252) = (1 : int)) )/\((Main__lines__to_string__TresultS.last temp___expr_252) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_252 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "T143b" defined at mystring.adb:23 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T143b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T144b" defined at mystring.adb:23 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T144b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS146bP1" defined at mystring.adb:27 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__TS146bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S146b" defined at mystring.adb:27 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__S146b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__from_string__S146b as Main__lines__from_string__S146b

 predicate dynamic_invariant [@inline] 
   (temp___expr_260 : Main__lines__from_string__S146b.s146b) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) =
  (if (temp___skip_constant_257) then (
   true) else (
   ( (Main__lines__from_string__S146b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) (Main__lines__from_string__S146b.first temp___expr_260) (Main__lines__from_string__S146b.last temp___expr_260)) /\ ( ((Main__lines__from_string__S146b.first temp___expr_260) = (Standard__string.first Main__lines__from_string__s.s)) /\ ((Main__lines__from_string__S146b.last temp___expr_260) = (Standard__string.last Main__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_260 : Main__lines__from_string__S146b.s146b) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_260 : Main__lines__from_string__S146b.s146b) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_262 : Main__lines__from_string__S146b.s146b) (temp___skip_top_level_263 : bool) =
  ( ( true /\ ((Main__lines__from_string__S146b.first temp___expr_262) = (Standard__string.first Main__lines__from_string__s.s)) )/\((Main__lines__from_string__S146b.last temp___expr_262) = (Standard__string.last Main__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_262 : Main__lines__from_string__S146b.s146b) (temp___skip_top_level_263 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_262 : Main__lines__from_string__S146b.s146b) (temp___skip_top_level_263 : bool) }

end

(* Module giving axioms for type "T147b" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T147b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T148b" defined at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T148b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T149b" defined at mystring.adb:35 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__L_1__T149b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T160b" defined at mystring.adb:75 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L159b__T160b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T158b" defined at mystring.adb:75 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L157b__T158b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T163b" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T163b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T164b" defined at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T164b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T165b" defined at mystring.adb:90 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T165b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__integer_32 as Interfaces__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_272 : int) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) =
  (if (( temp___is_init_268 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_272)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_272 : int) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_272 : int) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_273 : int) (temp___skip_top_level_274 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_273 : int) (temp___skip_top_level_274 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_273 : int) (temp___skip_top_level_274 : bool) }

end

(* Module giving axioms for type "int32" defined at calculator.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Calculator__int32 as Calculator__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) =
  (if (( temp___is_init_275 \/ (Calculator__int32.first <= Calculator__int32.last) )) then (
   (Calculator__int32.dynamic_property Calculator__int32.first Calculator__int32.last temp___expr_279)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_280 : int) (temp___skip_top_level_281 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_280 : int) (temp___skip_top_level_281 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_280 : int) (temp___skip_top_level_281 : bool) }

end

(* Module giving axioms for type "int32" defined at main.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__int32 as Main__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_286 : int) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) =
  (if (( temp___is_init_282 \/ (Main__int32.first <= Main__int32.last) )) then (
   (Main__int32.dynamic_property Main__int32.first Main__int32.last temp___expr_286)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_286 : int) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_286 : int) (temp___is_init_282 : bool) (temp___skip_constant_283 : bool) (temp___do_toplevel_284 : bool) (temp___do_typ_inv_285 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_287 : int) (temp___skip_top_level_288 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_287 : int) (temp___skip_top_level_288 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_287 : int) (temp___skip_top_level_288 : bool) }

end

(* Module giving axioms for type "result" defined at calculator.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Calculator__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Calculator__result as Calculator__result

 predicate dynamic_invariant [@inline] 
   (temp___expr_293 : Calculator__result.result__) (temp___is_init_289 : bool) (temp___skip_constant_290 : bool) (temp___do_toplevel_291 : bool) (temp___do_typ_inv_292 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_293 : Calculator__result.result__) (temp___is_init_289 : bool) (temp___skip_constant_290 : bool) (temp___do_toplevel_291 : bool) (temp___do_typ_inv_292 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_293 : Calculator__result.result__) (temp___is_init_289 : bool) (temp___skip_constant_290 : bool) (temp___do_toplevel_291 : bool) (temp___do_typ_inv_292 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_294 : Calculator__result.result__) (temp___skip_top_level_295 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_294 : Calculator__result.result__) (temp___skip_top_level_295 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_294 : Calculator__result.result__) (temp___skip_top_level_295 : bool) }

end

(* Module giving axioms for type "result" defined at main.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__result as Main__result

 predicate dynamic_invariant [@inline] 
   (temp___expr_302 : Main__result.result__) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_302 : Main__result.result__) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_302 : Main__result.result__) (temp___is_init_298 : bool) (temp___skip_constant_299 : bool) (temp___do_toplevel_300 : bool) (temp___do_typ_inv_301 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_303 : Main__result.result__) (temp___skip_top_level_304 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_303 : Main__result.result__) (temp___skip_top_level_304 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_303 : Main__result.result__) (temp___skip_top_level_304 : bool) }

end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_311 : int) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) =
  (if (( temp___is_init_307 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_311)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_311 : int) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_311 : int) (temp___is_init_307 : bool) (temp___skip_constant_308 : bool) (temp___do_toplevel_309 : bool) (temp___do_typ_inv_310 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_312 : int) (temp___skip_top_level_313 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_312 : int) (temp___skip_top_level_313 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_312 : int) (temp___skip_top_level_313 : bool) }

end

(* Module giving axioms for type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Locker__locker___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker

 predicate dynamic_invariant [@inline] 
   (temp___expr_318 : Locker__locker.locker) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_318 : Locker__locker.locker) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_318 : Locker__locker.locker) (temp___is_init_314 : bool) (temp___skip_constant_315 : bool) (temp___do_toplevel_316 : bool) (temp___do_typ_inv_317 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_319 : Locker__locker.locker) (temp___skip_top_level_320 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_319 : Locker__locker.locker) (temp___skip_top_level_320 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_319 : Locker__locker.locker) (temp___skip_top_level_320 : bool) }

end

(* Module giving axioms for type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__stack_index as Stack__stack_index

 predicate dynamic_invariant [@inline] 
   (temp___expr_327 : int) (temp___is_init_323 : bool) (temp___skip_constant_324 : bool) (temp___do_toplevel_325 : bool) (temp___do_typ_inv_326 : bool) =
  (if (( temp___is_init_323 \/ (Stack__stack_index.first <= Stack__stack_index.last) )) then (
   (Stack__stack_index.dynamic_property Stack__stack_index.first Stack__stack_index.last temp___expr_327)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_327 : int) (temp___is_init_323 : bool) (temp___skip_constant_324 : bool) (temp___do_toplevel_325 : bool) (temp___do_typ_inv_326 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_327 : int) (temp___is_init_323 : bool) (temp___skip_constant_324 : bool) (temp___do_toplevel_325 : bool) (temp___do_typ_inv_326 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_328 : int) (temp___skip_top_level_329 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_328 : int) (temp___skip_top_level_329 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_328 : int) (temp___skip_top_level_329 : bool) }

end

(* Module giving axioms for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__int32 as Stack__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_334 : int) (temp___is_init_330 : bool) (temp___skip_constant_331 : bool) (temp___do_toplevel_332 : bool) (temp___do_typ_inv_333 : bool) =
  (if (( temp___is_init_330 \/ (Stack__int32.first <= Stack__int32.last) )) then (
   (Stack__int32.dynamic_property Stack__int32.first Stack__int32.last temp___expr_334)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_334 : int) (temp___is_init_330 : bool) (temp___skip_constant_331 : bool) (temp___do_toplevel_332 : bool) (temp___do_typ_inv_333 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_334 : int) (temp___is_init_330 : bool) (temp___skip_constant_331 : bool) (temp___do_toplevel_332 : bool) (temp___do_typ_inv_333 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_335 : int) (temp___skip_top_level_336 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_335 : int) (temp___skip_top_level_336 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_335 : int) (temp___skip_top_level_336 : bool) }

end

(* Module giving axioms for type "Tstack_arrayB" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__Tstack_arrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32
 use        Array__Int__Stack__int32 as Array__Int__Stack__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_341 : Array__Int__Stack__int32.map) (temp___is_init_337 : bool) (temp___skip_constant_338 : bool) (temp___do_toplevel_339 : bool) (temp___do_typ_inv_340 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_341 : Array__Int__Stack__int32.map) (temp___is_init_337 : bool) (temp___skip_constant_338 : bool) (temp___do_toplevel_339 : bool) (temp___do_typ_inv_340 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_341 : Array__Int__Stack__int32.map) (temp___is_init_337 : bool) (temp___skip_constant_338 : bool) (temp___do_toplevel_339 : bool) (temp___do_typ_inv_340 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_343 : Array__Int__Stack__int32.map) (temp___skip_top_level_344 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_343 : Array__Int__Stack__int32.map) (temp___skip_top_level_344 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_343 : Array__Int__Stack__int32.map) (temp___skip_top_level_344 : bool) }

end

(* Module giving axioms for type "stack_instance" defined at stack.ads:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_instance___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Stack__stack_instance as Stack__stack_instance

 predicate dynamic_invariant [@inline] 
   (temp___expr_351 : Stack__stack_instance.stack_instance) (temp___is_init_347 : bool) (temp___skip_constant_348 : bool) (temp___do_toplevel_349 : bool) (temp___do_typ_inv_350 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_351 : Stack__stack_instance.stack_instance) (temp___is_init_347 : bool) (temp___skip_constant_348 : bool) (temp___do_toplevel_349 : bool) (temp___do_typ_inv_350 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_351 : Stack__stack_instance.stack_instance) (temp___is_init_347 : bool) (temp___skip_constant_348 : bool) (temp___do_toplevel_349 : bool) (temp___do_typ_inv_350 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_353 : Stack__stack_instance.stack_instance) (temp___skip_top_level_354 : bool) =
  (if ((Stack__stack_instance.stack__stack_instance__top_index__pred temp___expr_353)) then (
   ((Standard__natural__rep.to_rep temp___expr_353.Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index) = (0 : int))) else true)
 val default_initial_assumption [@inline] 
   (temp___expr_353 : Stack__stack_instance.stack_instance) (temp___skip_top_level_354 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_353 : Stack__stack_instance.stack_instance) (temp___skip_top_level_354 : bool) }

end

(* Module giving axioms for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__location_index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__location_index as Memorystore__location_index

 predicate dynamic_invariant [@inline] 
   (temp___expr_362 : int) (temp___is_init_358 : bool) (temp___skip_constant_359 : bool) (temp___do_toplevel_360 : bool) (temp___do_typ_inv_361 : bool) =
  (if (( temp___is_init_358 \/ (Memorystore__location_index.first <= Memorystore__location_index.last) )) then (
   (Memorystore__location_index.dynamic_property Memorystore__location_index.first Memorystore__location_index.last temp___expr_362)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_362 : int) (temp___is_init_358 : bool) (temp___skip_constant_359 : bool) (temp___do_toplevel_360 : bool) (temp___do_typ_inv_361 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_362 : int) (temp___is_init_358 : bool) (temp___skip_constant_359 : bool) (temp___do_toplevel_360 : bool) (temp___do_typ_inv_361 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_363 : int) (temp___skip_top_level_364 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_363 : int) (temp___skip_top_level_364 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_363 : int) (temp___skip_top_level_364 : bool) }

end

(* Module giving axioms for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__int32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__int32 as Memorystore__int32

 predicate dynamic_invariant [@inline] 
   (temp___expr_369 : int) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) =
  (if (( temp___is_init_365 \/ (Memorystore__int32.first <= Memorystore__int32.last) )) then (
   (Memorystore__int32.dynamic_property Memorystore__int32.first Memorystore__int32.last temp___expr_369)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_369 : int) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_369 : int) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool) (temp___do_typ_inv_368 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_370 : int) (temp___skip_top_level_371 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_370 : int) (temp___skip_top_level_371 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_370 : int) (temp___skip_top_level_371 : bool) }

end

(* Module giving axioms for type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__cell_opt___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_376 : Memorystore__cell_opt.cell_opt) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_376 : Memorystore__cell_opt.cell_opt) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_376 : Memorystore__cell_opt.cell_opt) (temp___is_init_372 : bool) (temp___skip_constant_373 : bool) (temp___do_toplevel_374 : bool) (temp___do_typ_inv_375 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_377 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_378 : bool) =
  ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred temp___expr_377)) then (
   (temp___expr_377.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred temp___expr_377)) then (
   ((Memorystore__int32__rep.to_rep temp___expr_377.Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_377 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_378 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_377 : Memorystore__cell_opt.cell_opt) (temp___skip_top_level_378 : bool) }

end

(* Module giving axioms for type "Tmem_arrayB" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__Tmem_arrayB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__mem_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_383 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_379 : bool) (temp___skip_constant_380 : bool) (temp___do_toplevel_381 : bool) (temp___do_typ_inv_382 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_383 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_379 : bool) (temp___skip_constant_380 : bool) (temp___do_toplevel_381 : bool) (temp___do_typ_inv_382 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_383 : Array__Int__Memorystore__cell_opt.map) (temp___is_init_379 : bool) (temp___skip_constant_380 : bool) (temp___do_toplevel_381 : bool) (temp___do_typ_inv_382 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_385 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_386 : bool) =
  (forall temp___387   : int.
   (if (( (Memorystore__location_index.first <= temp___387) /\ (temp___387 <= Memorystore__location_index.last) )) then (
    (let temp___388 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_385 temp___387) in (
     ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_385 temp___387))) then (
      ((Array__Int__Memorystore__cell_opt.get temp___expr_385 temp___387).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_385 temp___387))) then (
      ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_385 temp___387).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
   ) else true))
 val default_initial_assumption [@inline] 
   (temp___expr_385 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_386 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_385 : Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_386 : bool) }

end

(* Module giving axioms for type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Memorystore__database as Memorystore__database
 use        Memorystore__location_index as Memorystore__location_index
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32__rep as Memorystore__int32__rep
 use        Memorystore__cell_opt as Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
 use        Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt

 predicate dynamic_invariant [@inline] 
   (temp___expr_393 : Memorystore__database.database) (temp___is_init_389 : bool) (temp___skip_constant_390 : bool) (temp___do_toplevel_391 : bool) (temp___do_typ_inv_392 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_393 : Memorystore__database.database) (temp___is_init_389 : bool) (temp___skip_constant_390 : bool) (temp___do_toplevel_391 : bool) (temp___do_typ_inv_392 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_393 : Memorystore__database.database) (temp___is_init_389 : bool) (temp___skip_constant_390 : bool) (temp___do_toplevel_391 : bool) (temp___do_typ_inv_392 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_395 : Memorystore__database.database) (temp___skip_top_level_396 : bool) =
  ( (if ((Memorystore__database.memorystore__database__mem__pred temp___expr_395)) then (
   (let temp___397 [@mlw:proxy_symbol] [@introduced] = temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem in (
    (forall temp___398   : int.
     (if (( (Memorystore__location_index.first <= temp___398) /\ (temp___398 <= Memorystore__location_index.last) )) then (
      (let temp___399 [@mlw:proxy_symbol] [@introduced] = (Array__Int__Memorystore__cell_opt.get temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___398) in (
       ( (if ((Memorystore__cell_opt.memorystore__cell_opt__valid__pred (Array__Int__Memorystore__cell_opt.get temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___398))) then (
        ((Array__Int__Memorystore__cell_opt.get temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___398).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid = (Boolean.of_int (0 : int)))) else true) /\ (if ((Memorystore__cell_opt.memorystore__cell_opt__val__pred (Array__Int__Memorystore__cell_opt.get temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___398))) then (
        ((Memorystore__int32__rep.to_rep (Array__Int__Memorystore__cell_opt.get temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem temp___398).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val) = (0 : int))) else true) )))
     ) else true))))
  ) else true) /\ (if ((Memorystore__database.memorystore__database__cnt__pred temp___expr_395)) then (
   ((Standard__natural__rep.to_rep temp___expr_395.Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__cnt) = (0 : int))) else true) )
 val default_initial_assumption [@inline] 
   (temp___expr_395 : Memorystore__database.database) (temp___skip_top_level_396 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_395 : Memorystore__database.database) (temp___skip_top_level_396 : bool) }

end

(* Module giving axioms for type "T16b" defined at main.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19b" defined at main.adb:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__L18b__T19b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at main.adb:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_1__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T22b" defined at main.adb:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T22b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T23b" defined at main.adb:57, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_2__T23b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_412 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_408 : bool) (temp___skip_constant_409 : bool) (temp___do_toplevel_410 : bool) (temp___do_typ_inv_411 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_412 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_408 : bool) (temp___skip_constant_409 : bool) (temp___do_toplevel_410 : bool) (temp___do_typ_inv_411 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_412 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_408 : bool) (temp___skip_constant_409 : bool) (temp___do_toplevel_410 : bool) (temp___do_typ_inv_411 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_413 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_414 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_413 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_414 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_413 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_414 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_421 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_417 : bool) (temp___skip_constant_418 : bool) (temp___do_toplevel_419 : bool) (temp___do_typ_inv_420 : bool) =
  (if (temp___skip_constant_418) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_421) (Mystringtokeniser__tokenarray.last temp___expr_421))))
 val dynamic_invariant [@inline] 
   (temp___expr_421 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_417 : bool) (temp___skip_constant_418 : bool) (temp___do_toplevel_419 : bool) (temp___do_typ_inv_420 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_421 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_417 : bool) (temp___skip_constant_418 : bool) (temp___do_toplevel_419 : bool) (temp___do_typ_inv_420 : bool) }

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_427 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_427 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_427 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_423 : bool) (temp___skip_constant_424 : bool) (temp___do_toplevel_425 : bool) (temp___do_typ_inv_426 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_429 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_430 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_429 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_430 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_429 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_430 : bool) }

end

(* Module giving axioms for type "T24b" defined at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T24b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T25b" defined at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T25b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at main.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at main.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T31b" defined at main.adb:83, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T31b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T33b" defined at main.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T33b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T34b" defined at main.adb:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T34b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at main.adb:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at main.adb:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T37b" defined at main.adb:104, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T37b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T38b" defined at main.adb:107, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_5__T38b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T39b" defined at main.adb:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T39b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T40b" defined at main.adb:115, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T40b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at main.adb:120, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T44b" defined at main.adb:131, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T44b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at main.adb:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T46b" defined at main.adb:139, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T46b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at main.adb:139, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T48b" defined at main.adb:141, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T48b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T49b" defined at main.adb:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_6__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at main.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T51b" defined at main.adb:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T51b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T53b" defined at main.adb:157, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T53b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at main.adb:168, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T56b" defined at main.adb:174, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T56b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T57b" defined at main.adb:176, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T57b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T58b" defined at main.adb:176, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T58b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T59b" defined at main.adb:178, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T59b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T60b" defined at main.adb:181, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_7__T60b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T61b" defined at main.adb:187, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T61b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T62b" defined at main.adb:189, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T62b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T64b" defined at main.adb:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T64b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T66b" defined at main.adb:205, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T66b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T67b" defined at main.adb:211, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T67b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T68b" defined at main.adb:213, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T68b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T69b" defined at main.adb:213, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T69b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T70b" defined at main.adb:215, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T70b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T71b" defined at main.adb:218, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_8__T71b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T72b" defined at main.adb:224, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T72b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T73b" defined at main.adb:226, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T73b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T75b" defined at main.adb:231, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T75b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T77b" defined at main.adb:242, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_9__T77b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T78b" defined at main.adb:244, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_9__T78b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T79b" defined at main.adb:248, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T79b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T80b" defined at main.adb:250, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T80b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T82b" defined at main.adb:255, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T82b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T84b" defined at main.adb:268, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_10__T84b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T85b" defined at main.adb:268, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_10__T85b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T86b" defined at main.adb:270, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_10__T86b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T87b" defined at main.adb:274, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T87b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T88b" defined at main.adb:276, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T88b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T90b" defined at main.adb:281, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T90b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T92b" defined at main.adb:291, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_11__T92b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T93b" defined at main.adb:293, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_11__T93b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T94b" defined at main.adb:298, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T94b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T95b" defined at main.adb:300, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T95b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T97b" defined at main.adb:305, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T97b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T99b" defined at main.adb:316, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_12__T99b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T100b" defined at main.adb:321, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_12__T100b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T101b" defined at main.adb:321, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_12__T101b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T102b" defined at main.adb:323, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_12__T102b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T103b" defined at main.adb:328, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T103b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T104b" defined at main.adb:330, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T104b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T106b" defined at main.adb:335, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T106b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T108b" defined at main.adb:346, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_13__T108b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T109b" defined at main.adb:350, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_13__T109b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T110b" defined at main.adb:353, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_13__T110b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T111b" defined at main.adb:358, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T111b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T112b" defined at main.adb:360, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T112b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T114b" defined at main.adb:365, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T114b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T116b" defined at main.adb:374, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_14__T116b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T117b" defined at main.adb:377, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_14__T117b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T118b" defined at main.adb:381, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T118b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T119b" defined at main.adb:383, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T119b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T121b" defined at main.adb:388, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T121b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T123b" defined at main.adb:394, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T123b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T124b" defined at main.adb:396, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T124b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T126b" defined at main.adb:401, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T126b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T129b" defined at main.adb:409, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_15__L128b__T129b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T130b" defined at main.adb:410, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_15__T130b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T131b" defined at main.adb:416, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T131b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T132b" defined at main.adb:418, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T132b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T134b" defined at main.adb:424, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T134b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T137b" defined at main.adb:432, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_16__L136b__T137b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T138b" defined at main.adb:433, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__B_16__T138b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T139b" defined at main.adb:439, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T139b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T140b" defined at main.adb:440, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T140b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T142b" defined at main.adb:444, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__B_3__B_4__T142b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a value for string literal  defined at main.adb:35, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_478
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_478 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_478__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_478 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (8 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (9 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (11 : int))) = (118 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (12 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (13 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (14 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (18 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (20 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (21 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (22 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (23 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (24 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (25 : int))) = (52 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (26 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (27 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (28 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (29 : int))) = (103 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (30 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (31 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (32 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (34 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (35 : int))) = (73 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (36 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_478 __void_param) (37 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:44, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_479
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_479 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_479__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_479 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (5 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (8 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (9 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (11 : int))) = (118 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (12 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (13 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (14 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (16 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (17 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (18 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (19 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (20 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (21 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (22 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (23 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (24 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (25 : int))) = (52 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (26 : int))) = (45 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (27 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (28 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (29 : int))) = (103 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (30 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (31 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (32 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (33 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (34 : int))) = (80 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (35 : int))) = (73 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (36 : int))) = (78 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_479 __void_param) (37 : int))) = (46 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:55, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_480
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_480 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_480__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_480 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (7 : int))) = (62 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_480 __void_param) (8 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_481
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_481 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_481__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_481 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (6 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (7 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (8 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (9 : int))) = (62 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (10 : int))) = (32 : int)) ) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_3__t__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__B_3__t__aggregate_def 
   (temp___483 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:68, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_486
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_486 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_486__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_486 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (1 : int))) = (89 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (5 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (6 : int))) = (104 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (8 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (9 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (10 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (11 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (13 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (14 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (15 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (16 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (17 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (18 : int))) = (49 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (19 : int))) = (45 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (20 : int))) = (51 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (22 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (23 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (24 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (25 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (26 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (27 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_486 __void_param) (28 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:78, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_489
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_489 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_489__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_489 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_489 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:83, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_491
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_491 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_491__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_491 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_491 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:94, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_493
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_493 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_493__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_493 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (7 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (8 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (9 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (10 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (13 : int))) = (117 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (15 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (16 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (19 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (20 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (21 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (22 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (23 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_493 __void_param) (24 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:100, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_495
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_495 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_495__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_495 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_495 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:102, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_496
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_496 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_496__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_496 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (2 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_496 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:102, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_497
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_497 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_497__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_497 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (2 : int))) = (43 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_497 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:104, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_506
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_506 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_506__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_506 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (2 : int))) = (118 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (4 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (5 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (6 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (8 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (9 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (10 : int))) = (73 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (11 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (12 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (13 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (14 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (17 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (18 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (19 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (21 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (22 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (23 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (25 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (26 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (27 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (28 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (29 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (30 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_506 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:107, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_507
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_507 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_507__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_507 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_507 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:444, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_510
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_510 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_510__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_510 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (1 : int))) = (85 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (3 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (5 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (6 : int))) = (119 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (9 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (10 : int))) = (111 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (11 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (12 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (13 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (15 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (16 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_510 __void_param) (17 : int))) = (32 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:440, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_512
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_512 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_512__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_512 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (2 : int))) = (120 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (4 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (5 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (6 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (7 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (8 : int))) = (46 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (9 : int))) = (46 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_512 __void_param) (10 : int))) = (46 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:439, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_514
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_514 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_514__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_514 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (1 : int))) = (113 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (2 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_514 __void_param) (4 : int))) = (116 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:418, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_518
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_518 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_518__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_518 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (8 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (9 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (10 : int))) = (110 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (11 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (12 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (13 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (14 : int))) = (107 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (16 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_518 __void_param) (17 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:424, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_520
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_520 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_520__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_520 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_520 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:433, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_522
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_522 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_522__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_522 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (9 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (10 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (11 : int))) = (103 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (13 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (14 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (15 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (16 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (17 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (18 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (19 : int))) = (41 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_522 __void_param) (20 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:416, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_524
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_524 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_524__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_524 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_524 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:396, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_528
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_528 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_528__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_528 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (1 : int))) = (65 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (2 : int))) = (108 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (4 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (5 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (6 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (7 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (8 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (9 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (11 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (12 : int))) = (107 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (14 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_528 __void_param) (15 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:401, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_530
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_530 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_530__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_530 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_530 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:410, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_532
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_532 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_532__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_532 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (9 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (10 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (11 : int))) = (103 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (13 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (14 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (15 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (16 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (17 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (18 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (19 : int))) = (41 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_532 __void_param) (20 : int))) = (46 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:394, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_534
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_534 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_534__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_534 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_534 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_534 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_534 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_534 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:383, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_538
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_538 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_538__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_538 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_538 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:388, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_540
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_540 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_540__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_540 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_540 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:381, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_542
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_542 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_542__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_542 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_542 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_542 __void_param) (2 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_542 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_542 __void_param) (4 : int))) = (116 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:360, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_546
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_546 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_546__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_546 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_546 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:365, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_548
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_548 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_548__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_548 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_548 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:374, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_550
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_550 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_550__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_550 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (9 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (10 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (11 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (13 : int))) = (109 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (15 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (16 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (17 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (18 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (19 : int))) = (41 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (20 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (21 : int))) = (76 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (22 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (23 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (24 : int))) = (97 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (25 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (26 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (27 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (29 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (30 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (31 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (33 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (34 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (35 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (37 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (38 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (40 : int))) = (98 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (41 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (42 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (43 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (44 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_550 __void_param) (45 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:377, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_551
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_551 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_551__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_551 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (1 : int))) = (82 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (2 : int))) = (101 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (5 : int))) = (118 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (7 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (8 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (9 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (10 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (11 : int))) = (99 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (13 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (14 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (15 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (16 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (17 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (18 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (19 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_551 __void_param) (20 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:358, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_552
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_552 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_552__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_552 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (2 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (3 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (5 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_552 __void_param) (6 : int))) = (101 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:330, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_556
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_556 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_556__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_556 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_556 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:335, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_558
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_558 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_558__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_558 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_558 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:346, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_560
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_560 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_560__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_560 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (9 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (10 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (11 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (13 : int))) = (109 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (15 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (16 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (17 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (18 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (19 : int))) = (41 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (20 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (21 : int))) = (76 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (22 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (23 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (24 : int))) = (97 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (25 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (26 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (27 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (29 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (30 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (31 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (33 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (34 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (35 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (37 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (38 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (40 : int))) = (98 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (41 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (42 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (43 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (44 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_560 __void_param) (45 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:350, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_561
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_561 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_561__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_561 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (3 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (4 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (8 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (10 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (11 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (12 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (13 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (14 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (16 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (17 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (18 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (19 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (20 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_561 __void_param) (21 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:353, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_562
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_562 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_562__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_562 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (1 : int))) = (83 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (2 : int))) = (116 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (7 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (8 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (9 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (10 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (11 : int))) = (101 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (12 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (13 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (14 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (15 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (16 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (17 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (18 : int))) = (121 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_562 __void_param) (19 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:328, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_563
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_563 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_563__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_563 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (1 : int))) = (115 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (2 : int))) = (116 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (3 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (4 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (6 : int))) = (84 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_563 __void_param) (7 : int))) = (111 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:300, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_567
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_567 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_567__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_567 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_567 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:305, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_569
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_569 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_569__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_569 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_569 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:316, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_571
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_571 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_571__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_571 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (1 : int))) = (73 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (5 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (7 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (9 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (10 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (11 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (12 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (13 : int))) = (109 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (14 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (15 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (16 : int))) = (116 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (17 : int))) = (40 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (18 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (19 : int))) = (41 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (20 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (21 : int))) = (76 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (22 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (23 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (24 : int))) = (97 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (25 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (26 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (27 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (28 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (29 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (30 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (31 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (32 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (33 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (34 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (35 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (36 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (37 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (38 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (40 : int))) = (98 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (41 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (42 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (43 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (44 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_571 __void_param) (45 : int))) = (33 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:321, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_572
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_572 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_572__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_572 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (2 : int))) = (115 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (4 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (5 : int))) = (99 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (7 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (8 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (9 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (10 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (11 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (12 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (13 : int))) = (121 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_572 __void_param) (14 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:321, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_573
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_573 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_573__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_573 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_573 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_573 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_573 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_573 __void_param) (4 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_573 __void_param) (5 : int))) = (32 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:323, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_578
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_578 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_578__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_578 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (4 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (5 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (6 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (7 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (8 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (9 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (11 : int))) = (100 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (12 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (13 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (14 : int))) = (70 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (15 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (16 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (17 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (19 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (20 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (21 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (22 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (23 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_578 __void_param) (24 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:298, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_579
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_579 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_579__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_579 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (3 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (4 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (5 : int))) = (70 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (7 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_579 __void_param) (8 : int))) = (109 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:276, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_583
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_583 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_583__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_583 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_583 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:281, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_585
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_585 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_585__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_585 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_585 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:291, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_587
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_587 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_587__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_587 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_587 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_587 __void_param) (2 : int))) = (111 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_587 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_587 __void_param) (4 : int))) = (58 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_587 __void_param) (5 : int))) = (32 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:293, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_590
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_590 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_590__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_590 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (1 : int))) = (69 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (2 : int))) = (109 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (3 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (5 : int))) = (121 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (7 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (8 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (9 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (10 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (11 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_590 __void_param) (12 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:274, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_591
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_591 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_591__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_591 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_591 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_591 __void_param) (2 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_591 __void_param) (3 : int))) = (112 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:250, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_595
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_595 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_595__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_595 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_595 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:255, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_597
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_597 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_597__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_597 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_597 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:268, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_599
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_599 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_599__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_599 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_599 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_599 __void_param) (2 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_599 __void_param) (3 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_599 __void_param) (4 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_599 __void_param) (5 : int))) = (32 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:268, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_600
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_600 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_600__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_600 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (5 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_600 __void_param) (6 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:270, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_607
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_607 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_607__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_607 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (1 : int))) = (70 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (2 : int))) = (117 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (4 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (5 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (6 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (7 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (9 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (10 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_607 __void_param) (11 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:248, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_608
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_608 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_608__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_608 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_608 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_608 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_608 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_608 __void_param) (4 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_608 __void_param) (5 : int))) = (50 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:226, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_612
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_612 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_612__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_612 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_612 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:231, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_614
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_614 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_614__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_614 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_614 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:242, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_616
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_616 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_616__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_616 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (1 : int))) = (80 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (4 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (5 : int))) = (58 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_616 __void_param) (6 : int))) = (32 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:244, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_619
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_619 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_619__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_619 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (1 : int))) = (70 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (2 : int))) = (117 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (4 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (5 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (6 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (7 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (9 : int))) = (99 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (10 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_619 __void_param) (11 : int))) = (33 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:224, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_620
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_620 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_620__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_620 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_620 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_620 __void_param) (2 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_620 __void_param) (3 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_620 __void_param) (4 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_620 __void_param) (5 : int))) = (49 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:189, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_624
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_624 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_624__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_624 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_624 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:194, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_626
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_626 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_626__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_626 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_626 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:205, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_628
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_628 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_628__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_628 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (7 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (8 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (9 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (10 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (13 : int))) = (117 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (15 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (16 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (19 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (20 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (21 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (22 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (23 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_628 __void_param) (24 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:211, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_630
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_630 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_630__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_630 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_630 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:213, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_631
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_631 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_631__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_631 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_631 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_631 __void_param) (2 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_631 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:213, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_632
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_632 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_632__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_632 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_632 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_632 __void_param) (2 : int))) = (47 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_632 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:215, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_641
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_641 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_641__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_641 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (1 : int))) = (68 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (2 : int))) = (105 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (5 : int))) = (48 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (6 : int))) = (33 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (7 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (8 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (9 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (11 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (12 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (13 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (14 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (15 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (16 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (17 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (19 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (20 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (21 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (22 : int))) = (114 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (23 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (24 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (25 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (26 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (27 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_641 __void_param) (28 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:218, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_642
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_642 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_642__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_642 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_642 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:187, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_645
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_645 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_645__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_645 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_645 __void_param) (1 : int))) = (47 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:152, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_649
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_649 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_649__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_649 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_649 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:157, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_651
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_651 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_651__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_651 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_651 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:168, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_653
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_653 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_653__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_653 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (7 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (8 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (9 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (10 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (13 : int))) = (117 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (15 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (16 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (19 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (20 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (21 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (22 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (23 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_653 __void_param) (24 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:174, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_655
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_655 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_655__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_655 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_655 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:176, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_656
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_656 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_656__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_656 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_656 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_656 __void_param) (2 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_656 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:176, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_657
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_657 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_657__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_657 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_657 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_657 __void_param) (2 : int))) = (42 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_657 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:178, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_666
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_666 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_666__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_666 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (2 : int))) = (118 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (4 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (5 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (6 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (8 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (9 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (10 : int))) = (73 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (11 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (12 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (13 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (14 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (17 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (18 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (19 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (21 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (22 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (23 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (25 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (26 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (27 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (28 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (29 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (30 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_666 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:181, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_667
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_667 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_667__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_667 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_667 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:150, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_670
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_670 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_670__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_670 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_670 __void_param) (1 : int))) = (42 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:115, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_674
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_674 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_674__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_674 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (1 : int))) = (76 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (4 : int))) = (107 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (6 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_674 __void_param) (7 : int))) = (33 : int)) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:120, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_676
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_676 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_676__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_676 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (1 : int))) = (67 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (3 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (4 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (5 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (8 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (9 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (10 : int))) = (116 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (11 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (12 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (15 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (17 : int))) = (105 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (18 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (19 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (20 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (21 : int))) = (111 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (24 : int))) = (99 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (26 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (27 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (28 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (29 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (30 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_676 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:131, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_678
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_678 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_678__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_678 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (1 : int))) = (78 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (2 : int))) = (111 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (3 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (5 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (6 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (7 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (8 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (9 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (10 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (11 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (13 : int))) = (117 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (14 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (15 : int))) = (98 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (16 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (17 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (18 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (19 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (20 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (21 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (22 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (23 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_678 __void_param) (24 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:137, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_680
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_680 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_680__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_680 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_680 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:139, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_681
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_681 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_681__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_681 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_681 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_681 __void_param) (2 : int))) = (61 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_681 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:139, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_682
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_682 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_682__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_682 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_682 __void_param) (1 : int))) = (32 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_682 __void_param) (2 : int))) = (45 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_682 __void_param) (3 : int))) = (32 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:141, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_691
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_691 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_691__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_691 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (1 : int))) = (79 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (2 : int))) = (118 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (4 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (5 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (6 : int))) = (108 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (7 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (8 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (9 : int))) = (33 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (10 : int))) = (73 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (11 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (12 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (13 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (14 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (16 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (17 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (18 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (19 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (21 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (22 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (23 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (24 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (25 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (26 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (27 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (28 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (29 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (30 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_691 __void_param) (31 : int))) = (33 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:144, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_692
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_692 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_692__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_692 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (1 : int))) = (87 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (3 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (4 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (5 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (7 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (8 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (9 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (10 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (11 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_692 __void_param) (12 : int))) = (100 : int)) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:113, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_695
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_695 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_695__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_695 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_695 __void_param) (1 : int))) = (45 : int)))

end

(* Module for defining a value for string literal  defined at main.adb:76, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_699
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_699 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_699__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_699 __void_param)].
   ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_699 __void_param) (1 : int))) = (43 : int)))

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_718
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_718 
   (temp___720 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_761
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_761 
   (temp___763 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (15 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:14 instantiated at main.adb:22, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Main__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "pin_str" defined at main.adb:40, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_1__pin_str___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Mycommandline__argument as Mycommandline__argument
 use        Main__B_1__pin_str as Main__B_1__pin_str

 axiom pin_str__def_axiom :
  ((Main__B_1__pin_str.pin_str ) = (epsilon temp___result_167 : Standard__string.string.
   ( (temp___result_167 = (Mycommandline__argument.argument (1 : int))) /\ (Mycommandline__argument.argument__function_guard temp___result_167 (1 : int)) )))

end

(* Module for defining the value of constant "max_locations" defined at memorystore.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Memorystore__max_locations___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Memorystore__max_locations as Memorystore__max_locations

 axiom max_locations__def_axiom :
  ((Memorystore__max_locations.max_locations ) = (256 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:35 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep

 val length 
   (m : Main__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:29766] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__length.length m) in (
    (if ((Main__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:29766] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Main__lines__length.length m) in (
    (Main__lines__length.length__function_guard result m)))
    ) -> ((Main__lines__length.length m) = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:20 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Main__lines__to_string.to_string m)) /\ (Main__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:29199] ((Standard__string.length result) = (epsilon temp___result_227 : int.
   ( (temp___result_227 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_227 m) ))) ) /\ ( [@GP_Pretty_Ada:29206] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:29211] ((Standard__string.last result) = (epsilon temp___result_228 : int.
   ( (temp___result_228 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_228 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__to_string.to_string m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__to_string.to_string m) in (
    (if ((Main__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:29199] ((Standard__string.length result) = (epsilon temp___result_229 : int.
      ( (temp___result_229 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_229 m) ))) ) /\ ( [@GP_Pretty_Ada:29206] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:29211] ((Standard__string.last result) = (epsilon temp___result_230 : int.
      ( (temp___result_230 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_230 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:24 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__from_string as Main__lines__from_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:29684] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Main__lines__from_string.from_string s)) /\ (Main__lines__from_string.from_string__function_guard result s) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:29698] ((epsilon temp___result_231 : int.
   ( (temp___result_231 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_231 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Main__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:29684] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Main__lines__from_string.from_string s) in (
    (if ((Main__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:29698] ((epsilon temp___result_232 : int.
      ( (temp___result_232 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_232 result) )) = (Standard__string.length s)) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less as Main__lines__less

 val less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__less.less m1 m2)) /\ (Main__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Main__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:29834] (index <= (epsilon temp___result_233 : int.
   ( (temp___result_233 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_233 m) ))) ) }
  ensures {  ( ( (result = (Main__lines__get.get m index)) /\ (Main__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___234 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___234 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:29834] (index <= (epsilon temp___result_235 : int.
    ( (temp___result_235 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_235 m) ))) ) ) -> (let result = (Main__lines__get.get m index) in (
    (if ((Main__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Main__lines__get.get m index) in (
    (Main__lines__get.get__function_guard result m index)))
    ) -> ((Main__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___236 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___236 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__equal as Main__lines__equal

 val equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__equal.equal m1 m2)) /\ (Main__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:29305] ((epsilon temp___result_237 : int.
    ( (temp___result_237 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_237 m1) )) = (epsilon temp___result_238 : int.
    ( (temp___result_238 = (Main__lines__length.length m2)) /\ (Main__lines__length.length__function_guard temp___result_238 m2) ))) ) /\ (forall i   [@model_trace:29323] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_239 : int.
     ( (temp___result_239 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_239 m1) ))) ) -> ( [@GP_Pretty_Ada:29313] ((epsilon temp___result_240 : int.
     ( (temp___result_240 = (Main__lines__get.get m1 i)) /\ (Main__lines__get.get__function_guard temp___result_240 m1 i) )) = (epsilon temp___result_241 : int.
     ( (temp___result_241 = (Main__lines__get.get m2 i)) /\ (Main__lines__get.get__function_guard temp___result_241 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:29912] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__substring as Main__lines__substring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:29391] (from <= to__) ) /\ ( [@GP_Pretty_Ada:29394] (to__ <= (epsilon temp___result_242 : int.
   ( (temp___result_242 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_242 m) ))) ) ) }
  ensures {  ( ( (result = (Main__lines__substring.substring m from to__)) /\ (Main__lines__substring.substring__function_guard result m from to__) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:29807] ((epsilon temp___result_243 : int.
   ( (temp___result_243 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_243 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall from   to__   : int [(Main__lines__substring.substring m from to__)].
   ( ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:29391] (from <= to__) ) /\ ( [@GP_Pretty_Ada:29394] (to__ <= (epsilon temp___result_244 : int.
    ( (temp___result_244 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_244 m) ))) ) ) ) -> (let result = (Main__lines__substring.substring m from to__) in (
    (if ((Main__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:29807] ((epsilon temp___result_245 : int.
      ( (temp___result_245 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_245 result) )) = ((to__ - from) + (1 : int))) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:45 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Main__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:12844] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:12850] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:12859] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:12870] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:13025] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:13031] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:20008] (number <= (epsilon temp___result_401 : int.
   ( (temp___result_401 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_401 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:8005] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:8008]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:8022] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:8028] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:8005] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:8008]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:8022] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:8028] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at locker.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom

 val init 
   (l__split_fields : Locker__locker.__split_fields__ref) (n : int) : unit
  requires {  true }
  ensures {  (Locker__locker___axiom.dynamic_invariant { Locker__locker.__split_fields = l__split_fields.Locker__locker.__split_fields__content } True True True True) }
  writes {l__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at stack.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom

 val init 
   (s__split_fields : Stack__stack_instance.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = s__split_fields.Stack__stack_instance.__split_fields__content } True True True True) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at memorystore.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom

 val init 
   (d__split_fields : Memorystore__database.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__is_locked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Locker__is_locked as Locker__is_locked

 val is_locked 
   (l : Locker__locker.locker) : bool
  requires {  true }
  ensures {  ( ( (result = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard result l) )/\true ) }
 
 axiom is_locked__post_axiom :
  (forall l   : Locker__locker.locker [(Locker__is_locked.is_locked l)].
   ( (Locker__locker___axiom.dynamic_invariant l True True True True) -> (let result = (Locker__is_locked.is_locked l) in (
    (if ((Locker__is_locked.is_locked__function_guard result l)) then (
     ( ( true /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:12713] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:12719] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:5005] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:21404] true ))) /\ ( [@GP_Pretty_Ada:5014] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:5022] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@model_trace:5027] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:5052] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first s)) ) /\ ( [@GP_Pretty_Ada:5062] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:5072] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___436   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___436) /\ (temp___436 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___436) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "pop2" defined at stack.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__pop2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Stack__int32___axiom as Stack__int32___axiom

 val pop2 
   (l : Locker__locker.locker) (s__split_fields : Stack__stack_instance.__split_fields__ref) (a : int__ref) (b : int__ref) (success : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:28351] not ( ((epsilon temp___result_439 : bool.
   ( (temp___result_439 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_439 l) )) = True) ) ) }
  ensures {  ( ( (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = s__split_fields.Stack__stack_instance.__split_fields__content } True True True True) /\ (Stack__int32___axiom.dynamic_invariant a.int__content True True True True) ) /\ (Stack__int32___axiom.dynamic_invariant b.int__content True True True True) ) }
  writes {s__split_fields, a, b, success}

end

(* Module for declaring a program function (and possibly an axiom) for "add" defined at calculator.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__add___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__add as Calculator__add
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom

 val add 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:28164] not ( ((epsilon temp___result_442 : bool.
   ( (temp___result_442 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_442 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__add.add l a b)) /\ (Calculator__add.add__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom add__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__add.add l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:28164] not ( ((epsilon temp___result_443 : bool.
    ( (temp___result_443 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_443 l) )) = True) ) ) ) -> (let result = (Calculator__add.add l a b) in (
    (if ((Calculator__add.add__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "push" defined at stack.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__push___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Locker__is_locked as Locker__is_locked

 val push 
   (l : Locker__locker.locker) (s__split_fields : Stack__stack_instance.__split_fields__ref) (a : int) (success : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:28288] not ( ((epsilon temp___result_444 : bool.
   ( (temp___result_444 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_444 l) )) = True) ) ) }
  ensures {  (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = s__split_fields.Stack__stack_instance.__split_fields__content } True True True True) }
  writes {s__split_fields, success}

end

(* Module for declaring a program function (and possibly an axiom) for "push2" defined at stack.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__push2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Locker__is_locked as Locker__is_locked

 val push2 
   (l : Locker__locker.locker) (s__split_fields : Stack__stack_instance.__split_fields__ref) (a : int) (b : int) (success : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:28309] not ( ((epsilon temp___result_447 : bool.
   ( (temp___result_447 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_447 l) )) = True) ) ) }
  ensures {  (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = s__split_fields.Stack__stack_instance.__split_fields__content } True True True True) }
  writes {s__split_fields, success}

end

(* Module for declaring a program function (and possibly an axiom) for "sub" defined at calculator.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__sub___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__sub as Calculator__sub
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom

 val sub 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:28185] not ( ((epsilon temp___result_450 : bool.
   ( (temp___result_450 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_450 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__sub.sub l a b)) /\ (Calculator__sub.sub__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom sub__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__sub.sub l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:28185] not ( ((epsilon temp___result_451 : bool.
    ( (temp___result_451 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_451 l) )) = True) ) ) ) -> (let result = (Calculator__sub.sub l a b) in (
    (if ((Calculator__sub.sub__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "mul" defined at calculator.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__mul___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__mul as Calculator__mul
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom

 val mul 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:28206] not ( ((epsilon temp___result_452 : bool.
   ( (temp___result_452 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_452 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__mul.mul l a b)) /\ (Calculator__mul.mul__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom mul__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__mul.mul l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:28206] not ( ((epsilon temp___result_453 : bool.
    ( (temp___result_453 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_453 l) )) = True) ) ) ) -> (let result = (Calculator__mul.mul l a b) in (
    (if ((Calculator__mul.mul__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "div" defined at calculator.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Calculator__div___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Calculator__result as Calculator__result
 use        Calculator__div as Calculator__div
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom

 val div 
   (l : Locker__locker.locker) (a : int) (b : int) : Calculator__result.result__
  requires {  ( [@GP_Pretty_Ada:28227] not ( ((epsilon temp___result_454 : bool.
   ( (temp___result_454 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_454 l) )) = True) ) ) }
  ensures {  ( ( (result = (Calculator__div.div l a b)) /\ (Calculator__div.div__function_guard result l a b) )/\(Calculator__result___axiom.dynamic_invariant result True False True True) ) }
 
 axiom div__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall a   b   : int [(Calculator__div.div l a b)].
   ( ( ( ( (Locker__locker___axiom.dynamic_invariant l True True True True) /\ (Calculator__int32___axiom.dynamic_invariant a True True True True) ) /\ (Calculator__int32___axiom.dynamic_invariant b True True True True) ) /\ ( [@GP_Pretty_Ada:28227] not ( ((epsilon temp___result_455 : bool.
    ( (temp___result_455 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_455 l) )) = True) ) ) ) -> (let result = (Calculator__div.div l a b) in (
    (if ((Calculator__div.div__function_guard result l a b)) then (
     ( ( true /\ (Calculator__result___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at stringtointeger.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringtointeger__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__string as Standard__string
 use        Stringtointeger__from_string as Stringtointeger__from_string

 val from_string 
   (s : Standard__string.string) : int
  requires {  true }
  ensures {  ( ( (result = (Stringtointeger__from_string.from_string s)) /\ (Stringtointeger__from_string.from_string__function_guard result s) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Stringtointeger__from_string.from_string s)].
   (let result = (Stringtointeger__from_string.from_string s) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "pop" defined at stack.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__pop___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Locker__is_locked as Locker__is_locked
 use        Stack__int32___axiom as Stack__int32___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val pop 
   (l : Locker__locker.locker) (s__split_fields : Stack__stack_instance.__split_fields__ref) (a : int__ref) (success : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:28330] not ( ((epsilon temp___result_457 : bool.
   ( (temp___result_457 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_457 l) )) = True) ) ) }
  ensures {  ( (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = s__split_fields.Stack__stack_instance.__split_fields__content } True True True True) /\ (Stack__int32___axiom.dynamic_invariant a.int__content True True True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, s__split_fields, a, success}

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at lockmemory.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lockmemory__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Memorystore__database as Memorystore__database
 use        Locker__is_locked as Locker__is_locked
 use        Lockmemory__get as Lockmemory__get
 use        Memorystore__int32 as Memorystore__int32
 use        Memorystore__int32___axiom as Memorystore__int32___axiom

 val get 
   (l : Locker__locker.locker) (d : Memorystore__database.database) (loc : int) : int
  requires {  ( [@GP_Pretty_Ada:28383] not ( ((epsilon temp___result_460 : bool.
   ( (temp___result_460 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_460 l) )) = True) ) ) }
  ensures {  ( ( (result = (Lockmemory__get.get l d loc)) /\ (Lockmemory__get.get__function_guard result l d loc) )/\(Memorystore__int32___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get__post_axiom :
  (forall l   : Locker__locker.locker.
  (forall d   : Memorystore__database.database.
  (forall loc   : int [(Lockmemory__get.get l d loc)].
   (let result = (Lockmemory__get.get l d loc) in (
    (Memorystore__int32.dynamic_property Memorystore__int32.first Memorystore__int32.last result)))
  )))

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at lockmemory.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lockmemory__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Locker__is_locked as Locker__is_locked

 val put 
   (l : Locker__locker.locker) (d__split_fields : Memorystore__database.__split_fields__ref) (loc : int) (val__ : int) : unit
  requires {  ( [@GP_Pretty_Ada:28404] not ( ((epsilon temp___result_462 : bool.
   ( (temp___result_462 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_462 l) )) = True) ) ) }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at lockmemory.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lockmemory__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Locker__is_locked as Locker__is_locked

 val remove 
   (l : Locker__locker.locker) (d__split_fields : Memorystore__database.__split_fields__ref) (loc : int) : unit
  requires {  ( [@GP_Pretty_Ada:28425] not ( ((epsilon temp___result_465 : bool.
   ( (temp___result_465 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_465 l) )) = True) ) ) }
  ensures {  (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = d__split_fields.Memorystore__database.__split_fields__content } True True True True) }
  writes {d__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at lockmemory.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Lockmemory__print___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Memorystore__database as Memorystore__database
 use        Locker__is_locked as Locker__is_locked

 val print 
   (l : Locker__locker.locker) (d : Memorystore__database.database) : unit
  requires {  ( [@GP_Pretty_Ada:28446] not ( ((epsilon temp___result_468 : bool.
   ( (temp___result_468 = (Locker__is_locked.is_locked l)) /\ (Locker__is_locked.is_locked__function_guard temp___result_468 l) )) = True) ) ) }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "reset_pwd" defined at locker.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__reset_pwd___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom

 val reset_pwd 
   (l__split_fields : Locker__locker.__split_fields__ref) (n : int) : unit
  requires {  true }
  ensures {  (Locker__locker___axiom.dynamic_invariant { Locker__locker.__split_fields = l__split_fields.Locker__locker.__split_fields__content } True True True True) }
  writes {l__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "try_unlock" defined at locker.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__try_unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom

 val try_unlock 
   (l__split_fields : Locker__locker.__split_fields__ref) (n : int) : unit
  requires {  true }
  ensures {  (Locker__locker___axiom.dynamic_invariant { Locker__locker.__split_fields = l__split_fields.Locker__locker.__split_fields__content } True True True True) }
  writes {l__split_fields}

end

(* Module for defining the value of the aggregate at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__B_3__t__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t__aggregate_def as Main__B_3__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___483   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___482 [@mlw:proxy_symbol] [@introduced] = (Main__B_3__t__aggregate_def.main__B_3__t__aggregate_def temp___483) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___483 True True True True)) then (
     (forall temp___484   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___482 temp___484) = temp___483))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__l as Main__l
 use        Locker__locker as Locker__locker
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Main__s as Main__s
 use        Main__sk as Main__sk
 use        Stack__stack_instance as Stack__stack_instance
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Main__d as Main__d
 use        Memorystore__database as Memorystore__database
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Main__B_1__pin_str as Main__B_1__pin_str
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Locker__init___axiom as Locker__init___axiom
 use        Stack__init___axiom as Stack__init___axiom
 use        Memorystore__init___axiom as Memorystore__init___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t as Main__B_3__t
 use        Main__B_3__numtokens as Main__B_3__numtokens
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_4__token1 as Main__B_3__B_4__token1
 use        Main__B_3__B_4__B_5__r as Main__B_3__B_4__B_5__r
 use        Main__result as Main__result
 use        Main__result___axiom as Main__result___axiom
 use        Calculator__result as Calculator__result
 use        Main__B_3__B_4__B_5__a as Main__B_3__B_4__B_5__a
 use        Main__B_3__B_4__B_5__b as Main__B_3__B_4__B_5__b
 use        Main__B_3__B_4__B_5__success as Main__B_3__B_4__B_5__success
 use        Stack__pop2___axiom as Stack__pop2___axiom
 use        Calculator__add___axiom as Calculator__add___axiom
 use        Stack__push___axiom as Stack__push___axiom
 use        Stack__push2___axiom as Stack__push2___axiom
 use        Main__B_3__B_4__B_6__r as Main__B_3__B_4__B_6__r
 use        Main__B_3__B_4__B_6__a as Main__B_3__B_4__B_6__a
 use        Main__B_3__B_4__B_6__b as Main__B_3__B_4__B_6__b
 use        Main__B_3__B_4__B_6__success as Main__B_3__B_4__B_6__success
 use        Calculator__sub___axiom as Calculator__sub___axiom
 use        Main__B_3__B_4__B_7__r as Main__B_3__B_4__B_7__r
 use        Main__B_3__B_4__B_7__a as Main__B_3__B_4__B_7__a
 use        Main__B_3__B_4__B_7__b as Main__B_3__B_4__B_7__b
 use        Main__B_3__B_4__B_7__success as Main__B_3__B_4__B_7__success
 use        Calculator__mul___axiom as Calculator__mul___axiom
 use        Main__B_3__B_4__B_8__r as Main__B_3__B_4__B_8__r
 use        Main__B_3__B_4__B_8__a as Main__B_3__B_4__B_8__a
 use        Main__B_3__B_4__B_8__b as Main__B_3__B_4__B_8__b
 use        Main__B_3__B_4__B_8__success as Main__B_3__B_4__B_8__success
 use        Calculator__div___axiom as Calculator__div___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Main__B_3__B_4__B_9__token2 as Main__B_3__B_4__B_9__token2
 use        Main__B_3__B_4__B_9__success as Main__B_3__B_4__B_9__success
 use        Main__B_3__B_4__B_10__token2 as Main__B_3__B_4__B_10__token2
 use        Main__B_3__B_4__B_10__token3 as Main__B_3__B_4__B_10__token3
 use        Main__B_3__B_4__B_10__success as Main__B_3__B_4__B_10__success
 use        Main__B_3__B_4__B_11__a as Main__B_3__B_4__B_11__a
 use        Main__B_3__B_4__B_11__success as Main__B_3__B_4__B_11__success
 use        Stack__pop___axiom as Stack__pop___axiom
 use        Main__B_3__B_4__B_12__token2 as Main__B_3__B_4__B_12__token2
 use        Main__B_3__B_4__B_12__a as Main__B_3__B_4__B_12__a
 use        Main__B_3__B_4__B_12__success as Main__B_3__B_4__B_12__success
 use        Lockmemory__get___axiom as Lockmemory__get___axiom
 use        Main__B_3__B_4__B_13__token2 as Main__B_3__B_4__B_13__token2
 use        Main__B_3__B_4__B_13__a as Main__B_3__B_4__B_13__a
 use        Main__B_3__B_4__B_13__success as Main__B_3__B_4__B_13__success
 use        Lockmemory__put___axiom as Lockmemory__put___axiom
 use        Main__B_3__B_4__B_14__token2 as Main__B_3__B_4__B_14__token2
 use        Lockmemory__remove___axiom as Lockmemory__remove___axiom
 use        Lockmemory__print___axiom as Lockmemory__print___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_4__B_15__token2 as Main__B_3__B_4__B_15__token2
 use        Locker__reset_pwd___axiom as Locker__reset_pwd___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__B_3__B_4__B_16__token2 as Main__B_3__B_4__B_16__token2
 use        Locker__try_unlock___axiom as Locker__try_unlock___axiom
 use        Calculator__int32 as Calculator__int32
 use        Calculator__int32__rep as Calculator__int32__rep
 use        Main__int32 as Main__int32
 use        Main__int32___axiom as Main__int32___axiom
 use        Memorystore__location_index as Memorystore__location_index
 use        Main__L_2 as Main__L_2
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Main__B_3__TTtSP1 as Main__B_3__TTtSP1
 use        Main__B_3__TtS___axiom as Main__B_3__TtS___axiom
 use        Temp___String_Literal_478 as Temp___String_Literal_478
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_479 as Temp___String_Literal_479
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_480 as Temp___String_Literal_480
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_481 as Temp___String_Literal_481
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__B_3__t__aggregate_def as Main__B_3__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_486 as Temp___String_Literal_486
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_489 as Temp___String_Literal_489
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_491 as Temp___String_Literal_491
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_493 as Temp___String_Literal_493
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_495 as Temp___String_Literal_495
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_496 as Temp___String_Literal_496
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_497 as Temp___String_Literal_497
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_506 as Temp___String_Literal_506
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_507 as Temp___String_Literal_507
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_510 as Temp___String_Literal_510
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_512 as Temp___String_Literal_512
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_514 as Temp___String_Literal_514
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_518 as Temp___String_Literal_518
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_520 as Temp___String_Literal_520
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_522 as Temp___String_Literal_522
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_524 as Temp___String_Literal_524
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_528 as Temp___String_Literal_528
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_530 as Temp___String_Literal_530
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_532 as Temp___String_Literal_532
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_534 as Temp___String_Literal_534
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_538 as Temp___String_Literal_538
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_540 as Temp___String_Literal_540
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_542 as Temp___String_Literal_542
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_546 as Temp___String_Literal_546
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_548 as Temp___String_Literal_548
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_550 as Temp___String_Literal_550
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_551 as Temp___String_Literal_551
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_552 as Temp___String_Literal_552
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_556 as Temp___String_Literal_556
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_558 as Temp___String_Literal_558
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_560 as Temp___String_Literal_560
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_561 as Temp___String_Literal_561
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_562 as Temp___String_Literal_562
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_563 as Temp___String_Literal_563
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_567 as Temp___String_Literal_567
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_569 as Temp___String_Literal_569
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_571 as Temp___String_Literal_571
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_572 as Temp___String_Literal_572
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_573 as Temp___String_Literal_573
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_578 as Temp___String_Literal_578
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_579 as Temp___String_Literal_579
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_583 as Temp___String_Literal_583
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_585 as Temp___String_Literal_585
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_587 as Temp___String_Literal_587
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_590 as Temp___String_Literal_590
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_591 as Temp___String_Literal_591
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_595 as Temp___String_Literal_595
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_597 as Temp___String_Literal_597
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_599 as Temp___String_Literal_599
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_600 as Temp___String_Literal_600
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_607 as Temp___String_Literal_607
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_608 as Temp___String_Literal_608
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_612 as Temp___String_Literal_612
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_614 as Temp___String_Literal_614
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_616 as Temp___String_Literal_616
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_619 as Temp___String_Literal_619
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_620 as Temp___String_Literal_620
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_624 as Temp___String_Literal_624
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_626 as Temp___String_Literal_626
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_628 as Temp___String_Literal_628
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_630 as Temp___String_Literal_630
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_631 as Temp___String_Literal_631
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_632 as Temp___String_Literal_632
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_641 as Temp___String_Literal_641
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_642 as Temp___String_Literal_642
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_645 as Temp___String_Literal_645
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_649 as Temp___String_Literal_649
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_651 as Temp___String_Literal_651
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_653 as Temp___String_Literal_653
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_655 as Temp___String_Literal_655
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_656 as Temp___String_Literal_656
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_657 as Temp___String_Literal_657
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_666 as Temp___String_Literal_666
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_667 as Temp___String_Literal_667
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_670 as Temp___String_Literal_670
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_674 as Temp___String_Literal_674
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_676 as Temp___String_Literal_676
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_678 as Temp___String_Literal_678
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_680 as Temp___String_Literal_680
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_681 as Temp___String_Literal_681
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_682 as Temp___String_Literal_682
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_691 as Temp___String_Literal_691
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_692 as Temp___String_Literal_692
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_695 as Temp___String_Literal_695
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_699 as Temp___String_Literal_699
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__int32___axiom as Main__int32___axiom
 use        Main__result___axiom as Main__result___axiom
 use        Main__l___axiom as Main__l___axiom
 use        Main__s___axiom as Main__s___axiom
 use        Main__sk___axiom as Main__sk___axiom
 use        Main__d___axiom as Main__d___axiom
 use        Main__B_1__pin_str___axiom as Main__B_1__pin_str___axiom
 use        Main__B_3__t___axiom as Main__B_3__t___axiom
 use        Main__B_3__t__aggregate_def___axiom as Main__B_3__t__aggregate_def___axiom
 use        Main__B_3__numtokens___axiom as Main__B_3__numtokens___axiom
 use        Main__B_3__B_4__token1___axiom as Main__B_3__B_4__token1___axiom
 use        Main__B_3__B_4__B_5__r___axiom as Main__B_3__B_4__B_5__r___axiom
 use        Main__B_3__B_4__B_5__a___axiom as Main__B_3__B_4__B_5__a___axiom
 use        Main__B_3__B_4__B_5__b___axiom as Main__B_3__B_4__B_5__b___axiom
 use        Main__B_3__B_4__B_5__success___axiom as Main__B_3__B_4__B_5__success___axiom
 use        Main__B_3__B_4__B_6__r___axiom as Main__B_3__B_4__B_6__r___axiom
 use        Main__B_3__B_4__B_6__a___axiom as Main__B_3__B_4__B_6__a___axiom
 use        Main__B_3__B_4__B_6__b___axiom as Main__B_3__B_4__B_6__b___axiom
 use        Main__B_3__B_4__B_6__success___axiom as Main__B_3__B_4__B_6__success___axiom
 use        Main__B_3__B_4__B_7__r___axiom as Main__B_3__B_4__B_7__r___axiom
 use        Main__B_3__B_4__B_7__a___axiom as Main__B_3__B_4__B_7__a___axiom
 use        Main__B_3__B_4__B_7__b___axiom as Main__B_3__B_4__B_7__b___axiom
 use        Main__B_3__B_4__B_7__success___axiom as Main__B_3__B_4__B_7__success___axiom
 use        Main__B_3__B_4__B_8__r___axiom as Main__B_3__B_4__B_8__r___axiom
 use        Main__B_3__B_4__B_8__a___axiom as Main__B_3__B_4__B_8__a___axiom
 use        Main__B_3__B_4__B_8__b___axiom as Main__B_3__B_4__B_8__b___axiom
 use        Main__B_3__B_4__B_8__success___axiom as Main__B_3__B_4__B_8__success___axiom
 use        Main__B_3__B_4__B_9__token2___axiom as Main__B_3__B_4__B_9__token2___axiom
 use        Main__B_3__B_4__B_9__success___axiom as Main__B_3__B_4__B_9__success___axiom
 use        Main__B_3__B_4__B_10__token2___axiom as Main__B_3__B_4__B_10__token2___axiom
 use        Main__B_3__B_4__B_10__token3___axiom as Main__B_3__B_4__B_10__token3___axiom
 use        Main__B_3__B_4__B_10__success___axiom as Main__B_3__B_4__B_10__success___axiom
 use        Main__B_3__B_4__B_11__a___axiom as Main__B_3__B_4__B_11__a___axiom
 use        Main__B_3__B_4__B_11__success___axiom as Main__B_3__B_4__B_11__success___axiom
 use        Main__B_3__B_4__B_12__token2___axiom as Main__B_3__B_4__B_12__token2___axiom
 use        Main__B_3__B_4__B_12__a___axiom as Main__B_3__B_4__B_12__a___axiom
 use        Main__B_3__B_4__B_12__success___axiom as Main__B_3__B_4__B_12__success___axiom
 use        Main__B_3__B_4__B_13__token2___axiom as Main__B_3__B_4__B_13__token2___axiom
 use        Main__B_3__B_4__B_13__a___axiom as Main__B_3__B_4__B_13__a___axiom
 use        Main__B_3__B_4__B_13__success___axiom as Main__B_3__B_4__B_13__success___axiom
 use        Main__B_3__B_4__B_14__token2___axiom as Main__B_3__B_4__B_14__token2___axiom
 use        Main__B_3__B_4__B_15__token2___axiom as Main__B_3__B_4__B_15__token2___axiom
 use        Main__B_3__B_4__B_16__token2___axiom as Main__B_3__B_4__B_16__token2___axiom
 use        Main__L_2___axiom as Main__L_2___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Stringtointeger__from_string___axiom as Stringtointeger__from_string___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Memorystore__location_index___axiom as Memorystore__location_index___axiom
 use        Memorystore__int32___axiom as Memorystore__int32___axiom
 use        Memorystore__init___axiom as Memorystore__init___axiom
 use        Memorystore__cell_opt___axiom as Memorystore__cell_opt___axiom
 use        Memorystore__mem_array___axiom as Memorystore__mem_array___axiom
 use        Memorystore__database___axiom as Memorystore__database___axiom
 use        Calculator__int32___axiom as Calculator__int32___axiom
 use        Calculator__result___axiom as Calculator__result___axiom
 use        Calculator__add___axiom as Calculator__add___axiom
 use        Calculator__sub___axiom as Calculator__sub___axiom
 use        Calculator__mul___axiom as Calculator__mul___axiom
 use        Calculator__div___axiom as Calculator__div___axiom
 use        Locker__init___axiom as Locker__init___axiom
 use        Locker__try_unlock___axiom as Locker__try_unlock___axiom
 use        Locker__reset_pwd___axiom as Locker__reset_pwd___axiom
 use        Locker__is_locked___axiom as Locker__is_locked___axiom
 use        Locker__locker___axiom as Locker__locker___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Stack__int32___axiom as Stack__int32___axiom
 use        Stack__stack_array___axiom as Stack__stack_array___axiom
 use        Stack__init___axiom as Stack__init___axiom
 use        Stack__push___axiom as Stack__push___axiom
 use        Stack__push2___axiom as Stack__push2___axiom
 use        Stack__pop___axiom as Stack__pop___axiom
 use        Stack__pop2___axiom as Stack__pop2___axiom
 use        Stack__stack_instance___axiom as Stack__stack_instance___axiom
 use        Lockmemory__get___axiom as Lockmemory__get___axiom
 use        Lockmemory__put___axiom as Lockmemory__put___axiom
 use        Lockmemory__remove___axiom as Lockmemory__remove___axiom
 use        Lockmemory__print___axiom as Lockmemory__print___axiom
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__B_3__TtS___axiom as Main__B_3__TtS___axiom
 use        Main__B_3__TTtSP1___axiom as Main__B_3__TTtSP1___axiom

 exception Temp___exception_487
 
 exception Temp___exception_490
 
 exception Temp___exception_492
 
 exception Temp___exception_513
 
 exception Temp___exception_519
 
 exception Temp___exception_521
 
 exception Temp___exception_529
 
 exception Temp___exception_531
 
 exception Temp___exception_539
 
 exception Temp___exception_541
 
 exception Temp___exception_547
 
 exception Temp___exception_549
 
 exception Temp___exception_557
 
 exception Temp___exception_559
 
 exception Temp___exception_568
 
 exception Temp___exception_570
 
 exception Temp___exception_584
 
 exception Temp___exception_586
 
 exception Temp___exception_596
 
 exception Temp___exception_598
 
 exception Temp___exception_613
 
 exception Temp___exception_615
 
 exception Temp___exception_625
 
 exception Temp___exception_627
 
 exception Temp___exception_650
 
 exception Temp___exception_652
 
 exception Temp___exception_675
 
 exception Temp___exception_677
 
 let def [#"main.adb" 21 0 0][@GP_Subp:main.adb:21] 
   (__void_param : unit)
  requires { [#"main.adb" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:21 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:21 *)
  ;
  [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:21 *)
  ;
  [#"main.adb" 21 0 0] try
   ( ();
   ([#"main.adb" 22 0 0] ());
   ([#"mystring.adb" 18 0 0] ());
   ([#"main.adb" 22 0 0] ());
   ([#"main.adb" 24 0 0] ());
   ([#"main.adb" 25 0 0] ());
   ([#"main.adb" 27 0 0] ( [#"main.adb" 27 0 0] begin ensures {true} let _ = (let _ = (let temp___470 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 27 0 0] (val _f : Locker__locker.locker
   ensures {[#"main.adb" 27 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] (Locker__locker___axiom.default_initial_assumption { Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content } False) };
   [#"main.adb" 27 0 0] assume { [#"main.adb" 27 0 0] (Locker__locker___axiom.dynamic_invariant { Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content } False False True True) } ));
   ([#"main.adb" 28 0 0] ( [#"main.adb" 28 0 0] begin ensures {true} let _ = (let _ = (let temp___472 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 28 0 0] (val _f : Main__lines__mystring.mystring
   ensures {[#"main.adb" 28 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 28 0 0] assume { [#"main.adb" 28 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 28 0 0] assume { [#"main.adb" 28 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 29 0 0] ( [#"main.adb" 29 0 0] begin ensures {true} let _ = (let _ = (let temp___474 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 29 0 0] (val _f : Stack__stack_instance.stack_instance
   ensures {[#"main.adb" 29 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 29 0 0] assume { [#"main.adb" 29 0 0] (Stack__stack_instance___axiom.default_initial_assumption { Stack__stack_instance.__split_fields = Main__sk.sk__split_fields.Stack__stack_instance.__split_fields__content } False) };
   [#"main.adb" 29 0 0] assume { [#"main.adb" 29 0 0] (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = Main__sk.sk__split_fields.Stack__stack_instance.__split_fields__content } False False True True) } ));
   ([#"main.adb" 30 0 0] ( [#"main.adb" 30 0 0] begin ensures {true} let _ = (let _ = (let temp___476 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 30 0 0] (val _f : Memorystore__database.database
   ensures {[#"main.adb" 30 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 30 0 0] assume { [#"main.adb" 30 0 0] (Memorystore__database___axiom.default_initial_assumption { Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content } False) };
   [#"main.adb" 30 0 0] assume { [#"main.adb" 30 0 0] (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content } False False True True) } ));
   ([#"main.adb" 39 0 0] ());
   ([#"main.adb" 53 0 0] ());
   ([#"main.adb" 61 0 0] ());
   ([#"main.adb" 450 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:34:20] ([#"main.adb" 34 0 0] ()) );
   ( [@GP_Sloc:main.adb:34:4] ([#"main.adb" 34 0 0] (if (( ([#"main.adb" 34 0 0] [#"main.adb" 34 0 0] (([@branch_id=2435] Main.spark__branch).bool__content <- ( ((Mycommandline__argument_count___axiom.argument_count(())) <> (1 : int)) )));
   ( [@branch_id=2435] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:35:6] ([#"main.adb" 35 0 0] ()) );
    ( [@GP_Sloc:main.adb:35:6] ([#"main.adb" 35 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_478.temp___String_Literal_478(()))) ((1 : int)) ((37 : int))))) )) );
    ( [@GP_Sloc:main.adb:36:6] ([#"main.adb" 36 0 0] [#"main.adb" 36 0 0] raise Return__exc) ) )) else (
    ()))) );
   ( [@GP_Sloc:main.adb:39:4] ([#"main.adb" 39 0 0] ( ();
   ([#"main.adb" 40 0 0] ());
   ([#"main.adb" 40 0 0] ( (let main__B_1__pin_str__assume = ([#"main.adb" 40 0 0] ( [@comment:      PIN_Str : constant String := MyCommandLine.Argument(1);                                                 ^ main.adb:40:49:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:40:49] [@vc:annotation] [@GP_Shape:B_1_declblk__pin_str_decl__call_argument] [@GP_Id:1] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     assume {  (main__B_1__pin_str__assume = Main__B_1__pin_str.pin_str) }))
   ;
    assume {  (Standard__string___axiom.dynamic_invariant Main__B_1__pin_str.pin_str True False True True) } ));
   ();
   ( [@GP_Sloc:main.adb:42:7] ([#"main.adb" 42 0 0] (if (( ([#"main.adb" 42 0 0] [#"main.adb" 42 0 0] (([@branch_id=2463] Main.spark__branch).bool__content <- ( ( (( [#"main.adb" 42 0 0] begin ensures {true} let _ = (let _ = Main__B_1__pin_str.pin_str in (
    ()))
    in () end ;
   (Standard__string.length(Main__B_1__pin_str.pin_str)) ) <> (4 : int)) || ( (let i = [#"main.adb" 42 0 0] (val _f : int
   in _f) in (
    (if ((Boolean.andb((( [#"main.adb" 42 0 0] begin ensures {true} let _ = (let _ = Main__B_1__pin_str.pin_str in (
     ()))
     in () end ;
    (Standard__string.first(Main__B_1__pin_str.pin_str)) ) <= i)) ((i <= ( [#"main.adb" 42 0 0] begin ensures {true} let _ = (let _ = Main__B_1__pin_str.pin_str in (
     ()))
     in () end ;
    (Standard__string.last(Main__B_1__pin_str.pin_str)) ))))) then (
     [#"main.adb" 42 0 0] begin ensures {true} let _ = (let _ = not ( (Boolean.andb(((48 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__B_1__pin_str.pin_str))) (( [#"main.adb" 42 0 0] assert { [#"main.adb" 42 0 0] ([#"main.adb" 43 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:43:49] [@GP_Shape:B_1_declblk__if__orelse__forsome__in__ixdcomp] [@comment:        (for some I in PIN_Str'Range => PIN_Str(I) not in '0' .. '9') then                                                 ^ main.adb:43:49:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:0] ( ((Standard__string.first Main__B_1__pin_str.pin_str) <= i) /\ (i <= (Standard__string.last Main__B_1__pin_str.pin_str)) ) )) };
     i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__B_1__pin_str.pin_str))) ((  assert {  ([#"main.adb" 43 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:43:49] [@GP_Shape:B_1_declblk__if__orelse__forsome__in__ixdcomp] [@comment:        (for some I in PIN_Str'Range => PIN_Str(I) not in '0' .. '9') then                                                 ^ main.adb:43:49:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:0] ( ((Standard__string.first Main__B_1__pin_str.pin_str) <= i) /\ (i <= (Standard__string.last Main__B_1__pin_str.pin_str)) ) )) };
     i ))))) <= (57 : int)))) ) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( ((Standard__string.first Main__B_1__pin_str.pin_str) <= i) /\ (i <= (Standard__string.last Main__B_1__pin_str.pin_str)) ) /\ ((Boolean.notb (Boolean.andb ((48 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__B_1__pin_str.pin_str) i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Main__B_1__pin_str.pin_str) i)) <= (57 : int)))) = True) )) )} 
   in _f) ) ) )));
   ( [@branch_id=2463] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:44:10] ([#"main.adb" 44 0 0] ()) );
    ( [@GP_Sloc:main.adb:44:10] ([#"main.adb" 44 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_479.temp___String_Literal_479(()))) ((1 : int)) ((37 : int))))) )) );
    ( [@GP_Sloc:main.adb:45:10] ([#"main.adb" 45 0 0] [#"main.adb" 45 0 0] raise Return__exc) ) )) else (
    ()))) ) )) );
   ( [@GP_Sloc:main.adb:49:16] ([#"main.adb" 49 0 0] ()) );
   ( [@GP_Sloc:main.adb:49:47] ([#"main.adb" 49 0 0] ()) );
   ( [@GP_Sloc:main.adb:49:21] ([#"main.adb" 49 0 0] ()) );
   ( [@GP_Sloc:main.adb:49:10] ([#"main.adb" 49 0 0] ()) );
   ( [@GP_Sloc:main.adb:49:10] ([#"main.adb" 49 0 0] ( (Locker__init___axiom.init(Main__l.l__split_fields) (([#"main.adb" 49 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:49:21] [@comment:   Locker.Init(L,PIN.From_String(MyCommandLine.Argument(1)));                     ^ main.adb:49:21:VC_PRECONDITION] [@GP_Shape:call_init__call_from_string] [@GP_Id:3] (Pin__from_string___axiom.from_string(([#"main.adb" 49 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:   Locker.Init(L,PIN.From_String(MyCommandLine.Argument(1)));                                               ^ main.adb:49:47:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:call_init__call_from_string__call_argument] [@GP_Id:2] [@GP_Sloc:main.adb:49:47] (Mycommandline__argument___axiom.argument((1 : int))) )))) )))) )) );
   ( [@GP_Sloc:main.adb:50:15] ([#"main.adb" 50 0 0] ()) );
   ( [@GP_Sloc:main.adb:50:9] ([#"main.adb" 50 0 0] ()) );
   ( [@GP_Sloc:main.adb:50:9] ([#"main.adb" 50 0 0] ( (Stack__init___axiom.init(Main__sk.sk__split_fields)) )) );
   ( [@GP_Sloc:main.adb:51:21] ([#"main.adb" 51 0 0] ()) );
   ( [@GP_Sloc:main.adb:51:15] ([#"main.adb" 51 0 0] ()) );
   ( [@GP_Sloc:main.adb:51:15] ([#"main.adb" 51 0 0] ( (Memorystore__init___axiom.init(Main__d.d__split_fields)) )) );
   ( [@GP_Sloc:main.adb:53:4] ([#"main.adb" 53 0 0] ( () (* Translation of an Ada loop from main.adb:53 *)
   ;
   (if (True) then (
    [#"main.adb" 53 0 0] try
     [#"main.adb" 53 0 0] try
      ( [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = { Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___706 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 53 0 0] (val _f : Memorystore__database.database
      ensures {[#"main.adb" 53 0 0] (result = { Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content })} 
      in _f) in (
       ( [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_instance.__split_fields = Main__sk.sk__split_fields.Stack__stack_instance.__split_fields__content } in (
        ()))
        in () end ;
       (let temp___705 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 53 0 0] (val _f : Stack__stack_instance.stack_instance
       ensures {[#"main.adb" 53 0 0] (result = { Stack__stack_instance.__split_fields = Main__sk.sk__split_fields.Stack__stack_instance.__split_fields__content })} 
       in _f) in (
        ( [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___704 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 53 0 0] (val _f : Main__lines__mystring.mystring
        ensures {[#"main.adb" 53 0 0] (result = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })} 
        in _f) in (
         ( [#"main.adb" 53 0 0] begin ensures {true} let _ = (let _ = { Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content } in (
          ()))
          in () end ;
         (let temp___703 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 53 0 0] (val _f : Locker__locker.locker
         ensures {[#"main.adb" 53 0 0] (result = { Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })} 
         in _f) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:53 *)
          ;
          () (* While loop translating the Ada loop from main.adb:53 *)
          ;
          [#"main.adb" 53 0 0] while True do
           ( () (* Assume implicit invariants from the loop main.adb:53 *)
           ;
           [#"main.adb" 53 0 0] assume { [#"main.adb" 53 0 0] ( ( ( ( ( ( ( ( true /\ (Locker__locker___axiom.dynamic_invariant { Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content } False True True True) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ (Stack__stack_instance___axiom.dynamic_invariant { Stack__stack_instance.__split_fields = Main__sk.sk__split_fields.Stack__stack_instance.__split_fields__content } False True True True) )/\true ) /\ (Memorystore__database___axiom.dynamic_invariant { Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content } False True True True) )/\true ) };
           () (* Check for absence of RTE in the invariant of loop main.adb:53 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop main.adb:53 *)
           ;
           ();
           ( [@GP_Sloc:main.adb:54:27] ([#"main.adb" 54 0 0] ()) );
           ( [@GP_Sloc:main.adb:54:16] ([#"main.adb" 54 0 0] ()) );
           ( [@GP_Sloc:main.adb:54:7] ([#"main.adb" 54 0 0] (if (( ([#"main.adb" 54 0 0] [#"main.adb" 54 0 0] (([@branch_id=2519] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
           ( [@branch_id=2519] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:main.adb:55:10] ([#"main.adb" 55 0 0] ()) );
            ( [@GP_Sloc:main.adb:55:10] ([#"main.adb" 55 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_480.temp___String_Literal_480(()))) ((1 : int)) ((8 : int))))) )) ) )) else (
            ( ();
            ( [@GP_Sloc:main.adb:57:10] ([#"main.adb" 57 0 0] ()) );
            ( [@GP_Sloc:main.adb:57:10] ([#"main.adb" 57 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_481.temp___String_Literal_481(()))) ((1 : int)) ((10 : int))))) )) ) )))) );
           ( [@GP_Sloc:main.adb:60:22] ([#"main.adb" 60 0 0] ()) );
           ( [@GP_Sloc:main.adb:60:12] ([#"main.adb" 60 0 0] ()) );
           ( [@GP_Sloc:main.adb:60:12] ([#"main.adb" 60 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) );
           ( [@GP_Sloc:main.adb:62:10] ([#"main.adb" 62 0 0] ([#"main.adb" 62 0 0] ())) );
           ( [@GP_Sloc:main.adb:62:10] ([#"main.adb" 62 0 0] ([#"main.adb" 62 0 0] ( [#"main.adb" 62 0 0] (Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__B_3__t__aggregate_def.main__B_3__t__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
           [#"main.adb" 62 0 0] assume { [#"main.adb" 62 0 0] (Main__B_3__TtS___axiom.dynamic_invariant Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ))) );
           ( [@GP_Sloc:main.adb:63:10] ([#"main.adb" 63 0 0] ([#"main.adb" 63 0 0] ( [#"main.adb" 63 0 0] assume { [#"main.adb" 63 0 0] (Standard__natural___axiom.default_initial_assumption Main__B_3__numtokens.numtokens.int__content False) };
           [#"main.adb" 63 0 0] assume { [#"main.adb" 63 0 0] (Standard__natural___axiom.dynamic_invariant Main__B_3__numtokens.numtokens.int__content False False True True) } ))) );
           ( [@GP_Sloc:main.adb:72:10] ([#"main.adb" 72 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:53] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:42] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:56] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:58] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:27] ([#"main.adb" 65 0 0] ()) );
           ( [@GP_Sloc:main.adb:65:27] ([#"main.adb" 65 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
            [#"main.adb" 65 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
             ( ([#"main.adb" 65 0 0] ( [@GP_Sloc:main.adb:65:27] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__call_tokenise] [@vc:annotation] [@comment:         MyStringTokeniser.Tokenise(Lines.To_String(S),T,NumTokens);                           ^ main.adb:65:27:VC_PRECONDITION] [@GP_Id:4] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__B_3__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__B_3__TTtSP1.last))) (Main__B_3__numtokens.numtokens)) ));
              (Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___485 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__B_3__TTtSP1.first) (Main__B_3__TTtSP1.last)) in (
              (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___485) (Mystringtokeniser__tokenarray.first temp___485) Main__B_3__TTtSP1.first)))
              )) )))
           ) );
           ( [@GP_Sloc:main.adb:67:13] ([#"main.adb" 67 0 0] ()) );
           ( [@GP_Sloc:main.adb:67:30] ([#"main.adb" 67 0 0] ()) );
           ( [@GP_Sloc:main.adb:67:10] ([#"main.adb" 67 0 0] (if (( ([#"main.adb" 67 0 0] [#"main.adb" 67 0 0] (([@branch_id=2586] Main.spark__branch).bool__content <- ( (Boolean.orb((Main__B_3__numtokens.numtokens.int__content > (3 : int))) ((Main__B_3__numtokens.numtokens.int__content < (1 : int)))) )));
           ( [@branch_id=2586] Main.spark__branch ).bool__content )) then (
             raise Temp___exception_487) else (
            ()))) );
           ( [@GP_Sloc:main.adb:73:63] ([#"main.adb" 73 0 0] ()) );
           ( [@GP_Sloc:main.adb:73:52] ([#"main.adb" 73 0 0] ()) );
           ( [@GP_Sloc:main.adb:73:36] ([#"main.adb" 73 0 0] ()) );
           ( [@GP_Sloc:main.adb:73:13] ([#"main.adb" 73 0 0] ([#"main.adb" 73 0 0] ( (let main__B_3__B_4__token1__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 73 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:73:52] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__token1_decl__call_to_string__call_substring] [@comment:            Token1: String := Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1));                                                    ^ main.adb:73:52:VC_PRECONDITION] [@GP_Id:7] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 73 0 0] ( [@comment:            Token1: String := Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1));                                                                                                  ^ main.adb:73:98:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:73:98] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__token1_decl__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:6] (Standard__positive.range_check_((([#"main.adb" 73 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:73:86] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__token1_decl__call_to_string__call_substring__sub__add] [@comment:            Token1: String := Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1));                                                                                      ^ main.adb:73:86:VC_OVERFLOW_CHECK] [@GP_Id:5] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
            (  (Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_4__token1__assume)) ));
             assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first)) = (Standard__string.first(main__B_3__B_4__token1__assume))) };
             assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last)) = (Standard__string.last(main__B_3__B_4__token1__assume))) } )))
           ;
            assume {  (if (False) then (
            true) else (
            (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_4__token1.token1__first) (Standard__integer__rep.to_rep Main__B_3__B_4__token1.token1__last)))) } ))) );
           ( [@GP_Sloc:main.adb:87:16] ([#"main.adb" 87 0 0] ()) );
           ( [@GP_Sloc:main.adb:124:16] ([#"main.adb" 124 0 0] ()) );
           ( [@GP_Sloc:main.adb:161:16] ([#"main.adb" 161 0 0] ()) );
           ( [@GP_Sloc:main.adb:198:16] ([#"main.adb" 198 0 0] ()) );
           ( [@GP_Sloc:main.adb:235:16] ([#"main.adb" 235 0 0] ()) );
           ( [@GP_Sloc:main.adb:259:16] ([#"main.adb" 259 0 0] ()) );
           ( [@GP_Sloc:main.adb:285:16] ([#"main.adb" 285 0 0] ()) );
           ( [@GP_Sloc:main.adb:309:16] ([#"main.adb" 309 0 0] ()) );
           ( [@GP_Sloc:main.adb:339:16] ([#"main.adb" 339 0 0] ()) );
           ( [@GP_Sloc:main.adb:369:16] ([#"main.adb" 369 0 0] ()) );
           ( [@GP_Sloc:main.adb:405:16] ([#"main.adb" 405 0 0] ()) );
           ( [@GP_Sloc:main.adb:428:16] ([#"main.adb" 428 0 0] ()) );
           ( [@GP_Sloc:main.adb:76:16] ([#"main.adb" 76 0 0] ()) );
           ( [@GP_Sloc:main.adb:76:13] ([#"main.adb" 76 0 0] (if (( ([#"main.adb" 76 0 0] [#"main.adb" 76 0 0] (([@branch_id=2638] Main.spark__branch).bool__content <- ( (let temp___702 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_699.temp___String_Literal_699(())) in (
            (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___702) ((1 : int)) ((1 : int)))))
            )));
           ( [@branch_id=2638] Main.spark__branch ).bool__content )) then (
            ( ();
            ( [@GP_Sloc:main.adb:77:37] ([#"main.adb" 77 0 0] ()) );
            ( [@GP_Sloc:main.adb:77:26] ([#"main.adb" 77 0 0] ()) );
            ( [@GP_Sloc:main.adb:77:16] ([#"main.adb" 77 0 0] (if (( ([#"main.adb" 77 0 0] [#"main.adb" 77 0 0] (([@branch_id=2642] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
            ( [@branch_id=2642] Main.spark__branch ).bool__content )) then (
              raise Temp___exception_490) else (
             ()))) );
            ( [@GP_Sloc:main.adb:82:19] ([#"main.adb" 82 0 0] ()) );
            ( [@GP_Sloc:main.adb:82:16] ([#"main.adb" 82 0 0] (if (( ([#"main.adb" 82 0 0] [#"main.adb" 82 0 0] (([@branch_id=2652] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
            ( [@branch_id=2652] Main.spark__branch ).bool__content )) then (
              raise Temp___exception_492) else (
             ()))) );
            ( [@GP_Sloc:main.adb:87:16] ([#"main.adb" 87 0 0] ( ();
            ([#"main.adb" 88 0 0] ( [#"main.adb" 88 0 0] begin ensures {true} let _ = (let _ = (let temp___508 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 88 0 0] (val _f : Main__result.result__
            ensures {[#"main.adb" 88 0 0] true} 
            in _f) in (
             ( () )))
             in (
             ()))
             in () end ;
            [#"main.adb" 88 0 0] assume { [#"main.adb" 88 0 0] (Main__result___axiom.default_initial_assumption { Main__result.__split_fields = Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content } False) };
            [#"main.adb" 88 0 0] assume { [#"main.adb" 88 0 0] (Main__result___axiom.dynamic_invariant { Main__result.__split_fields = Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content } False False True True) } ));
            ([#"main.adb" 89 0 0] ( [#"main.adb" 89 0 0] assume { [#"main.adb" 89 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_5__a.a.int__content False) };
            [#"main.adb" 89 0 0] assume { [#"main.adb" 89 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_5__a.a.int__content False False True True) } ));
            ([#"main.adb" 89 0 0] ( [#"main.adb" 89 0 0] assume { [#"main.adb" 89 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_5__b.b.int__content False) };
            [#"main.adb" 89 0 0] assume { [#"main.adb" 89 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_5__b.b.int__content False False True True) } ));
            ([#"main.adb" 90 0 0] [#"main.adb" 90 0 0] (Main__B_3__B_4__B_5__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
            ();
            ( [@GP_Sloc:main.adb:92:30] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:32] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:35] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:37] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:39] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:24] ([#"main.adb" 92 0 0] ()) );
            ( [@GP_Sloc:main.adb:92:24] ([#"main.adb" 92 0 0] [#"main.adb" 92 0 0] let stack__pop2__b = { int__content = Main__B_3__B_4__B_5__b.b.int__content } in 
            [#"main.adb" 92 0 0] let stack__pop2__a = { int__content = Main__B_3__B_4__B_5__a.a.int__content } in 
             ( ([#"main.adb" 92 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__call_pop2] [@GP_Sloc:main.adb:92:24] [@GP_Id:8] [@comment:                  Stack.Pop2(L,Sk,A,B,Success);                        ^ main.adb:92:24:VC_PRECONDITION] (Stack__pop2___axiom.pop2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop2__a) (stack__pop2__b) (Main__B_3__B_4__B_5__success.success)) ));
              (Main__B_3__B_4__B_5__a.a.int__content <- ( stack__pop2__a.int__content ));
              (Main__B_3__B_4__B_5__b.b.int__content <- ( stack__pop2__b.int__content )) )) );
            ( [@GP_Sloc:main.adb:93:26] ([#"main.adb" 93 0 0] ()) );
            ( [@GP_Sloc:main.adb:93:19] ([#"main.adb" 93 0 0] (if (( ([#"main.adb" 93 0 0] [#"main.adb" 93 0 0] (([@branch_id=2711] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_5__success.success.bool__content ) )));
            ( [@branch_id=2711] Main.spark__branch ).bool__content )) then (
             ( ();
             ( [@GP_Sloc:main.adb:94:22] ([#"main.adb" 94 0 0] ()) );
             ( [@GP_Sloc:main.adb:94:22] ([#"main.adb" 94 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_493.temp___String_Literal_493(()))) ((1 : int)) ((24 : int))))) )) ) )) else (
             ( ();
             ( [@GP_Sloc:main.adb:96:22] ([#"main.adb" 96 0 0] ()) );
             ( [@GP_Sloc:main.adb:96:41] ([#"main.adb" 96 0 0] ()) );
             ( [@GP_Sloc:main.adb:96:43] ([#"main.adb" 96 0 0] ()) );
             ( [@GP_Sloc:main.adb:96:45] ([#"main.adb" 96 0 0] ()) );
             ( [@GP_Sloc:main.adb:96:36] ([#"main.adb" 96 0 0] ()) );
             ( [@GP_Sloc:main.adb:96:23] ([#"main.adb" 96 0 0] (let temp___494 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 96 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:96:36] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__r_assign__call_add] [@comment:                     R:= Calculator.Add(L,A,B);                                    ^ main.adb:96:36:VC_PRECONDITION] [@GP_Id:9] (Calculator__add___axiom.add({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__B_3__B_4__B_5__a.a.int__content) (Main__B_3__B_4__B_5__b.b.int__content)) )) in (
               (Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content <- ( temp___494.Main__result.__split_fields ))))
             ) );
             ( [@GP_Sloc:main.adb:97:25] ([#"main.adb" 97 0 0] ()) );
             ( [@GP_Sloc:main.adb:97:22] ([#"main.adb" 97 0 0] (if (( ([#"main.adb" 97 0 0] [#"main.adb" 97 0 0] (([@branch_id=2726] Main.spark__branch).bool__content <- ( { Main__result.__split_fields = Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__success )));
             ( [@branch_id=2726] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:main.adb:98:36] ([#"main.adb" 98 0 0] ()) );
              ( [@GP_Sloc:main.adb:98:38] ([#"main.adb" 98 0 0] ()) );
              ( [@GP_Sloc:main.adb:98:56] ([#"main.adb" 98 0 0] ()) );
              ( [@GP_Sloc:main.adb:98:30] ([#"main.adb" 98 0 0] ()) );
              ( [@GP_Sloc:main.adb:98:30] ([#"main.adb" 98 0 0] ( ([#"main.adb" 98 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_push] [@GP_Id:10] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                        Stack.Push(L,Sk,Int32(R.Value),Success);                              ^ main.adb:98:30:VC_PRECONDITION] [@GP_Sloc:main.adb:98:30] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) ((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))) (Main__B_3__B_4__B_5__success.success)) )) )) );
              ( [@GP_Sloc:main.adb:99:32] ([#"main.adb" 99 0 0] ()) );
              ( [@GP_Sloc:main.adb:99:25] ([#"main.adb" 99 0 0] (if (( ([#"main.adb" 99 0 0] [#"main.adb" 99 0 0] (([@branch_id=2742] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_5__success.success.bool__content ) )));
              ( [@branch_id=2742] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:100:28] ([#"main.adb" 100 0 0] ()) );
               ( [@GP_Sloc:main.adb:100:28] ([#"main.adb" 100 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_495.temp___String_Literal_495(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
               ()))) );
              ( [@GP_Sloc:main.adb:102:25] ([#"main.adb" 102 0 0] ()) );
              ( [@GP_Sloc:main.adb:102:25] ([#"main.adb" 102 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___505 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_5__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))))) ((12 : int))) in (
              (let temp___504 [@mlw:proxy_symbol] [@introduced] = (let temp___503 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_496.temp___String_Literal_496(())) in (
              (let temp___502 [@mlw:proxy_symbol] [@introduced] = (let temp___501 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_5__b.b.int__content))) ((12 : int))) in (
              (let temp___500 [@mlw:proxy_symbol] [@introduced] = (let temp___499 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_497.temp___String_Literal_497(())) in (
              (let temp___498 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_5__a.a.int__content))) ((12 : int))) in (
               (if (((Standard__string.length(temp___498)) = (0 : int))) then (
                (Standard__string.of_array(temp___499) ((1 : int)) ((3 : int)))) else (
                (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___498))) ((Standard__string.first(temp___498))) ((Standard__string.last(temp___498))) (temp___499) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___498))) (([#"main.adb" 102 0 0] ( [@GP_Id:11] [@vc:annotation] [@GP_Sloc:main.adb:102:49] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        Put_Line(Int32'Image(A) & " + " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                 ^ main.adb:102:49:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_put_line__2__concat__concat__concat__concat] (Standard__positive.range_check_((((Standard__string.first(temp___498)) + ((Integer.length((Standard__string.first(temp___498))) ((Standard__string.last(temp___498)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
              ))
               in (
               (if (((Standard__string.length(temp___500)) = (0 : int))) then (
                (Standard__string.of_array((Standard__string.to_array(temp___501))) ((Standard__string.first(temp___501))) ((Standard__string.last(temp___501))))) else (
                (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___500))) ((Standard__string.first(temp___500))) ((Standard__string.last(temp___500))) ((Standard__string.to_array(temp___501))) ((Standard__string.first(temp___501))) ((Standard__string.last(temp___501))))) ((Standard__string.first(temp___500))) (([#"main.adb" 102 0 0] ( [@GP_Sloc:main.adb:102:57] [@GP_Id:12] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_put_line__2__concat__concat__concat] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        Put_Line(Int32'Image(A) & " + " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                         ^ main.adb:102:57:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___500)) + ((Integer.length((Standard__string.first(temp___500))) ((Standard__string.last(temp___500)))) + (Integer.length((Standard__string.first(temp___501))) ((Standard__string.last(temp___501)))))) - (1 : int)))) ))))))))
              ))
               in (
               (if (((Standard__string.length(temp___502)) = (0 : int))) then (
                (Standard__string.of_array(temp___503) ((1 : int)) ((3 : int)))) else (
                (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___502))) ((Standard__string.first(temp___502))) ((Standard__string.last(temp___502))) (temp___503) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___502))) (([#"main.adb" 102 0 0] ( [@GP_Id:13] [@vc:annotation] [@comment:                        Put_Line(Int32'Image(A) & " + " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                          ^ main.adb:102:74:VC_RANGE_CHECK] [@GP_Sloc:main.adb:102:74] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_put_line__2__concat__concat] (Standard__positive.range_check_((((Standard__string.first(temp___502)) + ((Integer.length((Standard__string.first(temp___502))) ((Standard__string.last(temp___502)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
              ))
               in (
               (if (((Standard__string.length(temp___504)) = (0 : int))) then (
                (Standard__string.of_array((Standard__string.to_array(temp___505))) ((Standard__string.first(temp___505))) ((Standard__string.last(temp___505))))) else (
                (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___504))) ((Standard__string.first(temp___504))) ((Standard__string.last(temp___504))) ((Standard__string.to_array(temp___505))) ((Standard__string.first(temp___505))) ((Standard__string.last(temp___505))))) ((Standard__string.first(temp___504))) (([#"main.adb" 102 0 0] ( [@GP_Sloc:main.adb:102:82] [@GP_Id:14] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_put_line__2__concat] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        Put_Line(Int32'Image(A) & " + " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                                  ^ main.adb:102:82:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___504)) + ((Integer.length((Standard__string.first(temp___504))) ((Standard__string.last(temp___504)))) + (Integer.length((Standard__string.first(temp___505))) ((Standard__string.last(temp___505)))))) - (1 : int)))) ))))))))
              ))
              )) )) ) )) else (
              ( ();
              ( [@GP_Sloc:main.adb:104:25] ([#"main.adb" 104 0 0] ()) );
              ( [@GP_Sloc:main.adb:104:25] ([#"main.adb" 104 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_506.temp___String_Literal_506(()))) ((1 : int)) ((31 : int))))) )) );
              ( [@GP_Sloc:main.adb:105:37] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:39] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:42] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:44] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:46] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:30] ([#"main.adb" 105 0 0] ()) );
              ( [@GP_Sloc:main.adb:105:30] ([#"main.adb" 105 0 0] ( ([#"main.adb" 105 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:15] [@comment:                        Stack.Push2(L,Sk,A,B,Success);                              ^ main.adb:105:30:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_5_declblk__if__if__call_push2] [@GP_Sloc:main.adb:105:30] (Stack__push2___axiom.push2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_5__a.a.int__content) (Main__B_3__B_4__B_5__b.b.int__content) (Main__B_3__B_4__B_5__success.success)) )) )) );
              ( [@GP_Sloc:main.adb:106:32] ([#"main.adb" 106 0 0] ()) );
              ( [@GP_Sloc:main.adb:106:25] ([#"main.adb" 106 0 0] (if (( ([#"main.adb" 106 0 0] [#"main.adb" 106 0 0] (([@branch_id=2782] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_5__success.success.bool__content ) )));
              ( [@branch_id=2782] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:107:28] ([#"main.adb" 107 0 0] ()) );
               ( [@GP_Sloc:main.adb:107:28] ([#"main.adb" 107 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_507.temp___String_Literal_507(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
               ()))) ) )))) ) )))) ) )) ) )) else (
            ( [@GP_Sloc:main.adb:113:13] (if (( ([#"main.adb" 113 0 0] [#"main.adb" 113 0 0] (([@branch_id=2790] Main.spark__branch).bool__content <- ( (let temp___698 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_695.temp___String_Literal_695(())) in (
             (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___698) ((1 : int)) ((1 : int)))))
             )));
            ( [@branch_id=2790] Main.spark__branch ).bool__content )) then (
             ( ();
             ( [@GP_Sloc:main.adb:114:37] ([#"main.adb" 114 0 0] ()) );
             ( [@GP_Sloc:main.adb:114:26] ([#"main.adb" 114 0 0] ()) );
             ( [@GP_Sloc:main.adb:114:16] ([#"main.adb" 114 0 0] (if (( ([#"main.adb" 114 0 0] [#"main.adb" 114 0 0] (([@branch_id=2793] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
             ( [@branch_id=2793] Main.spark__branch ).bool__content )) then (
               raise Temp___exception_675) else (
              ()))) );
             ( [@GP_Sloc:main.adb:119:19] ([#"main.adb" 119 0 0] ()) );
             ( [@GP_Sloc:main.adb:119:16] ([#"main.adb" 119 0 0] (if (( ([#"main.adb" 119 0 0] [#"main.adb" 119 0 0] (([@branch_id=2803] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
             ( [@branch_id=2803] Main.spark__branch ).bool__content )) then (
               raise Temp___exception_677) else (
              ()))) );
             ( [@GP_Sloc:main.adb:124:16] ([#"main.adb" 124 0 0] ( ();
             ([#"main.adb" 125 0 0] ( [#"main.adb" 125 0 0] begin ensures {true} let _ = (let _ = (let temp___693 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 125 0 0] (val _f : Main__result.result__
             ensures {[#"main.adb" 125 0 0] true} 
             in _f) in (
              ( () )))
              in (
              ()))
              in () end ;
             [#"main.adb" 125 0 0] assume { [#"main.adb" 125 0 0] (Main__result___axiom.default_initial_assumption { Main__result.__split_fields = Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content } False) };
             [#"main.adb" 125 0 0] assume { [#"main.adb" 125 0 0] (Main__result___axiom.dynamic_invariant { Main__result.__split_fields = Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content } False False True True) } ));
             ([#"main.adb" 126 0 0] ( [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_6__a.a.int__content False) };
             [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_6__a.a.int__content False False True True) } ));
             ([#"main.adb" 126 0 0] ( [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_6__b.b.int__content False) };
             [#"main.adb" 126 0 0] assume { [#"main.adb" 126 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_6__b.b.int__content False False True True) } ));
             ([#"main.adb" 127 0 0] [#"main.adb" 127 0 0] (Main__B_3__B_4__B_6__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
             ();
             ( [@GP_Sloc:main.adb:129:30] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:32] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:35] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:37] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:39] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:24] ([#"main.adb" 129 0 0] ()) );
             ( [@GP_Sloc:main.adb:129:24] ([#"main.adb" 129 0 0] [#"main.adb" 129 0 0] let stack__pop2__b = { int__content = Main__B_3__B_4__B_6__b.b.int__content } in 
             [#"main.adb" 129 0 0] let stack__pop2__a = { int__content = Main__B_3__B_4__B_6__a.a.int__content } in 
              ( ([#"main.adb" 129 0 0] ( [@GP_Id:80] [@GP_Reason:VC_PRECONDITION] [@comment:                  Stack.Pop2(L,Sk,A,B,Success);                        ^ main.adb:129:24:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__call_pop2] [@GP_Sloc:main.adb:129:24] (Stack__pop2___axiom.pop2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop2__a) (stack__pop2__b) (Main__B_3__B_4__B_6__success.success)) ));
               (Main__B_3__B_4__B_6__a.a.int__content <- ( stack__pop2__a.int__content ));
               (Main__B_3__B_4__B_6__b.b.int__content <- ( stack__pop2__b.int__content )) )) );
             ( [@GP_Sloc:main.adb:130:26] ([#"main.adb" 130 0 0] ()) );
             ( [@GP_Sloc:main.adb:130:19] ([#"main.adb" 130 0 0] (if (( ([#"main.adb" 130 0 0] [#"main.adb" 130 0 0] (([@branch_id=2862] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_6__success.success.bool__content ) )));
             ( [@branch_id=2862] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:main.adb:131:22] ([#"main.adb" 131 0 0] ()) );
              ( [@GP_Sloc:main.adb:131:22] ([#"main.adb" 131 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_678.temp___String_Literal_678(()))) ((1 : int)) ((24 : int))))) )) ) )) else (
              ( ();
              ( [@GP_Sloc:main.adb:133:22] ([#"main.adb" 133 0 0] ()) );
              ( [@GP_Sloc:main.adb:133:41] ([#"main.adb" 133 0 0] ()) );
              ( [@GP_Sloc:main.adb:133:43] ([#"main.adb" 133 0 0] ()) );
              ( [@GP_Sloc:main.adb:133:45] ([#"main.adb" 133 0 0] ()) );
              ( [@GP_Sloc:main.adb:133:36] ([#"main.adb" 133 0 0] ()) );
              ( [@GP_Sloc:main.adb:133:23] ([#"main.adb" 133 0 0] (let temp___679 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 133 0 0] ( [@GP_Id:81] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:133:36] [@vc:annotation] [@comment:                     R:= Calculator.Sub(L,A,B);                                    ^ main.adb:133:36:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__r_assign__call_sub] (Calculator__sub___axiom.sub({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__B_3__B_4__B_6__a.a.int__content) (Main__B_3__B_4__B_6__b.b.int__content)) )) in (
                (Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content <- ( temp___679.Main__result.__split_fields ))))
              ) );
              ( [@GP_Sloc:main.adb:134:25] ([#"main.adb" 134 0 0] ()) );
              ( [@GP_Sloc:main.adb:134:22] ([#"main.adb" 134 0 0] (if (( ([#"main.adb" 134 0 0] [#"main.adb" 134 0 0] (([@branch_id=2877] Main.spark__branch).bool__content <- ( { Main__result.__split_fields = Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__success )));
              ( [@branch_id=2877] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:135:36] ([#"main.adb" 135 0 0] ()) );
               ( [@GP_Sloc:main.adb:135:38] ([#"main.adb" 135 0 0] ()) );
               ( [@GP_Sloc:main.adb:135:56] ([#"main.adb" 135 0 0] ()) );
               ( [@GP_Sloc:main.adb:135:30] ([#"main.adb" 135 0 0] ()) );
               ( [@GP_Sloc:main.adb:135:30] ([#"main.adb" 135 0 0] ( ([#"main.adb" 135 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_push] [@comment:                        Stack.Push(L,Sk,Int32(R.Value),Success);                              ^ main.adb:135:30:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:135:30] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) ((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))) (Main__B_3__B_4__B_6__success.success)) )) )) );
               ( [@GP_Sloc:main.adb:136:32] ([#"main.adb" 136 0 0] ()) );
               ( [@GP_Sloc:main.adb:136:25] ([#"main.adb" 136 0 0] (if (( ([#"main.adb" 136 0 0] [#"main.adb" 136 0 0] (([@branch_id=2893] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_6__success.success.bool__content ) )));
               ( [@branch_id=2893] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:137:28] ([#"main.adb" 137 0 0] ()) );
                ( [@GP_Sloc:main.adb:137:28] ([#"main.adb" 137 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_680.temp___String_Literal_680(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                ()))) );
               ( [@GP_Sloc:main.adb:139:25] ([#"main.adb" 139 0 0] ()) );
               ( [@GP_Sloc:main.adb:139:25] ([#"main.adb" 139 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___690 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_6__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))))) ((12 : int))) in (
               (let temp___689 [@mlw:proxy_symbol] [@introduced] = (let temp___688 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_681.temp___String_Literal_681(())) in (
               (let temp___687 [@mlw:proxy_symbol] [@introduced] = (let temp___686 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_6__b.b.int__content))) ((12 : int))) in (
               (let temp___685 [@mlw:proxy_symbol] [@introduced] = (let temp___684 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_682.temp___String_Literal_682(())) in (
               (let temp___683 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_6__a.a.int__content))) ((12 : int))) in (
                (if (((Standard__string.length(temp___683)) = (0 : int))) then (
                 (Standard__string.of_array(temp___684) ((1 : int)) ((3 : int)))) else (
                 (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___683))) ((Standard__string.first(temp___683))) ((Standard__string.last(temp___683))) (temp___684) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___683))) (([#"main.adb" 139 0 0] ( [@GP_Id:83] [@GP_Sloc:main.adb:139:49] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        Put_Line(Int32'Image(A) & " - " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                 ^ main.adb:139:49:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_put_line__2__concat__concat__concat__concat] (Standard__positive.range_check_((((Standard__string.first(temp___683)) + ((Integer.length((Standard__string.first(temp___683))) ((Standard__string.last(temp___683)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
               ))
                in (
                (if (((Standard__string.length(temp___685)) = (0 : int))) then (
                 (Standard__string.of_array((Standard__string.to_array(temp___686))) ((Standard__string.first(temp___686))) ((Standard__string.last(temp___686))))) else (
                 (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___685))) ((Standard__string.first(temp___685))) ((Standard__string.last(temp___685))) ((Standard__string.to_array(temp___686))) ((Standard__string.first(temp___686))) ((Standard__string.last(temp___686))))) ((Standard__string.first(temp___685))) (([#"main.adb" 139 0 0] ( [@comment:                        Put_Line(Int32'Image(A) & " - " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                         ^ main.adb:139:57:VC_RANGE_CHECK] [@GP_Id:84] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_put_line__2__concat__concat__concat] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:139:57] (Standard__positive.range_check_((((Standard__string.first(temp___685)) + ((Integer.length((Standard__string.first(temp___685))) ((Standard__string.last(temp___685)))) + (Integer.length((Standard__string.first(temp___686))) ((Standard__string.last(temp___686)))))) - (1 : int)))) ))))))))
               ))
                in (
                (if (((Standard__string.length(temp___687)) = (0 : int))) then (
                 (Standard__string.of_array(temp___688) ((1 : int)) ((3 : int)))) else (
                 (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___687))) ((Standard__string.first(temp___687))) ((Standard__string.last(temp___687))) (temp___688) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___687))) (([#"main.adb" 139 0 0] ( [@GP_Id:85] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_put_line__2__concat__concat] [@vc:annotation] [@GP_Sloc:main.adb:139:74] [@comment:                        Put_Line(Int32'Image(A) & " - " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                          ^ main.adb:139:74:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___687)) + ((Integer.length((Standard__string.first(temp___687))) ((Standard__string.last(temp___687)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
               ))
                in (
                (if (((Standard__string.length(temp___689)) = (0 : int))) then (
                 (Standard__string.of_array((Standard__string.to_array(temp___690))) ((Standard__string.first(temp___690))) ((Standard__string.last(temp___690))))) else (
                 (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___689))) ((Standard__string.first(temp___689))) ((Standard__string.last(temp___689))) ((Standard__string.to_array(temp___690))) ((Standard__string.first(temp___690))) ((Standard__string.last(temp___690))))) ((Standard__string.first(temp___689))) (([#"main.adb" 139 0 0] ( [@comment:                        Put_Line(Int32'Image(A) & " - " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                                  ^ main.adb:139:82:VC_RANGE_CHECK] [@GP_Sloc:main.adb:139:82] [@GP_Id:86] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_put_line__2__concat] (Standard__positive.range_check_((((Standard__string.first(temp___689)) + ((Integer.length((Standard__string.first(temp___689))) ((Standard__string.last(temp___689)))) + (Integer.length((Standard__string.first(temp___690))) ((Standard__string.last(temp___690)))))) - (1 : int)))) ))))))))
               ))
               )) )) ) )) else (
               ( ();
               ( [@GP_Sloc:main.adb:141:25] ([#"main.adb" 141 0 0] ()) );
               ( [@GP_Sloc:main.adb:141:25] ([#"main.adb" 141 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_691.temp___String_Literal_691(()))) ((1 : int)) ((31 : int))))) )) );
               ( [@GP_Sloc:main.adb:142:37] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:39] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:42] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:44] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:46] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:30] ([#"main.adb" 142 0 0] ()) );
               ( [@GP_Sloc:main.adb:142:30] ([#"main.adb" 142 0 0] ( ([#"main.adb" 142 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:87] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_6_declblk__if__if__call_push2] [@vc:annotation] [@comment:                        Stack.Push2(L,Sk,A,B,Success);                              ^ main.adb:142:30:VC_PRECONDITION] [@GP_Sloc:main.adb:142:30] (Stack__push2___axiom.push2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_6__a.a.int__content) (Main__B_3__B_4__B_6__b.b.int__content) (Main__B_3__B_4__B_6__success.success)) )) )) );
               ( [@GP_Sloc:main.adb:143:32] ([#"main.adb" 143 0 0] ()) );
               ( [@GP_Sloc:main.adb:143:25] ([#"main.adb" 143 0 0] (if (( ([#"main.adb" 143 0 0] [#"main.adb" 143 0 0] (([@branch_id=2933] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_6__success.success.bool__content ) )));
               ( [@branch_id=2933] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:144:28] ([#"main.adb" 144 0 0] ()) );
                ( [@GP_Sloc:main.adb:144:28] ([#"main.adb" 144 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_692.temp___String_Literal_692(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                ()))) ) )))) ) )))) ) )) ) )) else (
             ( [@GP_Sloc:main.adb:150:13] (if (( ([#"main.adb" 150 0 0] [#"main.adb" 150 0 0] (([@branch_id=2941] Main.spark__branch).bool__content <- ( (let temp___673 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_670.temp___String_Literal_670(())) in (
              (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___673) ((1 : int)) ((1 : int)))))
              )));
             ( [@branch_id=2941] Main.spark__branch ).bool__content )) then (
              ( ();
              ( [@GP_Sloc:main.adb:151:37] ([#"main.adb" 151 0 0] ()) );
              ( [@GP_Sloc:main.adb:151:26] ([#"main.adb" 151 0 0] ()) );
              ( [@GP_Sloc:main.adb:151:16] ([#"main.adb" 151 0 0] (if (( ([#"main.adb" 151 0 0] [#"main.adb" 151 0 0] (([@branch_id=2944] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
              ( [@branch_id=2944] Main.spark__branch ).bool__content )) then (
                raise Temp___exception_650) else (
               ()))) );
              ( [@GP_Sloc:main.adb:156:19] ([#"main.adb" 156 0 0] ()) );
              ( [@GP_Sloc:main.adb:156:16] ([#"main.adb" 156 0 0] (if (( ([#"main.adb" 156 0 0] [#"main.adb" 156 0 0] (([@branch_id=2954] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
              ( [@branch_id=2954] Main.spark__branch ).bool__content )) then (
                raise Temp___exception_652) else (
               ()))) );
              ( [@GP_Sloc:main.adb:161:16] ([#"main.adb" 161 0 0] ( ();
              ([#"main.adb" 162 0 0] ( [#"main.adb" 162 0 0] begin ensures {true} let _ = (let _ = (let temp___668 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 162 0 0] (val _f : Main__result.result__
              ensures {[#"main.adb" 162 0 0] true} 
              in _f) in (
               ( () )))
               in (
               ()))
               in () end ;
              [#"main.adb" 162 0 0] assume { [#"main.adb" 162 0 0] (Main__result___axiom.default_initial_assumption { Main__result.__split_fields = Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content } False) };
              [#"main.adb" 162 0 0] assume { [#"main.adb" 162 0 0] (Main__result___axiom.dynamic_invariant { Main__result.__split_fields = Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content } False False True True) } ));
              ([#"main.adb" 163 0 0] ( [#"main.adb" 163 0 0] assume { [#"main.adb" 163 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_7__a.a.int__content False) };
              [#"main.adb" 163 0 0] assume { [#"main.adb" 163 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_7__a.a.int__content False False True True) } ));
              ([#"main.adb" 163 0 0] ( [#"main.adb" 163 0 0] assume { [#"main.adb" 163 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_7__b.b.int__content False) };
              [#"main.adb" 163 0 0] assume { [#"main.adb" 163 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_7__b.b.int__content False False True True) } ));
              ([#"main.adb" 164 0 0] [#"main.adb" 164 0 0] (Main__B_3__B_4__B_7__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
              ();
              ( [@GP_Sloc:main.adb:166:30] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:32] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:35] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:37] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:39] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:24] ([#"main.adb" 166 0 0] ()) );
              ( [@GP_Sloc:main.adb:166:24] ([#"main.adb" 166 0 0] [#"main.adb" 166 0 0] let stack__pop2__b = { int__content = Main__B_3__B_4__B_7__b.b.int__content } in 
              [#"main.adb" 166 0 0] let stack__pop2__a = { int__content = Main__B_3__B_4__B_7__a.a.int__content } in 
               ( ([#"main.adb" 166 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:72] [@comment:                  Stack.Pop2(L,Sk,A,B,Success);                        ^ main.adb:166:24:VC_PRECONDITION] [@GP_Sloc:main.adb:166:24] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__call_pop2] (Stack__pop2___axiom.pop2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop2__a) (stack__pop2__b) (Main__B_3__B_4__B_7__success.success)) ));
                (Main__B_3__B_4__B_7__a.a.int__content <- ( stack__pop2__a.int__content ));
                (Main__B_3__B_4__B_7__b.b.int__content <- ( stack__pop2__b.int__content )) )) );
              ( [@GP_Sloc:main.adb:167:26] ([#"main.adb" 167 0 0] ()) );
              ( [@GP_Sloc:main.adb:167:19] ([#"main.adb" 167 0 0] (if (( ([#"main.adb" 167 0 0] [#"main.adb" 167 0 0] (([@branch_id=3013] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_7__success.success.bool__content ) )));
              ( [@branch_id=3013] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:168:22] ([#"main.adb" 168 0 0] ()) );
               ( [@GP_Sloc:main.adb:168:22] ([#"main.adb" 168 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_653.temp___String_Literal_653(()))) ((1 : int)) ((24 : int))))) )) ) )) else (
               ( ();
               ( [@GP_Sloc:main.adb:170:22] ([#"main.adb" 170 0 0] ()) );
               ( [@GP_Sloc:main.adb:170:41] ([#"main.adb" 170 0 0] ()) );
               ( [@GP_Sloc:main.adb:170:43] ([#"main.adb" 170 0 0] ()) );
               ( [@GP_Sloc:main.adb:170:45] ([#"main.adb" 170 0 0] ()) );
               ( [@GP_Sloc:main.adb:170:36] ([#"main.adb" 170 0 0] ()) );
               ( [@GP_Sloc:main.adb:170:23] ([#"main.adb" 170 0 0] (let temp___654 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 170 0 0] ( [@GP_Sloc:main.adb:170:36] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:73] [@comment:                     R:= Calculator.Mul(L,A,B);                                    ^ main.adb:170:36:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__r_assign__call_mul] (Calculator__mul___axiom.mul({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__B_3__B_4__B_7__a.a.int__content) (Main__B_3__B_4__B_7__b.b.int__content)) )) in (
                 (Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content <- ( temp___654.Main__result.__split_fields ))))
               ) );
               ( [@GP_Sloc:main.adb:171:25] ([#"main.adb" 171 0 0] ()) );
               ( [@GP_Sloc:main.adb:171:22] ([#"main.adb" 171 0 0] (if (( ([#"main.adb" 171 0 0] [#"main.adb" 171 0 0] (([@branch_id=3028] Main.spark__branch).bool__content <- ( { Main__result.__split_fields = Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__success )));
               ( [@branch_id=3028] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:172:36] ([#"main.adb" 172 0 0] ()) );
                ( [@GP_Sloc:main.adb:172:38] ([#"main.adb" 172 0 0] ()) );
                ( [@GP_Sloc:main.adb:172:56] ([#"main.adb" 172 0 0] ()) );
                ( [@GP_Sloc:main.adb:172:30] ([#"main.adb" 172 0 0] ()) );
                ( [@GP_Sloc:main.adb:172:30] ([#"main.adb" 172 0 0] ( ([#"main.adb" 172 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_push] [@vc:annotation] [@GP_Id:74] [@comment:                        Stack.Push(L,Sk,Int32(R.Value),Success);                              ^ main.adb:172:30:VC_PRECONDITION] [@GP_Sloc:main.adb:172:30] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) ((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))) (Main__B_3__B_4__B_7__success.success)) )) )) );
                ( [@GP_Sloc:main.adb:173:32] ([#"main.adb" 173 0 0] ()) );
                ( [@GP_Sloc:main.adb:173:25] ([#"main.adb" 173 0 0] (if (( ([#"main.adb" 173 0 0] [#"main.adb" 173 0 0] (([@branch_id=3044] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_7__success.success.bool__content ) )));
                ( [@branch_id=3044] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:174:28] ([#"main.adb" 174 0 0] ()) );
                 ( [@GP_Sloc:main.adb:174:28] ([#"main.adb" 174 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_655.temp___String_Literal_655(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                 ()))) );
                ( [@GP_Sloc:main.adb:176:25] ([#"main.adb" 176 0 0] ()) );
                ( [@GP_Sloc:main.adb:176:25] ([#"main.adb" 176 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___665 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_7__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))))) ((12 : int))) in (
                (let temp___664 [@mlw:proxy_symbol] [@introduced] = (let temp___663 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_656.temp___String_Literal_656(())) in (
                (let temp___662 [@mlw:proxy_symbol] [@introduced] = (let temp___661 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_7__b.b.int__content))) ((12 : int))) in (
                (let temp___660 [@mlw:proxy_symbol] [@introduced] = (let temp___659 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_657.temp___String_Literal_657(())) in (
                (let temp___658 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_7__a.a.int__content))) ((12 : int))) in (
                 (if (((Standard__string.length(temp___658)) = (0 : int))) then (
                  (Standard__string.of_array(temp___659) ((1 : int)) ((3 : int)))) else (
                  (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___658))) ((Standard__string.first(temp___658))) ((Standard__string.last(temp___658))) (temp___659) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___658))) (([#"main.adb" 176 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:176:49] [@GP_Id:75] [@comment:                        Put_Line(Int32'Image(A) & " * " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                 ^ main.adb:176:49:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_put_line__2__concat__concat__concat__concat] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___658)) + ((Integer.length((Standard__string.first(temp___658))) ((Standard__string.last(temp___658)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
                ))
                 in (
                 (if (((Standard__string.length(temp___660)) = (0 : int))) then (
                  (Standard__string.of_array((Standard__string.to_array(temp___661))) ((Standard__string.first(temp___661))) ((Standard__string.last(temp___661))))) else (
                  (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___660))) ((Standard__string.first(temp___660))) ((Standard__string.last(temp___660))) ((Standard__string.to_array(temp___661))) ((Standard__string.first(temp___661))) ((Standard__string.last(temp___661))))) ((Standard__string.first(temp___660))) (([#"main.adb" 176 0 0] ( [@GP_Sloc:main.adb:176:57] [@comment:                        Put_Line(Int32'Image(A) & " * " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                         ^ main.adb:176:57:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:76] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_put_line__2__concat__concat__concat] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___660)) + ((Integer.length((Standard__string.first(temp___660))) ((Standard__string.last(temp___660)))) + (Integer.length((Standard__string.first(temp___661))) ((Standard__string.last(temp___661)))))) - (1 : int)))) ))))))))
                ))
                 in (
                 (if (((Standard__string.length(temp___662)) = (0 : int))) then (
                  (Standard__string.of_array(temp___663) ((1 : int)) ((3 : int)))) else (
                  (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___662))) ((Standard__string.first(temp___662))) ((Standard__string.last(temp___662))) (temp___663) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___662))) (([#"main.adb" 176 0 0] ( [@vc:annotation] [@comment:                        Put_Line(Int32'Image(A) & " * " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                          ^ main.adb:176:74:VC_RANGE_CHECK] [@GP_Id:77] [@GP_Sloc:main.adb:176:74] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_put_line__2__concat__concat] (Standard__positive.range_check_((((Standard__string.first(temp___662)) + ((Integer.length((Standard__string.first(temp___662))) ((Standard__string.last(temp___662)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
                ))
                 in (
                 (if (((Standard__string.length(temp___664)) = (0 : int))) then (
                  (Standard__string.of_array((Standard__string.to_array(temp___665))) ((Standard__string.first(temp___665))) ((Standard__string.last(temp___665))))) else (
                  (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___664))) ((Standard__string.first(temp___664))) ((Standard__string.last(temp___664))) ((Standard__string.to_array(temp___665))) ((Standard__string.first(temp___665))) ((Standard__string.last(temp___665))))) ((Standard__string.first(temp___664))) (([#"main.adb" 176 0 0] ( [@GP_Sloc:main.adb:176:82] [@vc:annotation] [@GP_Id:78] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_put_line__2__concat] [@comment:                        Put_Line(Int32'Image(A) & " * " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                                  ^ main.adb:176:82:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___664)) + ((Integer.length((Standard__string.first(temp___664))) ((Standard__string.last(temp___664)))) + (Integer.length((Standard__string.first(temp___665))) ((Standard__string.last(temp___665)))))) - (1 : int)))) ))))))))
                ))
                )) )) ) )) else (
                ( ();
                ( [@GP_Sloc:main.adb:178:25] ([#"main.adb" 178 0 0] ()) );
                ( [@GP_Sloc:main.adb:178:25] ([#"main.adb" 178 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_666.temp___String_Literal_666(()))) ((1 : int)) ((31 : int))))) )) );
                ( [@GP_Sloc:main.adb:179:37] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:39] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:42] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:44] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:46] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:30] ([#"main.adb" 179 0 0] ()) );
                ( [@GP_Sloc:main.adb:179:30] ([#"main.adb" 179 0 0] ( ([#"main.adb" 179 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_7_declblk__if__if__call_push2] [@vc:annotation] [@comment:                        Stack.Push2(L,Sk,A,B,Success);                              ^ main.adb:179:30:VC_PRECONDITION] [@GP_Id:79] [@GP_Sloc:main.adb:179:30] (Stack__push2___axiom.push2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_7__a.a.int__content) (Main__B_3__B_4__B_7__b.b.int__content) (Main__B_3__B_4__B_7__success.success)) )) )) );
                ( [@GP_Sloc:main.adb:180:32] ([#"main.adb" 180 0 0] ()) );
                ( [@GP_Sloc:main.adb:180:25] ([#"main.adb" 180 0 0] (if (( ([#"main.adb" 180 0 0] [#"main.adb" 180 0 0] (([@branch_id=3084] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_7__success.success.bool__content ) )));
                ( [@branch_id=3084] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:181:28] ([#"main.adb" 181 0 0] ()) );
                 ( [@GP_Sloc:main.adb:181:28] ([#"main.adb" 181 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_667.temp___String_Literal_667(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                 ()))) ) )))) ) )))) ) )) ) )) else (
              ( [@GP_Sloc:main.adb:187:13] (if (( ([#"main.adb" 187 0 0] [#"main.adb" 187 0 0] (([@branch_id=3092] Main.spark__branch).bool__content <- ( (let temp___648 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_645.temp___String_Literal_645(())) in (
               (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___648) ((1 : int)) ((1 : int)))))
               )));
              ( [@branch_id=3092] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:188:37] ([#"main.adb" 188 0 0] ()) );
               ( [@GP_Sloc:main.adb:188:26] ([#"main.adb" 188 0 0] ()) );
               ( [@GP_Sloc:main.adb:188:16] ([#"main.adb" 188 0 0] (if (( ([#"main.adb" 188 0 0] [#"main.adb" 188 0 0] (([@branch_id=3095] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
               ( [@branch_id=3095] Main.spark__branch ).bool__content )) then (
                 raise Temp___exception_625) else (
                ()))) );
               ( [@GP_Sloc:main.adb:193:19] ([#"main.adb" 193 0 0] ()) );
               ( [@GP_Sloc:main.adb:193:16] ([#"main.adb" 193 0 0] (if (( ([#"main.adb" 193 0 0] [#"main.adb" 193 0 0] (([@branch_id=3105] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
               ( [@branch_id=3105] Main.spark__branch ).bool__content )) then (
                 raise Temp___exception_627) else (
                ()))) );
               ( [@GP_Sloc:main.adb:198:16] ([#"main.adb" 198 0 0] ( ();
               ([#"main.adb" 199 0 0] ( [#"main.adb" 199 0 0] begin ensures {true} let _ = (let _ = (let temp___643 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 199 0 0] (val _f : Main__result.result__
               ensures {[#"main.adb" 199 0 0] true} 
               in _f) in (
                ( () )))
                in (
                ()))
                in () end ;
               [#"main.adb" 199 0 0] assume { [#"main.adb" 199 0 0] (Main__result___axiom.default_initial_assumption { Main__result.__split_fields = Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content } False) };
               [#"main.adb" 199 0 0] assume { [#"main.adb" 199 0 0] (Main__result___axiom.dynamic_invariant { Main__result.__split_fields = Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content } False False True True) } ));
               ([#"main.adb" 200 0 0] ( [#"main.adb" 200 0 0] assume { [#"main.adb" 200 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_8__a.a.int__content False) };
               [#"main.adb" 200 0 0] assume { [#"main.adb" 200 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_8__a.a.int__content False False True True) } ));
               ([#"main.adb" 200 0 0] ( [#"main.adb" 200 0 0] assume { [#"main.adb" 200 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_8__b.b.int__content False) };
               [#"main.adb" 200 0 0] assume { [#"main.adb" 200 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_8__b.b.int__content False False True True) } ));
               ([#"main.adb" 201 0 0] [#"main.adb" 201 0 0] (Main__B_3__B_4__B_8__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
               ();
               ( [@GP_Sloc:main.adb:203:30] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:32] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:35] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:37] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:39] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:24] ([#"main.adb" 203 0 0] ()) );
               ( [@GP_Sloc:main.adb:203:24] ([#"main.adb" 203 0 0] [#"main.adb" 203 0 0] let stack__pop2__b = { int__content = Main__B_3__B_4__B_8__b.b.int__content } in 
               [#"main.adb" 203 0 0] let stack__pop2__a = { int__content = Main__B_3__B_4__B_8__a.a.int__content } in 
                ( ([#"main.adb" 203 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__call_pop2] [@vc:annotation] [@comment:                  Stack.Pop2(L,Sk,A,B,Success);                        ^ main.adb:203:24:VC_PRECONDITION] [@GP_Sloc:main.adb:203:24] [@GP_Id:64] (Stack__pop2___axiom.pop2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop2__a) (stack__pop2__b) (Main__B_3__B_4__B_8__success.success)) ));
                 (Main__B_3__B_4__B_8__a.a.int__content <- ( stack__pop2__a.int__content ));
                 (Main__B_3__B_4__B_8__b.b.int__content <- ( stack__pop2__b.int__content )) )) );
               ( [@GP_Sloc:main.adb:204:26] ([#"main.adb" 204 0 0] ()) );
               ( [@GP_Sloc:main.adb:204:19] ([#"main.adb" 204 0 0] (if (( ([#"main.adb" 204 0 0] [#"main.adb" 204 0 0] (([@branch_id=3164] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_8__success.success.bool__content ) )));
               ( [@branch_id=3164] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:205:22] ([#"main.adb" 205 0 0] ()) );
                ( [@GP_Sloc:main.adb:205:22] ([#"main.adb" 205 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_628.temp___String_Literal_628(()))) ((1 : int)) ((24 : int))))) )) ) )) else (
                ( ();
                ( [@GP_Sloc:main.adb:207:22] ([#"main.adb" 207 0 0] ()) );
                ( [@GP_Sloc:main.adb:207:41] ([#"main.adb" 207 0 0] ()) );
                ( [@GP_Sloc:main.adb:207:43] ([#"main.adb" 207 0 0] ()) );
                ( [@GP_Sloc:main.adb:207:45] ([#"main.adb" 207 0 0] ()) );
                ( [@GP_Sloc:main.adb:207:36] ([#"main.adb" 207 0 0] ()) );
                ( [@GP_Sloc:main.adb:207:23] ([#"main.adb" 207 0 0] (let temp___629 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 207 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__r_assign__call_div] [@vc:annotation] [@GP_Id:65] [@comment:                     R:= Calculator.Div(L,A,B);                                    ^ main.adb:207:36:VC_PRECONDITION] [@GP_Sloc:main.adb:207:36] (Calculator__div___axiom.div({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__B_3__B_4__B_8__a.a.int__content) (Main__B_3__B_4__B_8__b.b.int__content)) )) in (
                  (Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content <- ( temp___629.Main__result.__split_fields ))))
                ) );
                ( [@GP_Sloc:main.adb:208:25] ([#"main.adb" 208 0 0] ()) );
                ( [@GP_Sloc:main.adb:208:22] ([#"main.adb" 208 0 0] (if (( ([#"main.adb" 208 0 0] [#"main.adb" 208 0 0] (([@branch_id=3179] Main.spark__branch).bool__content <- ( { Main__result.__split_fields = Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__success )));
                ( [@branch_id=3179] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:209:36] ([#"main.adb" 209 0 0] ()) );
                 ( [@GP_Sloc:main.adb:209:38] ([#"main.adb" 209 0 0] ()) );
                 ( [@GP_Sloc:main.adb:209:56] ([#"main.adb" 209 0 0] ()) );
                 ( [@GP_Sloc:main.adb:209:30] ([#"main.adb" 209 0 0] ()) );
                 ( [@GP_Sloc:main.adb:209:30] ([#"main.adb" 209 0 0] ( ([#"main.adb" 209 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_push] [@GP_Sloc:main.adb:209:30] [@GP_Id:66] [@comment:                        Stack.Push(L,Sk,Int32(R.Value),Success);                              ^ main.adb:209:30:VC_PRECONDITION] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) ((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))) (Main__B_3__B_4__B_8__success.success)) )) )) );
                 ( [@GP_Sloc:main.adb:210:32] ([#"main.adb" 210 0 0] ()) );
                 ( [@GP_Sloc:main.adb:210:25] ([#"main.adb" 210 0 0] (if (( ([#"main.adb" 210 0 0] [#"main.adb" 210 0 0] (([@branch_id=3195] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_8__success.success.bool__content ) )));
                 ( [@branch_id=3195] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:211:28] ([#"main.adb" 211 0 0] ()) );
                  ( [@GP_Sloc:main.adb:211:28] ([#"main.adb" 211 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_630.temp___String_Literal_630(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                  ()))) );
                 ( [@GP_Sloc:main.adb:213:25] ([#"main.adb" 213 0 0] ()) );
                 ( [@GP_Sloc:main.adb:213:25] ([#"main.adb" 213 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___640 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE((Calculator__int32__rep.to_rep({ Main__result.__split_fields = Main__B_3__B_4__B_8__r.r__split_fields.Main__result.__split_fields__content }.Main__result.__split_fields.Main__result.rec__calculator__result__value))))) ((12 : int))) in (
                 (let temp___639 [@mlw:proxy_symbol] [@introduced] = (let temp___638 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_631.temp___String_Literal_631(())) in (
                 (let temp___637 [@mlw:proxy_symbol] [@introduced] = (let temp___636 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_8__b.b.int__content))) ((12 : int))) in (
                 (let temp___635 [@mlw:proxy_symbol] [@introduced] = (let temp___634 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_632.temp___String_Literal_632(())) in (
                 (let temp___633 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_8__a.a.int__content))) ((12 : int))) in (
                  (if (((Standard__string.length(temp___633)) = (0 : int))) then (
                   (Standard__string.of_array(temp___634) ((1 : int)) ((3 : int)))) else (
                   (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___633))) ((Standard__string.first(temp___633))) ((Standard__string.last(temp___633))) (temp___634) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___633))) (([#"main.adb" 213 0 0] ( [@GP_Sloc:main.adb:213:49] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_put_line__2__concat__concat__concat__concat] [@comment:                        Put_Line(Int32'Image(A) & " / " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                 ^ main.adb:213:49:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:67] (Standard__positive.range_check_((((Standard__string.first(temp___633)) + ((Integer.length((Standard__string.first(temp___633))) ((Standard__string.last(temp___633)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
                 ))
                  in (
                  (if (((Standard__string.length(temp___635)) = (0 : int))) then (
                   (Standard__string.of_array((Standard__string.to_array(temp___636))) ((Standard__string.first(temp___636))) ((Standard__string.last(temp___636))))) else (
                   (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___635))) ((Standard__string.first(temp___635))) ((Standard__string.last(temp___635))) ((Standard__string.to_array(temp___636))) ((Standard__string.first(temp___636))) ((Standard__string.last(temp___636))))) ((Standard__string.first(temp___635))) (([#"main.adb" 213 0 0] ( [@comment:                        Put_Line(Int32'Image(A) & " / " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                         ^ main.adb:213:57:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:213:57] [@GP_Id:68] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_put_line__2__concat__concat__concat] (Standard__positive.range_check_((((Standard__string.first(temp___635)) + ((Integer.length((Standard__string.first(temp___635))) ((Standard__string.last(temp___635)))) + (Integer.length((Standard__string.first(temp___636))) ((Standard__string.last(temp___636)))))) - (1 : int)))) ))))))))
                 ))
                  in (
                  (if (((Standard__string.length(temp___637)) = (0 : int))) then (
                   (Standard__string.of_array(temp___638) ((1 : int)) ((3 : int)))) else (
                   (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___637))) ((Standard__string.first(temp___637))) ((Standard__string.last(temp___637))) (temp___638) ((1 : int)) ((3 : int)))) ((Standard__string.first(temp___637))) (([#"main.adb" 213 0 0] ( [@GP_Sloc:main.adb:213:74] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_put_line__2__concat__concat] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:69] [@comment:                        Put_Line(Int32'Image(A) & " / " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                          ^ main.adb:213:74:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___637)) + ((Integer.length((Standard__string.first(temp___637))) ((Standard__string.last(temp___637)))) + (Integer.length((1 : int)) ((3 : int))))) - (1 : int)))) ))))))))
                 ))
                  in (
                  (if (((Standard__string.length(temp___639)) = (0 : int))) then (
                   (Standard__string.of_array((Standard__string.to_array(temp___640))) ((Standard__string.first(temp___640))) ((Standard__string.last(temp___640))))) else (
                   (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___639))) ((Standard__string.first(temp___639))) ((Standard__string.last(temp___639))) ((Standard__string.to_array(temp___640))) ((Standard__string.first(temp___640))) ((Standard__string.last(temp___640))))) ((Standard__string.first(temp___639))) (([#"main.adb" 213 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_put_line__2__concat] [@GP_Id:70] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        Put_Line(Int32'Image(A) & " / " & Int32'Image(B) & " = " & Int32'Image(R.Value));                                                                                  ^ main.adb:213:82:VC_RANGE_CHECK] [@GP_Sloc:main.adb:213:82] (Standard__positive.range_check_((((Standard__string.first(temp___639)) + ((Integer.length((Standard__string.first(temp___639))) ((Standard__string.last(temp___639)))) + (Integer.length((Standard__string.first(temp___640))) ((Standard__string.last(temp___640)))))) - (1 : int)))) ))))))))
                 ))
                 )) )) ) )) else (
                 ( ();
                 ( [@GP_Sloc:main.adb:215:25] ([#"main.adb" 215 0 0] ()) );
                 ( [@GP_Sloc:main.adb:215:25] ([#"main.adb" 215 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_641.temp___String_Literal_641(()))) ((1 : int)) ((28 : int))))) )) );
                 ( [@GP_Sloc:main.adb:216:37] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:39] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:42] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:44] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:46] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:30] ([#"main.adb" 216 0 0] ()) );
                 ( [@GP_Sloc:main.adb:216:30] ([#"main.adb" 216 0 0] ( ([#"main.adb" 216 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                        Stack.Push2(L,Sk,A,B,Success);                              ^ main.adb:216:30:VC_PRECONDITION] [@vc:annotation] [@GP_Id:71] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_8_declblk__if__if__call_push2] [@GP_Sloc:main.adb:216:30] (Stack__push2___axiom.push2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_8__a.a.int__content) (Main__B_3__B_4__B_8__b.b.int__content) (Main__B_3__B_4__B_8__success.success)) )) )) );
                 ( [@GP_Sloc:main.adb:217:32] ([#"main.adb" 217 0 0] ()) );
                 ( [@GP_Sloc:main.adb:217:25] ([#"main.adb" 217 0 0] (if (( ([#"main.adb" 217 0 0] [#"main.adb" 217 0 0] (([@branch_id=3235] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_8__success.success.bool__content ) )));
                 ( [@branch_id=3235] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:218:28] ([#"main.adb" 218 0 0] ()) );
                  ( [@GP_Sloc:main.adb:218:28] ([#"main.adb" 218 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_642.temp___String_Literal_642(()))) ((1 : int)) ((12 : int))))) )) ) )) else (
                  ()))) ) )))) ) )))) ) )) ) )) else (
               ( [@GP_Sloc:main.adb:224:13] (if (( ([#"main.adb" 224 0 0] [#"main.adb" 224 0 0] (([@branch_id=3243] Main.spark__branch).bool__content <- ( (let temp___623 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_620.temp___String_Literal_620(())) in (
                (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___623) ((1 : int)) ((5 : int)))))
                )));
               ( [@branch_id=3243] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:225:37] ([#"main.adb" 225 0 0] ()) );
                ( [@GP_Sloc:main.adb:225:26] ([#"main.adb" 225 0 0] ()) );
                ( [@GP_Sloc:main.adb:225:16] ([#"main.adb" 225 0 0] (if (( ([#"main.adb" 225 0 0] [#"main.adb" 225 0 0] (([@branch_id=3246] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                ( [@branch_id=3246] Main.spark__branch ).bool__content )) then (
                  raise Temp___exception_613) else (
                 ()))) );
                ( [@GP_Sloc:main.adb:230:19] ([#"main.adb" 230 0 0] ()) );
                ( [@GP_Sloc:main.adb:230:16] ([#"main.adb" 230 0 0] (if (( ([#"main.adb" 230 0 0] [#"main.adb" 230 0 0] (([@branch_id=3256] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                ( [@branch_id=3256] Main.spark__branch ).bool__content )) then (
                  raise Temp___exception_615) else (
                 ()))) );
                ( [@GP_Sloc:main.adb:235:16] ([#"main.adb" 235 0 0] ( ();
                ([#"main.adb" 237 0 0] ());
                ([#"main.adb" 237 0 0] ());
                ([#"main.adb" 237 0 0] ());
                ([#"main.adb" 236 0 0] ());
                ([#"main.adb" 236 0 0] ( [#"main.adb" 236 0 0] (Main__B_3__B_4__B_9__token2.token2.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 237 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_9_declblk__token2_decl__call_from_string__call_to_string__call_substring] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                           ^ main.adb:237:59:VC_PRECONDITION] [@GP_Sloc:main.adb:237:59] [@GP_Id:63] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 237 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:237:105] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_9_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:62] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                         ^ main.adb:237:105:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 237 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:237:93] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:61] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_9_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub__add] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                             ^ main.adb:237:93:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                 assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_9__token2.token2.int__content True False True True) } ));
                ([#"main.adb" 238 0 0] [#"main.adb" 238 0 0] (Main__B_3__B_4__B_9__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
                ();
                ( [@GP_Sloc:main.adb:240:30] ([#"main.adb" 240 0 0] ()) );
                ( [@GP_Sloc:main.adb:240:32] ([#"main.adb" 240 0 0] ()) );
                ( [@GP_Sloc:main.adb:240:49] ([#"main.adb" 240 0 0] ()) );
                ( [@GP_Sloc:main.adb:240:24] ([#"main.adb" 240 0 0] ()) );
                ( [@GP_Sloc:main.adb:240:24] ([#"main.adb" 240 0 0] ( ([#"main.adb" 240 0 0] ( [@GP_Id:59] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_9_declblk__call_push] [@comment:                  Stack.Push(L,Sk,Int32(Token2),Success);                        ^ main.adb:240:24:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:240:24] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_9__token2.token2.int__content) (Main__B_3__B_4__B_9__success.success)) )) )) );
                ( [@GP_Sloc:main.adb:241:22] ([#"main.adb" 241 0 0] ()) );
                ( [@GP_Sloc:main.adb:241:19] ([#"main.adb" 241 0 0] (if (( ([#"main.adb" 241 0 0] [#"main.adb" 241 0 0] (([@branch_id=3328] Main.spark__branch).bool__content <- ( Main__B_3__B_4__B_9__success.success.bool__content )));
                ( [@branch_id=3328] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:242:22] ([#"main.adb" 242 0 0] ()) );
                 ( [@GP_Sloc:main.adb:242:22] ([#"main.adb" 242 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___618 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_9__token2.token2.int__content))) ((12 : int))) in (
                 (let temp___617 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_616.temp___String_Literal_616(())) in (
                  (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___617) ((1 : int)) ((6 : int)) ((Standard__string.to_array(temp___618))) ((Standard__string.first(temp___618))) ((Standard__string.last(temp___618))))) ((1 : int)) (([#"main.adb" 242 0 0] ( [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_9_declblk__if__call_put_line__2__concat] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:60] [@GP_Sloc:main.adb:242:40] [@comment:                     Put_Line("Push: " & Integer'Image(Token2));                                        ^ main.adb:242:40:VC_RANGE_CHECK] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((6 : int))) + (Integer.length((Standard__string.first(temp___618))) ((Standard__string.last(temp___618)))))) - (1 : int)))) ))))))
                 ))
                 )) )) ) )) else (
                 ( ();
                 ( [@GP_Sloc:main.adb:244:22] ([#"main.adb" 244 0 0] ()) );
                 ( [@GP_Sloc:main.adb:244:22] ([#"main.adb" 244 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_619.temp___String_Literal_619(()))) ((1 : int)) ((11 : int))))) )) ) )))) ) )) ) )) else (
                ( [@GP_Sloc:main.adb:248:13] (if (( ([#"main.adb" 248 0 0] [#"main.adb" 248 0 0] (([@branch_id=3343] Main.spark__branch).bool__content <- ( (let temp___611 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_608.temp___String_Literal_608(())) in (
                 (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___611) ((1 : int)) ((5 : int)))))
                 )));
                ( [@branch_id=3343] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:249:37] ([#"main.adb" 249 0 0] ()) );
                 ( [@GP_Sloc:main.adb:249:26] ([#"main.adb" 249 0 0] ()) );
                 ( [@GP_Sloc:main.adb:249:16] ([#"main.adb" 249 0 0] (if (( ([#"main.adb" 249 0 0] [#"main.adb" 249 0 0] (([@branch_id=3346] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                 ( [@branch_id=3346] Main.spark__branch ).bool__content )) then (
                   raise Temp___exception_596) else (
                  ()))) );
                 ( [@GP_Sloc:main.adb:254:19] ([#"main.adb" 254 0 0] ()) );
                 ( [@GP_Sloc:main.adb:254:16] ([#"main.adb" 254 0 0] (if (( ([#"main.adb" 254 0 0] [#"main.adb" 254 0 0] (([@branch_id=3356] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (3 : int)) )));
                 ( [@branch_id=3356] Main.spark__branch ).bool__content )) then (
                   raise Temp___exception_598) else (
                  ()))) );
                 ( [@GP_Sloc:main.adb:259:16] ([#"main.adb" 259 0 0] ( ();
                 ([#"main.adb" 261 0 0] ());
                 ([#"main.adb" 261 0 0] ());
                 ([#"main.adb" 261 0 0] ());
                 ([#"main.adb" 260 0 0] ());
                 ([#"main.adb" 260 0 0] ( [#"main.adb" 260 0 0] (Main__B_3__B_4__B_10__token2.token2.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 261 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:261:59] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token2_decl__call_from_string__call_to_string__call_substring] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                           ^ main.adb:261:59:VC_PRECONDITION] [@GP_Id:55] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 261 0 0] ( [@GP_Sloc:main.adb:261:105] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                         ^ main.adb:261:105:VC_RANGE_CHECK] [@GP_Id:54] (Standard__positive.range_check_((([#"main.adb" 261 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:261:93] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                             ^ main.adb:261:93:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:53] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                  assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_10__token2.token2.int__content True False True True) } ));
                 ([#"main.adb" 263 0 0] ());
                 ([#"main.adb" 263 0 0] ());
                 ([#"main.adb" 263 0 0] ());
                 ([#"main.adb" 262 0 0] ());
                 ([#"main.adb" 262 0 0] ( [#"main.adb" 262 0 0] (Main__B_3__B_4__B_10__token3.token3.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 263 0 0] ( [@GP_Id:58] [@GP_Reason:VC_PRECONDITION] [@comment:                                                                 Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                       ^ main.adb:263:87:VC_PRECONDITION] [@GP_Sloc:main.adb:263:87] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token3_decl__call_from_string__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 263 0 0] ( [@GP_Id:57] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token3_decl__call_from_string__call_to_string__call_substring__sub] [@comment:                                                                 Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                                                     ^ main.adb:263:133:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:263:133] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 263 0 0] ( [@GP_Id:56] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__token3_decl__call_from_string__call_to_string__call_substring__sub__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:263:121] [@comment:                                                                 Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                                         ^ main.adb:263:121:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                  assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_10__token3.token3.int__content True False True True) } ));
                 ([#"main.adb" 264 0 0] [#"main.adb" 264 0 0] (Main__B_3__B_4__B_10__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
                 ();
                 ( [@GP_Sloc:main.adb:266:31] ([#"main.adb" 266 0 0] ()) );
                 ( [@GP_Sloc:main.adb:266:33] ([#"main.adb" 266 0 0] ()) );
                 ( [@GP_Sloc:main.adb:266:64] ([#"main.adb" 266 0 0] ()) );
                 ( [@GP_Sloc:main.adb:266:24] ([#"main.adb" 266 0 0] ()) );
                 ( [@GP_Sloc:main.adb:266:24] ([#"main.adb" 266 0 0] ( ([#"main.adb" 266 0 0] ( [@GP_Sloc:main.adb:266:24] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:49] [@comment:                  Stack.Push2(L,Sk,Int32(Token2),Int32(Token3),Success);                        ^ main.adb:266:24:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__call_push2] (Stack__push2___axiom.push2({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_10__token2.token2.int__content) (Main__B_3__B_4__B_10__token3.token3.int__content) (Main__B_3__B_4__B_10__success.success)) )) )) );
                 ( [@GP_Sloc:main.adb:267:22] ([#"main.adb" 267 0 0] ()) );
                 ( [@GP_Sloc:main.adb:267:19] ([#"main.adb" 267 0 0] (if (( ([#"main.adb" 267 0 0] [#"main.adb" 267 0 0] (([@branch_id=3471] Main.spark__branch).bool__content <- ( Main__B_3__B_4__B_10__success.success.bool__content )));
                 ( [@branch_id=3471] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:268:22] ([#"main.adb" 268 0 0] ()) );
                  ( [@GP_Sloc:main.adb:268:22] ([#"main.adb" 268 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___606 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_10__token3.token3.int__content))) ((12 : int))) in (
                  (let temp___605 [@mlw:proxy_symbol] [@introduced] = (let temp___604 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_599.temp___String_Literal_599(())) in (
                  (let temp___603 [@mlw:proxy_symbol] [@introduced] = (let temp___602 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_10__token2.token2.int__content))) ((12 : int))) in (
                  (let temp___601 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_600.temp___String_Literal_600(())) in (
                   (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___601) ((1 : int)) ((6 : int)) ((Standard__string.to_array(temp___602))) ((Standard__string.first(temp___602))) ((Standard__string.last(temp___602))))) ((1 : int)) (([#"main.adb" 268 0 0] ( [@comment:                     Put_Line("Push: " & Integer'Image(Token2) & " and " & Integer'Image(Token3));                                        ^ main.adb:268:40:VC_RANGE_CHECK] [@GP_Sloc:main.adb:268:40] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:50] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__if__call_put_line__2__concat__concat__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((6 : int))) + (Integer.length((Standard__string.first(temp___602))) ((Standard__string.last(temp___602)))))) - (1 : int)))) ))))))
                  ))
                   in (
                   (if (((Standard__string.length(temp___603)) = (0 : int))) then (
                    (Standard__string.of_array(temp___604) ((1 : int)) ((5 : int)))) else (
                    (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___603))) ((Standard__string.first(temp___603))) ((Standard__string.last(temp___603))) (temp___604) ((1 : int)) ((5 : int)))) ((Standard__string.first(temp___603))) (([#"main.adb" 268 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__if__call_put_line__2__concat__concat] [@comment:                     Put_Line("Push: " & Integer'Image(Token2) & " and " & Integer'Image(Token3));                                                                ^ main.adb:268:64:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:268:64] [@GP_Id:51] (Standard__positive.range_check_((((Standard__string.first(temp___603)) + ((Integer.length((Standard__string.first(temp___603))) ((Standard__string.last(temp___603)))) + (Integer.length((1 : int)) ((5 : int))))) - (1 : int)))) ))))))))
                  ))
                   in (
                   (if (((Standard__string.length(temp___605)) = (0 : int))) then (
                    (Standard__string.of_array((Standard__string.to_array(temp___606))) ((Standard__string.first(temp___606))) ((Standard__string.last(temp___606))))) else (
                    (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___605))) ((Standard__string.first(temp___605))) ((Standard__string.last(temp___605))) ((Standard__string.to_array(temp___606))) ((Standard__string.first(temp___606))) ((Standard__string.last(temp___606))))) ((Standard__string.first(temp___605))) (([#"main.adb" 268 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_10_declblk__if__call_put_line__2__concat] [@vc:annotation] [@GP_Sloc:main.adb:268:74] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:52] [@comment:                     Put_Line("Push: " & Integer'Image(Token2) & " and " & Integer'Image(Token3));                                                                          ^ main.adb:268:74:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___605)) + ((Integer.length((Standard__string.first(temp___605))) ((Standard__string.last(temp___605)))) + (Integer.length((Standard__string.first(temp___606))) ((Standard__string.last(temp___606)))))) - (1 : int)))) ))))))))
                  ))
                  )) )) ) )) else (
                  ( ();
                  ( [@GP_Sloc:main.adb:270:22] ([#"main.adb" 270 0 0] ()) );
                  ( [@GP_Sloc:main.adb:270:22] ([#"main.adb" 270 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_607.temp___String_Literal_607(()))) ((1 : int)) ((11 : int))))) )) ) )))) ) )) ) )) else (
                 ( [@GP_Sloc:main.adb:274:13] (if (( ([#"main.adb" 274 0 0] [#"main.adb" 274 0 0] (([@branch_id=3493] Main.spark__branch).bool__content <- ( (let temp___594 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_591.temp___String_Literal_591(())) in (
                  (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___594) ((1 : int)) ((3 : int)))))
                  )));
                 ( [@branch_id=3493] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:275:37] ([#"main.adb" 275 0 0] ()) );
                  ( [@GP_Sloc:main.adb:275:26] ([#"main.adb" 275 0 0] ()) );
                  ( [@GP_Sloc:main.adb:275:16] ([#"main.adb" 275 0 0] (if (( ([#"main.adb" 275 0 0] [#"main.adb" 275 0 0] (([@branch_id=3496] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                  ( [@branch_id=3496] Main.spark__branch ).bool__content )) then (
                    raise Temp___exception_584) else (
                   ()))) );
                  ( [@GP_Sloc:main.adb:280:19] ([#"main.adb" 280 0 0] ()) );
                  ( [@GP_Sloc:main.adb:280:16] ([#"main.adb" 280 0 0] (if (( ([#"main.adb" 280 0 0] [#"main.adb" 280 0 0] (([@branch_id=3506] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
                  ( [@branch_id=3506] Main.spark__branch ).bool__content )) then (
                    raise Temp___exception_586) else (
                   ()))) );
                  ( [@GP_Sloc:main.adb:285:16] ([#"main.adb" 285 0 0] ( ();
                  ([#"main.adb" 286 0 0] ( [#"main.adb" 286 0 0] assume { [#"main.adb" 286 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_11__a.a.int__content False) };
                  [#"main.adb" 286 0 0] assume { [#"main.adb" 286 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_11__a.a.int__content False False True True) } ));
                  ([#"main.adb" 287 0 0] [#"main.adb" 287 0 0] (Main__B_3__B_4__B_11__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
                  ();
                  ( [@GP_Sloc:main.adb:289:29] ([#"main.adb" 289 0 0] ()) );
                  ( [@GP_Sloc:main.adb:289:31] ([#"main.adb" 289 0 0] ()) );
                  ( [@GP_Sloc:main.adb:289:34] ([#"main.adb" 289 0 0] ()) );
                  ( [@GP_Sloc:main.adb:289:36] ([#"main.adb" 289 0 0] ()) );
                  ( [@GP_Sloc:main.adb:289:24] ([#"main.adb" 289 0 0] ()) );
                  ( [@GP_Sloc:main.adb:289:24] ([#"main.adb" 289 0 0] [#"main.adb" 289 0 0] let stack__pop__a = { int__content = Main__B_3__B_4__B_11__a.a.int__content } in 
                   ( ([#"main.adb" 289 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_11_declblk__call_pop] [@comment:                  Stack.Pop(L,Sk,A,Success);                        ^ main.adb:289:24:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:47] [@GP_Sloc:main.adb:289:24] [@vc:annotation] (Stack__pop___axiom.pop({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop__a) (Main__B_3__B_4__B_11__success.success)) ));
                    (Main__B_3__B_4__B_11__a.a.int__content <- ( stack__pop__a.int__content )) )) );
                  ( [@GP_Sloc:main.adb:290:22] ([#"main.adb" 290 0 0] ()) );
                  ( [@GP_Sloc:main.adb:290:19] ([#"main.adb" 290 0 0] (if (( ([#"main.adb" 290 0 0] [#"main.adb" 290 0 0] (([@branch_id=3545] Main.spark__branch).bool__content <- ( Main__B_3__B_4__B_11__success.success.bool__content )));
                  ( [@branch_id=3545] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:291:22] ([#"main.adb" 291 0 0] ()) );
                   ( [@GP_Sloc:main.adb:291:22] ([#"main.adb" 291 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___589 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_11__a.a.int__content))) ((12 : int))) in (
                   (let temp___588 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_587.temp___String_Literal_587(())) in (
                    (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___588) ((1 : int)) ((5 : int)) ((Standard__string.to_array(temp___589))) ((Standard__string.first(temp___589))) ((Standard__string.last(temp___589))))) ((1 : int)) (([#"main.adb" 291 0 0] ( [@GP_Sloc:main.adb:291:39] [@comment:                     Put_Line("Pop: " & Int32'Image(A));                                       ^ main.adb:291:39:VC_RANGE_CHECK] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_11_declblk__if__call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((5 : int))) + (Integer.length((Standard__string.first(temp___589))) ((Standard__string.last(temp___589)))))) - (1 : int)))) ))))))
                   ))
                   )) )) ) )) else (
                   ( ();
                   ( [@GP_Sloc:main.adb:293:22] ([#"main.adb" 293 0 0] ()) );
                   ( [@GP_Sloc:main.adb:293:22] ([#"main.adb" 293 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_590.temp___String_Literal_590(()))) ((1 : int)) ((12 : int))))) )) ) )))) ) )) ) )) else (
                  ( [@GP_Sloc:main.adb:298:13] (if (( ([#"main.adb" 298 0 0] [#"main.adb" 298 0 0] (([@branch_id=3560] Main.spark__branch).bool__content <- ( (let temp___582 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_579.temp___String_Literal_579(())) in (
                   (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___582) ((1 : int)) ((8 : int)))))
                   )));
                  ( [@branch_id=3560] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:299:37] ([#"main.adb" 299 0 0] ()) );
                   ( [@GP_Sloc:main.adb:299:26] ([#"main.adb" 299 0 0] ()) );
                   ( [@GP_Sloc:main.adb:299:16] ([#"main.adb" 299 0 0] (if (( ([#"main.adb" 299 0 0] [#"main.adb" 299 0 0] (([@branch_id=3563] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                   ( [@branch_id=3563] Main.spark__branch ).bool__content )) then (
                     raise Temp___exception_568) else (
                    ()))) );
                   ( [@GP_Sloc:main.adb:304:19] ([#"main.adb" 304 0 0] ()) );
                   ( [@GP_Sloc:main.adb:304:16] ([#"main.adb" 304 0 0] (if (( ([#"main.adb" 304 0 0] [#"main.adb" 304 0 0] (([@branch_id=3573] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                   ( [@branch_id=3573] Main.spark__branch ).bool__content )) then (
                     raise Temp___exception_570) else (
                    ()))) );
                   ( [@GP_Sloc:main.adb:309:16] ([#"main.adb" 309 0 0] ( ();
                   ([#"main.adb" 311 0 0] ());
                   ([#"main.adb" 311 0 0] ());
                   ([#"main.adb" 311 0 0] ());
                   ([#"main.adb" 310 0 0] ());
                   ([#"main.adb" 310 0 0] ( [#"main.adb" 310 0 0] (Main__B_3__B_4__B_12__token2.token2.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 311 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:46] [@vc:annotation] [@GP_Sloc:main.adb:311:59] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                           ^ main.adb:311:59:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__token2_decl__call_from_string__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 311 0 0] ( [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                         ^ main.adb:311:105:VC_RANGE_CHECK] [@GP_Sloc:main.adb:311:105] [@GP_Id:45] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 311 0 0] ( [@GP_Sloc:main.adb:311:93] [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub__add] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                             ^ main.adb:311:93:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                    assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_12__token2.token2.int__content True False True True) } ));
                   ([#"main.adb" 312 0 0] ( [#"main.adb" 312 0 0] assume { [#"main.adb" 312 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_12__a.a.int__content False) };
                   [#"main.adb" 312 0 0] assume { [#"main.adb" 312 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_12__a.a.int__content False False True True) } ));
                   ([#"main.adb" 313 0 0] [#"main.adb" 313 0 0] (Main__B_3__B_4__B_12__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
                   ();
                   ( [@GP_Sloc:main.adb:315:23] ([#"main.adb" 315 0 0] ()) );
                   ( [@GP_Sloc:main.adb:315:19] ([#"main.adb" 315 0 0] (if (( ([#"main.adb" 315 0 0] [#"main.adb" 315 0 0] (([@branch_id=3644] Main.spark__branch).bool__content <- ( ( (Main__B_3__B_4__B_12__token2.token2.int__content > (256 : int)) || (Main__B_3__B_4__B_12__token2.token2.int__content < (1 : int)) ) )));
                   ( [@branch_id=3644] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:316:22] ([#"main.adb" 316 0 0] ()) );
                    ( [@GP_Sloc:main.adb:316:22] ([#"main.adb" 316 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_571.temp___String_Literal_571(()))) ((1 : int)) ((45 : int))))) )) ) )) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:318:22] ([#"main.adb" 318 0 0] ()) );
                    ( [@GP_Sloc:main.adb:318:41] ([#"main.adb" 318 0 0] ()) );
                    ( [@GP_Sloc:main.adb:318:43] ([#"main.adb" 318 0 0] ()) );
                    ( [@GP_Sloc:main.adb:318:36] ([#"main.adb" 318 0 0] ()) );
                    ( [@GP_Sloc:main.adb:318:23] ([#"main.adb" 318 0 0] [#"main.adb" 318 0 0] (Main__B_3__B_4__B_12__a.a.int__content <- ( ([#"main.adb" 318 0 0] ( [@comment:                     A:= LockMemory.Get(L,D,MemoryStore.Location_Index(Token2));                                    ^ main.adb:318:36:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:40] [@vc:annotation] [@GP_Sloc:main.adb:318:36] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__if__a_assign__call_get] (Lockmemory__get___axiom.get({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) ({ Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content }) (([#"main.adb" 318 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:318:72] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:39] [@comment:                     A:= LockMemory.Get(L,D,MemoryStore.Location_Index(Token2));                                                                        ^ main.adb:318:72:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__if__a_assign__call_get__typeconv] (Memorystore__location_index.range_check_(Main__B_3__B_4__B_12__token2.token2.int__content)) )))) )) ))) );
                    ( [@GP_Sloc:main.adb:319:33] ([#"main.adb" 319 0 0] ()) );
                    ( [@GP_Sloc:main.adb:319:35] ([#"main.adb" 319 0 0] ()) );
                    ( [@GP_Sloc:main.adb:319:38] ([#"main.adb" 319 0 0] ()) );
                    ( [@GP_Sloc:main.adb:319:40] ([#"main.adb" 319 0 0] ()) );
                    ( [@GP_Sloc:main.adb:319:27] ([#"main.adb" 319 0 0] ()) );
                    ( [@GP_Sloc:main.adb:319:27] ([#"main.adb" 319 0 0] ( ([#"main.adb" 319 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__if__call_push] [@GP_Reason:VC_PRECONDITION] [@GP_Id:41] [@comment:                     Stack.Push(L,Sk,A,Success);                           ^ main.adb:319:27:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:319:27] (Stack__push___axiom.push({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (Main__B_3__B_4__B_12__a.a.int__content) (Main__B_3__B_4__B_12__success.success)) )) )) );
                    ( [@GP_Sloc:main.adb:320:25] ([#"main.adb" 320 0 0] ()) );
                    ( [@GP_Sloc:main.adb:320:22] ([#"main.adb" 320 0 0] (if (( ([#"main.adb" 320 0 0] [#"main.adb" 320 0 0] (([@branch_id=3678] Main.spark__branch).bool__content <- ( Main__B_3__B_4__B_12__success.success.bool__content )));
                    ( [@branch_id=3678] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:321:25] ([#"main.adb" 321 0 0] ()) );
                     ( [@GP_Sloc:main.adb:321:25] ([#"main.adb" 321 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___577 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_572.temp___String_Literal_572(())) in (
                     (let temp___576 [@mlw:proxy_symbol] [@introduced] = (let temp___575 [@mlw:proxy_symbol] [@introduced] = (Standard_String__Img.to_string((Main__int32.attr__ATTRIBUTE_IMAGE(Main__B_3__B_4__B_12__a.a.int__content))) ((12 : int))) in (
                     (let temp___574 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_573.temp___String_Literal_573(())) in (
                      (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___574) ((1 : int)) ((5 : int)) ((Standard__string.to_array(temp___575))) ((Standard__string.first(temp___575))) ((Standard__string.last(temp___575))))) ((1 : int)) (([#"main.adb" 321 0 0] ( [@comment:                        Put_Line("Load " & Int32'Image(A) & " successfully!");                                          ^ main.adb:321:42:VC_RANGE_CHECK] [@GP_Id:42] [@vc:annotation] [@GP_Sloc:main.adb:321:42] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__if__if__call_put_line__2__concat__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((5 : int))) + (Integer.length((Standard__string.first(temp___575))) ((Standard__string.last(temp___575)))))) - (1 : int)))) ))))))
                     ))
                      in (
                      (if (((Standard__string.length(temp___576)) = (0 : int))) then (
                       (Standard__string.of_array(temp___577) ((1 : int)) ((14 : int)))) else (
                       (Standard__string.of_array((Array__Int__Standard__character__Concat.concat((Standard__string.to_array(temp___576))) ((Standard__string.first(temp___576))) ((Standard__string.last(temp___576))) (temp___577) ((1 : int)) ((14 : int)))) ((Standard__string.first(temp___576))) (([#"main.adb" 321 0 0] ( [@GP_Id:43] [@vc:annotation] [@GP_Sloc:main.adb:321:59] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_12_declblk__if__if__call_put_line__2__concat] [@comment:                        Put_Line("Load " & Int32'Image(A) & " successfully!");                                                           ^ main.adb:321:59:VC_RANGE_CHECK] (Standard__positive.range_check_((((Standard__string.first(temp___576)) + ((Integer.length((Standard__string.first(temp___576))) ((Standard__string.last(temp___576)))) + (Integer.length((1 : int)) ((14 : int))))) - (1 : int)))) ))))))))
                     ))
                     )) )) ) )) else (
                     ( ();
                     ( [@GP_Sloc:main.adb:323:25] ([#"main.adb" 323 0 0] ()) );
                     ( [@GP_Sloc:main.adb:323:25] ([#"main.adb" 323 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_578.temp___String_Literal_578(()))) ((1 : int)) ((24 : int))))) )) ) )))) ) )))) ) )) ) )) else (
                   ( [@GP_Sloc:main.adb:328:13] (if (( ([#"main.adb" 328 0 0] [#"main.adb" 328 0 0] (([@branch_id=3695] Main.spark__branch).bool__content <- ( (let temp___566 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_563.temp___String_Literal_563(())) in (
                    (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___566) ((1 : int)) ((7 : int)))))
                    )));
                   ( [@branch_id=3695] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:329:37] ([#"main.adb" 329 0 0] ()) );
                    ( [@GP_Sloc:main.adb:329:26] ([#"main.adb" 329 0 0] ()) );
                    ( [@GP_Sloc:main.adb:329:16] ([#"main.adb" 329 0 0] (if (( ([#"main.adb" 329 0 0] [#"main.adb" 329 0 0] (([@branch_id=3698] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                    ( [@branch_id=3698] Main.spark__branch ).bool__content )) then (
                      raise Temp___exception_557) else (
                     ()))) );
                    ( [@GP_Sloc:main.adb:334:19] ([#"main.adb" 334 0 0] ()) );
                    ( [@GP_Sloc:main.adb:334:16] ([#"main.adb" 334 0 0] (if (( ([#"main.adb" 334 0 0] [#"main.adb" 334 0 0] (([@branch_id=3708] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                    ( [@branch_id=3708] Main.spark__branch ).bool__content )) then (
                      raise Temp___exception_559) else (
                     ()))) );
                    ( [@GP_Sloc:main.adb:339:16] ([#"main.adb" 339 0 0] ( ();
                    ([#"main.adb" 341 0 0] ());
                    ([#"main.adb" 341 0 0] ());
                    ([#"main.adb" 341 0 0] ());
                    ([#"main.adb" 340 0 0] ());
                    ([#"main.adb" 340 0 0] ( [#"main.adb" 340 0 0] (Main__B_3__B_4__B_13__token2.token2.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 341 0 0] ( [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                           ^ main.adb:341:59:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__token2_decl__call_from_string__call_to_string__call_substring] [@GP_Id:38] [@GP_Sloc:main.adb:341:59] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 341 0 0] ( [@GP_Sloc:main.adb:341:105] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                         ^ main.adb:341:105:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 341 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Sloc:main.adb:341:93] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                             ^ main.adb:341:93:VC_OVERFLOW_CHECK] [@GP_Id:36] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                     assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_13__token2.token2.int__content True False True True) } ));
                    ([#"main.adb" 342 0 0] ( [#"main.adb" 342 0 0] assume { [#"main.adb" 342 0 0] (Main__int32___axiom.default_initial_assumption Main__B_3__B_4__B_13__a.a.int__content False) };
                    [#"main.adb" 342 0 0] assume { [#"main.adb" 342 0 0] (Main__int32___axiom.dynamic_invariant Main__B_3__B_4__B_13__a.a.int__content False False True True) } ));
                    ([#"main.adb" 343 0 0] [#"main.adb" 343 0 0] (Main__B_3__B_4__B_13__success.success.bool__content <- ( (Boolean.of_int((0 : int))) )));
                    ();
                    ( [@GP_Sloc:main.adb:345:23] ([#"main.adb" 345 0 0] ()) );
                    ( [@GP_Sloc:main.adb:345:19] ([#"main.adb" 345 0 0] (if (( ([#"main.adb" 345 0 0] [#"main.adb" 345 0 0] (([@branch_id=3779] Main.spark__branch).bool__content <- ( ( (Main__B_3__B_4__B_13__token2.token2.int__content > (256 : int)) || (Main__B_3__B_4__B_13__token2.token2.int__content < (1 : int)) ) )));
                    ( [@branch_id=3779] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:346:22] ([#"main.adb" 346 0 0] ()) );
                     ( [@GP_Sloc:main.adb:346:22] ([#"main.adb" 346 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_560.temp___String_Literal_560(()))) ((1 : int)) ((45 : int))))) )) ) )) else (
                     ( ();
                     ( [@GP_Sloc:main.adb:348:32] ([#"main.adb" 348 0 0] ()) );
                     ( [@GP_Sloc:main.adb:348:34] ([#"main.adb" 348 0 0] ()) );
                     ( [@GP_Sloc:main.adb:348:37] ([#"main.adb" 348 0 0] ()) );
                     ( [@GP_Sloc:main.adb:348:39] ([#"main.adb" 348 0 0] ()) );
                     ( [@GP_Sloc:main.adb:348:27] ([#"main.adb" 348 0 0] ()) );
                     ( [@GP_Sloc:main.adb:348:27] ([#"main.adb" 348 0 0] [#"main.adb" 348 0 0] let stack__pop__a = { int__content = Main__B_3__B_4__B_13__a.a.int__content } in 
                      ( ([#"main.adb" 348 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:348:27] [@comment:                     Stack.Pop(L,Sk,A,Success);                           ^ main.adb:348:27:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__if__call_pop] [@GP_Id:33] (Stack__pop___axiom.pop({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__sk.sk__split_fields) (stack__pop__a) (Main__B_3__B_4__B_13__success.success)) ));
                       (Main__B_3__B_4__B_13__a.a.int__content <- ( stack__pop__a.int__content )) )) );
                     ( [@GP_Sloc:main.adb:349:29] ([#"main.adb" 349 0 0] ()) );
                     ( [@GP_Sloc:main.adb:349:22] ([#"main.adb" 349 0 0] (if (( ([#"main.adb" 349 0 0] [#"main.adb" 349 0 0] (([@branch_id=3800] Main.spark__branch).bool__content <- ( not ( Main__B_3__B_4__B_13__success.success.bool__content ) )));
                     ( [@branch_id=3800] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:main.adb:350:25] ([#"main.adb" 350 0 0] ()) );
                      ( [@GP_Sloc:main.adb:350:25] ([#"main.adb" 350 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_561.temp___String_Literal_561(()))) ((1 : int)) ((21 : int))))) )) ) )) else (
                      ( ();
                      ( [@GP_Sloc:main.adb:352:40] ([#"main.adb" 352 0 0] ()) );
                      ( [@GP_Sloc:main.adb:352:42] ([#"main.adb" 352 0 0] ()) );
                      ( [@GP_Sloc:main.adb:352:35] ([#"main.adb" 352 0 0] ()) );
                      ( [@GP_Sloc:main.adb:352:35] ([#"main.adb" 352 0 0] ( ([#"main.adb" 352 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                        LockMemory.Put(L,D,MemoryStore.Location_Index(Token2),MemoryStore.Int32(A));                                   ^ main.adb:352:35:VC_PRECONDITION] [@GP_Sloc:main.adb:352:35] [@GP_Id:35] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__if__if__call_put] (Lockmemory__put___axiom.put({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__d.d__split_fields) (([#"main.adb" 352 0 0] ( [@GP_Sloc:main.adb:352:71] [@vc:annotation] [@GP_Id:34] [@GP_Reason:VC_RANGE_CHECK] [@comment:                        LockMemory.Put(L,D,MemoryStore.Location_Index(Token2),MemoryStore.Int32(A));                                                                       ^ main.adb:352:71:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_13_declblk__if__if__call_put__typeconv] (Memorystore__location_index.range_check_(Main__B_3__B_4__B_13__token2.token2.int__content)) ))) (Main__B_3__B_4__B_13__a.a.int__content)) )) )) );
                      ( [@GP_Sloc:main.adb:353:25] ([#"main.adb" 353 0 0] ()) );
                      ( [@GP_Sloc:main.adb:353:25] ([#"main.adb" 353 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_562.temp___String_Literal_562(()))) ((1 : int)) ((19 : int))))) )) ) )))) ) )))) ) )) ) )) else (
                    ( [@GP_Sloc:main.adb:358:13] (if (( ([#"main.adb" 358 0 0] [#"main.adb" 358 0 0] (([@branch_id=3827] Main.spark__branch).bool__content <- ( (let temp___555 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_552.temp___String_Literal_552(())) in (
                     (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___555) ((1 : int)) ((6 : int)))))
                     )));
                    ( [@branch_id=3827] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:359:37] ([#"main.adb" 359 0 0] ()) );
                     ( [@GP_Sloc:main.adb:359:26] ([#"main.adb" 359 0 0] ()) );
                     ( [@GP_Sloc:main.adb:359:16] ([#"main.adb" 359 0 0] (if (( ([#"main.adb" 359 0 0] [#"main.adb" 359 0 0] (([@branch_id=3830] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                     ( [@branch_id=3830] Main.spark__branch ).bool__content )) then (
                       raise Temp___exception_547) else (
                      ()))) );
                     ( [@GP_Sloc:main.adb:364:19] ([#"main.adb" 364 0 0] ()) );
                     ( [@GP_Sloc:main.adb:364:16] ([#"main.adb" 364 0 0] (if (( ([#"main.adb" 364 0 0] [#"main.adb" 364 0 0] (([@branch_id=3840] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                     ( [@branch_id=3840] Main.spark__branch ).bool__content )) then (
                       raise Temp___exception_549) else (
                      ()))) );
                     ( [@GP_Sloc:main.adb:369:16] ([#"main.adb" 369 0 0] ( ();
                     ([#"main.adb" 371 0 0] ());
                     ([#"main.adb" 371 0 0] ());
                     ([#"main.adb" 371 0 0] ());
                     ([#"main.adb" 370 0 0] ());
                     ([#"main.adb" 370 0 0] ( [#"main.adb" 370 0 0] (Main__B_3__B_4__B_14__token2.token2.int__content <- ( (Stringtointeger__from_string___axiom.from_string((Main__lines__to_string___axiom.to_string(([#"main.adb" 371 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_14_declblk__token2_decl__call_from_string__call_to_string__call_substring] [@vc:annotation] [@GP_Id:32] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                           ^ main.adb:371:59:VC_PRECONDITION] [@GP_Sloc:main.adb:371:59] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 371 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_14_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub] [@vc:annotation] [@GP_Sloc:main.adb:371:105] [@GP_Id:31] [@GP_Reason:VC_RANGE_CHECK] [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                         ^ main.adb:371:105:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 371 0 0] ( [@comment:                                     Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                             ^ main.adb:371:93:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:30] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_14_declblk__token2_decl__call_from_string__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:371:93] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ));
                      assume {  (Standard__integer___axiom.dynamic_invariant Main__B_3__B_4__B_14__token2.token2.int__content True False True True) } ));
                     ();
                     ( [@GP_Sloc:main.adb:373:23] ([#"main.adb" 373 0 0] ()) );
                     ( [@GP_Sloc:main.adb:373:19] ([#"main.adb" 373 0 0] (if (( ([#"main.adb" 373 0 0] [#"main.adb" 373 0 0] (([@branch_id=3892] Main.spark__branch).bool__content <- ( ( (Main__B_3__B_4__B_14__token2.token2.int__content > (256 : int)) || (Main__B_3__B_4__B_14__token2.token2.int__content < (1 : int)) ) )));
                     ( [@branch_id=3892] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:main.adb:374:22] ([#"main.adb" 374 0 0] ()) );
                      ( [@GP_Sloc:main.adb:374:22] ([#"main.adb" 374 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_550.temp___String_Literal_550(()))) ((1 : int)) ((45 : int))))) )) ) )) else (
                      ( ();
                      ( [@GP_Sloc:main.adb:376:40] ([#"main.adb" 376 0 0] ()) );
                      ( [@GP_Sloc:main.adb:376:42] ([#"main.adb" 376 0 0] ()) );
                      ( [@GP_Sloc:main.adb:376:32] ([#"main.adb" 376 0 0] ()) );
                      ( [@GP_Sloc:main.adb:376:32] ([#"main.adb" 376 0 0] ( ([#"main.adb" 376 0 0] ( [@comment:                     LockMemory.Remove(L,D, MemoryStore.Location_Index(Token2));                                ^ main.adb:376:32:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:376:32] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_14_declblk__if__call_remove] [@GP_Id:29] (Lockmemory__remove___axiom.remove({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) (Main__d.d__split_fields) (([#"main.adb" 376 0 0] ( [@GP_Sloc:main.adb:376:72] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_14_declblk__if__call_remove__typeconv] [@vc:annotation] [@comment:                     LockMemory.Remove(L,D, MemoryStore.Location_Index(Token2));                                                                        ^ main.adb:376:72:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:28] (Memorystore__location_index.range_check_(Main__B_3__B_4__B_14__token2.token2.int__content)) )))) )) )) );
                      ( [@GP_Sloc:main.adb:377:22] ([#"main.adb" 377 0 0] ()) );
                      ( [@GP_Sloc:main.adb:377:22] ([#"main.adb" 377 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_551.temp___String_Literal_551(()))) ((1 : int)) ((20 : int))))) )) ) )))) ) )) ) )) else (
                     ( [@GP_Sloc:main.adb:381:13] (if (( ([#"main.adb" 381 0 0] [#"main.adb" 381 0 0] (([@branch_id=3921] Main.spark__branch).bool__content <- ( (let temp___545 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_542.temp___String_Literal_542(())) in (
                      (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___545) ((1 : int)) ((4 : int)))))
                      )));
                     ( [@branch_id=3921] Main.spark__branch ).bool__content )) then (
                      ( ();
                      ( [@GP_Sloc:main.adb:382:37] ([#"main.adb" 382 0 0] ()) );
                      ( [@GP_Sloc:main.adb:382:26] ([#"main.adb" 382 0 0] ()) );
                      ( [@GP_Sloc:main.adb:382:16] ([#"main.adb" 382 0 0] (if (( ([#"main.adb" 382 0 0] [#"main.adb" 382 0 0] (([@branch_id=3924] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                      ( [@branch_id=3924] Main.spark__branch ).bool__content )) then (
                        raise Temp___exception_539) else (
                       ()))) );
                      ( [@GP_Sloc:main.adb:387:19] ([#"main.adb" 387 0 0] ()) );
                      ( [@GP_Sloc:main.adb:387:16] ([#"main.adb" 387 0 0] (if (( ([#"main.adb" 387 0 0] [#"main.adb" 387 0 0] (([@branch_id=3934] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (1 : int)) )));
                      ( [@branch_id=3934] Main.spark__branch ).bool__content )) then (
                        raise Temp___exception_541) else (
                       ()))) );
                      ( [@GP_Sloc:main.adb:392:33] ([#"main.adb" 392 0 0] ()) );
                      ( [@GP_Sloc:main.adb:392:35] ([#"main.adb" 392 0 0] ()) );
                      ( [@GP_Sloc:main.adb:392:26] ([#"main.adb" 392 0 0] ()) );
                      ( [@GP_Sloc:main.adb:392:26] ([#"main.adb" 392 0 0] ( ([#"main.adb" 392 0 0] ( [@GP_Sloc:main.adb:392:26] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:               LockMemory.Print(L,D);                          ^ main.adb:392:26:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__call_print] [@GP_Id:27] (Lockmemory__print___axiom.print({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content }) ({ Memorystore__database.__split_fields = Main__d.d__split_fields.Memorystore__database.__split_fields__content })) )) )) ) )) else (
                      ( [@GP_Sloc:main.adb:394:13] (if (( ([#"main.adb" 394 0 0] [#"main.adb" 394 0 0] (([@branch_id=3949] Main.spark__branch).bool__content <- ( (let temp___537 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_534.temp___String_Literal_534(())) in (
                       (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___537) ((1 : int)) ((4 : int)))))
                       )));
                      ( [@branch_id=3949] Main.spark__branch ).bool__content )) then (
                       ( ();
                       ( [@GP_Sloc:main.adb:395:37] ([#"main.adb" 395 0 0] ()) );
                       ( [@GP_Sloc:main.adb:395:26] ([#"main.adb" 395 0 0] ()) );
                       ( [@GP_Sloc:main.adb:395:16] ([#"main.adb" 395 0 0] (if (( ([#"main.adb" 395 0 0] [#"main.adb" 395 0 0] (([@branch_id=3952] Main.spark__branch).bool__content <- ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) )));
                       ( [@branch_id=3952] Main.spark__branch ).bool__content )) then (
                         raise Temp___exception_529) else (
                        ()))) );
                       ( [@GP_Sloc:main.adb:400:19] ([#"main.adb" 400 0 0] ()) );
                       ( [@GP_Sloc:main.adb:400:16] ([#"main.adb" 400 0 0] (if (( ([#"main.adb" 400 0 0] [#"main.adb" 400 0 0] (([@branch_id=3962] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                       ( [@branch_id=3962] Main.spark__branch ).bool__content )) then (
                         raise Temp___exception_531) else (
                        ()))) );
                       ( [@GP_Sloc:main.adb:405:16] ([#"main.adb" 405 0 0] ( ();
                       ([#"main.adb" 406 0 0] ());
                       ([#"main.adb" 406 0 0] ());
                       ([#"main.adb" 406 0 0] ());
                       ([#"main.adb" 406 0 0] ( (let main__B_3__B_4__B_15__token2__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 406 0 0] ( [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                          ^ main.adb:406:58:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__token2_decl__call_to_string__call_substring] [@GP_Sloc:main.adb:406:58] [@GP_Id:26] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 406 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                                                                        ^ main.adb:406:104:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__token2_decl__call_to_string__call_substring__sub] [@GP_Id:25] [@GP_Sloc:main.adb:406:104] (Standard__positive.range_check_((([#"main.adb" 406 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:406:92] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__token2_decl__call_to_string__call_substring__sub__add] [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                                                            ^ main.adb:406:92:VC_OVERFLOW_CHECK] [@GP_Id:24] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                        (  (Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_4__B_15__token2__assume)) ));
                         assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__first)) = (Standard__string.first(main__B_3__B_4__B_15__token2__assume))) };
                         assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__last)) = (Standard__string.last(main__B_3__B_4__B_15__token2__assume))) } )))
                       ;
                        assume {  (if (False) then (
                        true) else (
                        (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__first) (Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__last)))) } ));
                       ();
                       ( [@GP_Sloc:main.adb:408:22] ([#"main.adb" 408 0 0] ()) );
                       ( [@GP_Sloc:main.adb:408:19] ([#"main.adb" 408 0 0] (if (( ([#"main.adb" 408 0 0] [#"main.adb" 408 0 0] (([@branch_id=4010] Main.spark__branch).bool__content <- ( ( (( [#"main.adb" 408 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content in (
                        ()))
                        in () end ;
                       (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__last)))) ) <> (4 : int)) || ( (let i = [#"main.adb" 408 0 0] (val _f : int
                       in _f) in (
                        (if ((Boolean.andb(((Standard__integer__rep.to_rep(( [#"main.adb" 408 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content in (
                         ()))
                         in () end ;
                        Main__B_3__B_4__B_15__token2.token2__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep(( [#"main.adb" 408 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content in (
                         ()))
                         in () end ;
                        Main__B_3__B_4__B_15__token2.token2__last ))))))) then (
                         [#"main.adb" 408 0 0] begin ensures {true} let _ = (let _ = not ( (Boolean.andb(((48 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content) (( [#"main.adb" 408 0 0] assert { [#"main.adb" 408 0 0] ([#"main.adb" 409 0 0] ( [@comment:                    (for some I in Token2'Range => Token2(I) not in '0' .. '9') then                                                           ^ main.adb:409:59:VC_INDEX_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__if__orelse__forsome__in__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:23] [@GP_Sloc:main.adb:409:59] ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__last)) ) )) };
                         i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 409 0 0] ( [@comment:                    (for some I in Token2'Range => Token2(I) not in '0' .. '9') then                                                           ^ main.adb:409:59:VC_INDEX_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__if__orelse__forsome__in__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:23] [@GP_Sloc:main.adb:409:59] ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__last)) ) )) };
                         i ))))) <= (57 : int)))) ) in (
                          ()))
                          in () end ))))
                       ;
                        (val _f : bool
                       ensures { ( (result = True) <-> (exists i  : int.
                        ( ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_15__token2.token2__last)) ) /\ ((Boolean.notb (Boolean.andb ((48 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content i)) <= (57 : int)))) = True) )) )} 
                       in _f) ) ) )));
                       ( [@branch_id=4010] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:410:22] ([#"main.adb" 410 0 0] ()) );
                        ( [@GP_Sloc:main.adb:410:22] ([#"main.adb" 410 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_532.temp___String_Literal_532(()))) ((1 : int)) ((20 : int))))) )) ) )) else (
                        ( ();
                        ( [@GP_Sloc:main.adb:412:39] ([#"main.adb" 412 0 0] ()) );
                        ( [@GP_Sloc:main.adb:412:57] ([#"main.adb" 412 0 0] ()) );
                        ( [@GP_Sloc:main.adb:412:44] ([#"main.adb" 412 0 0] ()) );
                        ( [@GP_Sloc:main.adb:412:28] ([#"main.adb" 412 0 0] ()) );
                        ( [@GP_Sloc:main.adb:412:28] ([#"main.adb" 412 0 0] ( (Locker__reset_pwd___axiom.reset_pwd(Main__l.l__split_fields) (([#"main.adb" 412 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_15_declblk__if__call_reset_pwd__call_from_string] [@comment:                     Locker.Reset_PWD(L,PIN.From_String(Token2));                                            ^ main.adb:412:44:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:412:44] [@GP_Id:22] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_4__B_15__token2.token2.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_15__token2.token2__last)))))) )))) )) ) )))) ) )) ) )) else (
                       ( [@GP_Sloc:main.adb:416:13] (if (( ([#"main.adb" 416 0 0] [#"main.adb" 416 0 0] (([@branch_id=4050] Main.spark__branch).bool__content <- ( (let temp___527 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_524.temp___String_Literal_524(())) in (
                        (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___527) ((1 : int)) ((6 : int)))))
                        )));
                       ( [@branch_id=4050] Main.spark__branch ).bool__content )) then (
                        ( ();
                        ( [@GP_Sloc:main.adb:417:41] ([#"main.adb" 417 0 0] ()) );
                        ( [@GP_Sloc:main.adb:417:30] ([#"main.adb" 417 0 0] ()) );
                        ( [@GP_Sloc:main.adb:417:16] ([#"main.adb" 417 0 0] (if (( ([#"main.adb" 417 0 0] [#"main.adb" 417 0 0] (([@branch_id=4053] Main.spark__branch).bool__content <- ( not ( (Locker__is_locked___axiom.is_locked({ Locker__locker.__split_fields = Main__l.l__split_fields.Locker__locker.__split_fields__content })) ) )));
                        ( [@branch_id=4053] Main.spark__branch ).bool__content )) then (
                          raise Temp___exception_519) else (
                         ()))) );
                        ( [@GP_Sloc:main.adb:423:19] ([#"main.adb" 423 0 0] ()) );
                        ( [@GP_Sloc:main.adb:423:16] ([#"main.adb" 423 0 0] (if (( ([#"main.adb" 423 0 0] [#"main.adb" 423 0 0] (([@branch_id=4064] Main.spark__branch).bool__content <- ( (Main__B_3__numtokens.numtokens.int__content <> (2 : int)) )));
                        ( [@branch_id=4064] Main.spark__branch ).bool__content )) then (
                          raise Temp___exception_521) else (
                         ()))) );
                        ( [@GP_Sloc:main.adb:428:16] ([#"main.adb" 428 0 0] ( ();
                        ([#"main.adb" 429 0 0] ());
                        ([#"main.adb" 429 0 0] ());
                        ([#"main.adb" 429 0 0] ());
                        ([#"main.adb" 429 0 0] ( (let main__B_3__B_4__B_16__token2__assume = (Main__lines__to_string___axiom.to_string(([#"main.adb" 429 0 0] ( [@GP_Sloc:main.adb:429:58] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__token2_decl__call_to_string__call_substring] [@vc:annotation] [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                          ^ main.adb:429:58:VC_PRECONDITION] [@GP_Id:21] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 429 0 0] ( [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__token2_decl__call_to_string__call_substring__sub] [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                                                                        ^ main.adb:429:104:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:20] [@GP_Sloc:main.adb:429:104] (Standard__positive.range_check_((([#"main.adb" 429 0 0] ( [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__token2_decl__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:429:92] [@comment:                  Token2: String := Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1));                                                                                            ^ main.adb:429:92:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__B_3__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                         (  (Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(main__B_3__B_4__B_16__token2__assume)) ));
                          assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__first)) = (Standard__string.first(main__B_3__B_4__B_16__token2__assume))) };
                          assume {  ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__last)) = (Standard__string.last(main__B_3__B_4__B_16__token2__assume))) } )))
                        ;
                         assume {  (if (False) then (
                         true) else (
                         (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__first) (Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__last)))) } ));
                        ();
                        ( [@GP_Sloc:main.adb:431:22] ([#"main.adb" 431 0 0] ()) );
                        ( [@GP_Sloc:main.adb:431:19] ([#"main.adb" 431 0 0] (if (( ([#"main.adb" 431 0 0] [#"main.adb" 431 0 0] (([@branch_id=4112] Main.spark__branch).bool__content <- ( ( (( [#"main.adb" 431 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content in (
                         ()))
                         in () end ;
                        (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__last)))) ) <> (4 : int)) || ( (let i = [#"main.adb" 431 0 0] (val _f : int
                        in _f) in (
                         (if ((Boolean.andb(((Standard__integer__rep.to_rep(( [#"main.adb" 431 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content in (
                          ()))
                          in () end ;
                         Main__B_3__B_4__B_16__token2.token2__first ))) <= i)) ((i <= (Standard__integer__rep.to_rep(( [#"main.adb" 431 0 0] begin ensures {true} let _ = (let _ = Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content in (
                          ()))
                          in () end ;
                         Main__B_3__B_4__B_16__token2.token2__last ))))))) then (
                          [#"main.adb" 431 0 0] begin ensures {true} let _ = (let _ = not ( (Boolean.andb(((48 : int) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content) (( [#"main.adb" 431 0 0] assert { [#"main.adb" 431 0 0] ([#"main.adb" 432 0 0] ( [@comment:                    (for some I in Token2'Range => Token2(I) not in '0' .. '9') then                                                           ^ main.adb:432:59:VC_INDEX_CHECK] [@GP_Id:18] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__if__orelse__forsome__in__ixdcomp] [@GP_Sloc:main.adb:432:59] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__last)) ) )) };
                          i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content) ((  assert {  ([#"main.adb" 432 0 0] ( [@comment:                    (for some I in Token2'Range => Token2(I) not in '0' .. '9') then                                                           ^ main.adb:432:59:VC_INDEX_CHECK] [@GP_Id:18] [@vc:annotation] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__if__orelse__forsome__in__ixdcomp] [@GP_Sloc:main.adb:432:59] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__last)) ) )) };
                          i ))))) <= (57 : int)))) ) in (
                           ()))
                           in () end ))))
                        ;
                         (val _f : bool
                        ensures { ( (result = True) <-> (exists i  : int.
                         ( ( ((Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__first) <= i) /\ (i <= (Standard__integer__rep.to_rep Main__B_3__B_4__B_16__token2.token2__last)) ) /\ ((Boolean.notb (Boolean.andb ((48 : int) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content i)) <= (57 : int)))) = True) )) )} 
                        in _f) ) ) )));
                        ( [@branch_id=4112] Main.spark__branch ).bool__content )) then (
                         ( ();
                         ( [@GP_Sloc:main.adb:433:22] ([#"main.adb" 433 0 0] ()) );
                         ( [@GP_Sloc:main.adb:433:22] ([#"main.adb" 433 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_522.temp___String_Literal_522(()))) ((1 : int)) ((20 : int))))) )) ) )) else (
                         ( ();
                         ( [@GP_Sloc:main.adb:435:40] ([#"main.adb" 435 0 0] ()) );
                         ( [@GP_Sloc:main.adb:435:58] ([#"main.adb" 435 0 0] ()) );
                         ( [@GP_Sloc:main.adb:435:45] ([#"main.adb" 435 0 0] ()) );
                         ( [@GP_Sloc:main.adb:435:28] ([#"main.adb" 435 0 0] ()) );
                         ( [@GP_Sloc:main.adb:435:28] ([#"main.adb" 435 0 0] ( (Locker__try_unlock___axiom.try_unlock(Main__l.l__split_fields) (([#"main.adb" 435 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__B_16_declblk__if__call_try_unlock__call_from_string] [@comment:                     Locker.Try_Unlock(L,PIN.From_String(Token2));                                             ^ main.adb:435:45:VC_PRECONDITION] [@GP_Id:17] [@vc:annotation] [@GP_Sloc:main.adb:435:45] (Pin__from_string___axiom.from_string((Standard__string.of_array(Main__B_3__B_4__B_16__token2.token2.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__B_16__token2.token2__last)))))) )))) )) ) )))) ) )) ) )) else (
                        ( [@GP_Sloc:main.adb:439:13] (if (( ([#"main.adb" 439 0 0] [#"main.adb" 439 0 0] (([@branch_id=4152] Main.spark__branch).bool__content <- ( (let temp___517 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_514.temp___String_Literal_514(())) in (
                         (Array__Int__Standard__character.bool_eq(Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))) (temp___517) ((1 : int)) ((4 : int)))))
                         )));
                        ( [@branch_id=4152] Main.spark__branch ).bool__content )) then (
                          raise Temp___exception_513) else (
                         ( ();
                         ( [@GP_Sloc:main.adb:444:16] ([#"main.adb" 444 0 0] ()) );
                         ( [@GP_Sloc:main.adb:444:16] ([#"main.adb" 444 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((let temp___511 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_510.temp___String_Literal_510(())) in (
                          (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___511) ((1 : int)) ((17 : int)) (Main__B_3__B_4__token1.token1.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last))))) ((1 : int)) (([#"main.adb" 444 0 0] ( [@GP_Id:16] [@vc:annotation] [@GP_Sloc:main.adb:444:45] [@GP_Reason:VC_RANGE_CHECK] [@comment:               Put_Line("Unknown command: " & Token1);                                             ^ main.adb:444:45:VC_RANGE_CHECK] [@GP_Shape:L_2_loop__B_3_declblk__B_4_declblk__if__call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((17 : int))) + (Integer.length((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__first))) ((Standard__integer__rep.to_rep(Main__B_3__B_4__token1.token1__last)))))) - (1 : int)))) ))))))
                         )) )) ) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) ))) )))) );
           ( [@GP_Sloc:main.adb:450:4] ([#"main.adb" 450 0 0] ()) );
           ( [@GP_Sloc:main.adb:451:4] ([#"main.adb" 451 0 0] ()) );
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:53 *)
           ;
           (if (False) then (
             raise Main__L_2.L_2)) )
          done )))
          )))
         )))
        )))
       )
     with
      Temp___exception_677 -> ( ();
      ( [@GP_Sloc:main.adb:120:19] ([#"main.adb" 120 0 0] ()) );
      ( [@GP_Sloc:main.adb:120:19] ([#"main.adb" 120 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_676.temp___String_Literal_676(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:121:19] ([#"main.adb" 121 0 0] [#"main.adb" 121 0 0] raise Return__exc) ) )| 
      Temp___exception_613 -> ( ();
      ( [@GP_Sloc:main.adb:226:19] ([#"main.adb" 226 0 0] ()) );
      ( [@GP_Sloc:main.adb:226:19] ([#"main.adb" 226 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_612.temp___String_Literal_612(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:227:19] ([#"main.adb" 227 0 0] [#"main.adb" 227 0 0] raise Return__exc) ) )| 
      Temp___exception_568 -> ( ();
      ( [@GP_Sloc:main.adb:300:19] ([#"main.adb" 300 0 0] ()) );
      ( [@GP_Sloc:main.adb:300:19] ([#"main.adb" 300 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_567.temp___String_Literal_567(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:301:19] ([#"main.adb" 301 0 0] [#"main.adb" 301 0 0] raise Return__exc) ) )| 
      Temp___exception_584 -> ( ();
      ( [@GP_Sloc:main.adb:276:19] ([#"main.adb" 276 0 0] ()) );
      ( [@GP_Sloc:main.adb:276:19] ([#"main.adb" 276 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_583.temp___String_Literal_583(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:277:19] ([#"main.adb" 277 0 0] [#"main.adb" 277 0 0] raise Return__exc) ) )| 
      Temp___exception_547 -> ( ();
      ( [@GP_Sloc:main.adb:360:19] ([#"main.adb" 360 0 0] ()) );
      ( [@GP_Sloc:main.adb:360:19] ([#"main.adb" 360 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_546.temp___String_Literal_546(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:361:19] ([#"main.adb" 361 0 0] [#"main.adb" 361 0 0] raise Return__exc) ) )| 
      Temp___exception_539 -> ( ();
      ( [@GP_Sloc:main.adb:383:19] ([#"main.adb" 383 0 0] ()) );
      ( [@GP_Sloc:main.adb:383:19] ([#"main.adb" 383 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_538.temp___String_Literal_538(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:384:19] ([#"main.adb" 384 0 0] [#"main.adb" 384 0 0] raise Return__exc) ) )| 
      Temp___exception_615 -> ( ();
      ( [@GP_Sloc:main.adb:231:19] ([#"main.adb" 231 0 0] ()) );
      ( [@GP_Sloc:main.adb:231:19] ([#"main.adb" 231 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_614.temp___String_Literal_614(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:232:19] ([#"main.adb" 232 0 0] [#"main.adb" 232 0 0] raise Return__exc) ) )| 
      Temp___exception_570 -> ( ();
      ( [@GP_Sloc:main.adb:305:19] ([#"main.adb" 305 0 0] ()) );
      ( [@GP_Sloc:main.adb:305:19] ([#"main.adb" 305 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_569.temp___String_Literal_569(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:306:19] ([#"main.adb" 306 0 0] [#"main.adb" 306 0 0] raise Return__exc) ) )| 
      Temp___exception_519 -> ( ();
      ( [@GP_Sloc:main.adb:418:19] ([#"main.adb" 418 0 0] ()) );
      ( [@GP_Sloc:main.adb:418:19] ([#"main.adb" 418 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_518.temp___String_Literal_518(()))) ((1 : int)) ((17 : int))))) )) );
      ( [@GP_Sloc:main.adb:419:19] ([#"main.adb" 419 0 0] [#"main.adb" 419 0 0] raise Return__exc) ) )| 
      Temp___exception_625 -> ( ();
      ( [@GP_Sloc:main.adb:189:19] ([#"main.adb" 189 0 0] ()) );
      ( [@GP_Sloc:main.adb:189:19] ([#"main.adb" 189 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_624.temp___String_Literal_624(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:190:19] ([#"main.adb" 190 0 0] [#"main.adb" 190 0 0] raise Return__exc) ) )| 
      Temp___exception_586 -> ( ();
      ( [@GP_Sloc:main.adb:281:19] ([#"main.adb" 281 0 0] ()) );
      ( [@GP_Sloc:main.adb:281:19] ([#"main.adb" 281 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_585.temp___String_Literal_585(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:282:19] ([#"main.adb" 282 0 0] [#"main.adb" 282 0 0] raise Return__exc) ) )| 
      Temp___exception_549 -> ( ();
      ( [@GP_Sloc:main.adb:365:19] ([#"main.adb" 365 0 0] ()) );
      ( [@GP_Sloc:main.adb:365:19] ([#"main.adb" 365 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_548.temp___String_Literal_548(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:366:19] ([#"main.adb" 366 0 0] [#"main.adb" 366 0 0] raise Return__exc) ) )| 
      Temp___exception_541 -> ( ();
      ( [@GP_Sloc:main.adb:388:19] ([#"main.adb" 388 0 0] ()) );
      ( [@GP_Sloc:main.adb:388:19] ([#"main.adb" 388 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_540.temp___String_Literal_540(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:389:19] ([#"main.adb" 389 0 0] [#"main.adb" 389 0 0] raise Return__exc) ) )| 
      Temp___exception_627 -> ( ();
      ( [@GP_Sloc:main.adb:194:19] ([#"main.adb" 194 0 0] ()) );
      ( [@GP_Sloc:main.adb:194:19] ([#"main.adb" 194 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_626.temp___String_Literal_626(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:195:19] ([#"main.adb" 195 0 0] [#"main.adb" 195 0 0] raise Return__exc) ) )| 
      Temp___exception_521 -> ( ();
      ( [@GP_Sloc:main.adb:424:19] ([#"main.adb" 424 0 0] ()) );
      ( [@GP_Sloc:main.adb:424:19] ([#"main.adb" 424 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_520.temp___String_Literal_520(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:425:19] ([#"main.adb" 425 0 0] [#"main.adb" 425 0 0] raise Return__exc) ) )| 
      Temp___exception_513 -> ( ();
      ( [@GP_Sloc:main.adb:440:16] ([#"main.adb" 440 0 0] ()) );
      ( [@GP_Sloc:main.adb:440:16] ([#"main.adb" 440 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_512.temp___String_Literal_512(()))) ((1 : int)) ((10 : int))))) )) );
      ( [@GP_Sloc:main.adb:441:16] ([#"main.adb" 441 0 0] [#"main.adb" 441 0 0] raise Return__exc) ) )| 
      Temp___exception_596 -> ( ();
      ( [@GP_Sloc:main.adb:250:19] ([#"main.adb" 250 0 0] ()) );
      ( [@GP_Sloc:main.adb:250:19] ([#"main.adb" 250 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_595.temp___String_Literal_595(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:251:19] ([#"main.adb" 251 0 0] [#"main.adb" 251 0 0] raise Return__exc) ) )| 
      Temp___exception_650 -> ( ();
      ( [@GP_Sloc:main.adb:152:19] ([#"main.adb" 152 0 0] ()) );
      ( [@GP_Sloc:main.adb:152:19] ([#"main.adb" 152 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_649.temp___String_Literal_649(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:153:19] ([#"main.adb" 153 0 0] [#"main.adb" 153 0 0] raise Return__exc) ) )| 
      Temp___exception_557 -> ( ();
      ( [@GP_Sloc:main.adb:330:19] ([#"main.adb" 330 0 0] ()) );
      ( [@GP_Sloc:main.adb:330:19] ([#"main.adb" 330 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_556.temp___String_Literal_556(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:331:19] ([#"main.adb" 331 0 0] [#"main.adb" 331 0 0] raise Return__exc) ) )| 
      Temp___exception_598 -> ( ();
      ( [@GP_Sloc:main.adb:255:19] ([#"main.adb" 255 0 0] ()) );
      ( [@GP_Sloc:main.adb:255:19] ([#"main.adb" 255 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_597.temp___String_Literal_597(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:256:19] ([#"main.adb" 256 0 0] [#"main.adb" 256 0 0] raise Return__exc) ) )| 
      Temp___exception_652 -> ( ();
      ( [@GP_Sloc:main.adb:157:19] ([#"main.adb" 157 0 0] ()) );
      ( [@GP_Sloc:main.adb:157:19] ([#"main.adb" 157 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_651.temp___String_Literal_651(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:158:19] ([#"main.adb" 158 0 0] [#"main.adb" 158 0 0] raise Return__exc) ) )| 
      Temp___exception_559 -> ( ();
      ( [@GP_Sloc:main.adb:335:19] ([#"main.adb" 335 0 0] ()) );
      ( [@GP_Sloc:main.adb:335:19] ([#"main.adb" 335 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_558.temp___String_Literal_558(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:336:19] ([#"main.adb" 336 0 0] [#"main.adb" 336 0 0] raise Return__exc) ) )| 
      Temp___exception_490 -> ( ();
      ( [@GP_Sloc:main.adb:78:19] ([#"main.adb" 78 0 0] ()) );
      ( [@GP_Sloc:main.adb:78:19] ([#"main.adb" 78 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_489.temp___String_Literal_489(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:79:19] ([#"main.adb" 79 0 0] [#"main.adb" 79 0 0] raise Return__exc) ) )| 
      Temp___exception_487 -> ( ();
      ( [@GP_Sloc:main.adb:68:13] ([#"main.adb" 68 0 0] ()) );
      ( [@GP_Sloc:main.adb:68:13] ([#"main.adb" 68 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_486.temp___String_Literal_486(()))) ((1 : int)) ((28 : int))))) )) );
      ( [@GP_Sloc:main.adb:69:13] ([#"main.adb" 69 0 0] [#"main.adb" 69 0 0] raise Return__exc) ) )| 
      Temp___exception_492 -> ( ();
      ( [@GP_Sloc:main.adb:83:19] ([#"main.adb" 83 0 0] ()) );
      ( [@GP_Sloc:main.adb:83:19] ([#"main.adb" 83 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_491.temp___String_Literal_491(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:84:19] ([#"main.adb" 84 0 0] [#"main.adb" 84 0 0] raise Return__exc) ) )| 
      Temp___exception_529 -> ( ();
      ( [@GP_Sloc:main.adb:396:19] ([#"main.adb" 396 0 0] ()) );
      ( [@GP_Sloc:main.adb:396:19] ([#"main.adb" 396 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_528.temp___String_Literal_528(()))) ((1 : int)) ((15 : int))))) )) );
      ( [@GP_Sloc:main.adb:397:19] ([#"main.adb" 397 0 0] [#"main.adb" 397 0 0] raise Return__exc) ) )| 
      Temp___exception_675 -> ( ();
      ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] ()) );
      ( [@GP_Sloc:main.adb:115:19] ([#"main.adb" 115 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_674.temp___String_Literal_674(()))) ((1 : int)) ((7 : int))))) )) );
      ( [@GP_Sloc:main.adb:116:19] ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] raise Return__exc) ) )| 
      Temp___exception_531 -> ( ();
      ( [@GP_Sloc:main.adb:401:19] ([#"main.adb" 401 0 0] ()) );
      ( [@GP_Sloc:main.adb:401:19] ([#"main.adb" 401 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_530.temp___String_Literal_530(()))) ((1 : int)) ((31 : int))))) )) );
      ( [@GP_Sloc:main.adb:402:19] ([#"main.adb" 402 0 0] [#"main.adb" 402 0 0] raise Return__exc) ) )
     end
    with
     Main__L_2.L_2 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length___axiom as Main__lines__max_mystring_length___axiom

 let def [#"main.adb" 22 0 0][@GP_Subp:main.adb:22] 
   (__void_param : unit)
  requires { [#"main.adb" 22 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 17 0 0] ());
  ([#"main.adb" 22 0 0] ( [#"main.adb" 22 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"main.adb" 22 0 0] assume { [#"main.adb" 22 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"main.adb" 22 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 20 0 0] ());
  ([#"mystring.ads" 21 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 25 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 35 0 0] ());
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 38 0 0] ());
  ([#"mystring.ads" 40 0 0] ());
  ([#"mystring.ads" 39 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 43 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.ads" 48 0 0] ());
  ([#"mystring.ads" 49 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 54 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ([#"mystring.ads" 57 0 0] ());
  ();
  ([#"mystring.adb" 20 0 0] ());
  ([#"mystring.adb" 27 0 0] ());
  ([#"mystring.adb" 43 0 0] ());
  ([#"mystring.adb" 67 0 0] ());
  ([#"mystring.adb" 86 0 0] ());
  ([#"mystring.adb" 98 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:104:1:instantiated:main.adb:22:4] ([#"mystring.adb" 104 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:18 instantiated at main.adb:22, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Main__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___707 [@mlw:proxy_symbol] [@introduced] =  (val _f : Main__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:35 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length__m as Main__lines__length__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length__m___axiom as Main__lines__length__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__length__result [@model_projected] [@model_trace:29370@result] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 35 0 0][@GP_Subp:mystring.ads:35] 
   (__void_param : unit)
  requires { [#"mystring.ads" 35 0 0] true }
  ensures { [#"mystring.ads" 35 0 0] ([#"mystring.ads" 36 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:88] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:36:14:instantiated:main.adb:22:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:mystring.ads:36:14:instantiated:main.adb:22:4] ( [@GP_Pretty_Ada:29766] [@GP_Sloc:mystring.ads:36:14:instantiated:main.adb:22:4] (main__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:35 instantiated at main.adb:22 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:35 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:35 instantiated at main.adb:22 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:35 instantiated at main.adb:22 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:55:8:instantiated:main.adb:22:4] ([#"mystring.ads" 55 0 0] ( [#"mystring.ads" 55 0 0] (main__lines__length__result.int__content <- ( (Main__lines__mystring__T13b__rep.to_rep(Main__lines__length__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ));
   [#"mystring.ads" 55 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (main__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  main__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:20 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__to_string__result as Main__lines__to_string__result
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
 use        Main__lines__to_string__T144b as Main__lines__to_string__T144b
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Main__lines__to_string__T144b___axiom as Main__lines__to_string__T144b___axiom

 val main__lines__to_string__result [@name:To_String] [@model_projected] [@model_trace:29219@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 20 0 0][@GP_Subp:mystring.ads:20] 
   (__void_param : unit)
  requires { [#"mystring.ads" 20 0 0] true }
  ensures { [#"mystring.ads" 20 0 0] ([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:21:14:instantiated:main.adb:22:4] [@model_vc_post] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:21:14:instantiated:main.adb:22:4:VC_POSTCONDITION] [@GP_Id:95] [@GP_Shape:pragargs__and] ( ( ( [@GP_Sloc:mystring.ads:21:14:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29199] ((Standard__string.length main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_716 : int.
   ( (temp___result_716 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_716 Main__lines__to_string__m.m) ))) ) /\ ( [@GP_Pretty_Ada:29206] [@GP_Sloc:mystring.ads:22:14:instantiated:main.adb:22:4] ((Standard__string.first main__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Sloc:mystring.ads:22:45:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29211] ((Standard__string.last main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_717 : int.
   ( (temp___result_717 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_717 Main__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:20 instantiated at main.adb:22 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:20 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:20 instantiated at main.adb:22 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:20 instantiated at main.adb:22 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 21 0 0] ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 21 0 0] [#"mystring.adb" 21 0 0] (val _f : unit
   requires {( [@GP_Sloc:mystring.adb:21:7:instantiated:main.adb:22:4] [@GP_Id:89] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:21:7:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [#"mystring.adb" 21 0 0] ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 21 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 21 0 0] ( [#"mystring.adb" 21 0 0] assume { [#"mystring.adb" 21 0 0] (Main__lines__to_string__TresultS___axiom.default_initial_assumption (Main__lines__to_string__TresultS.of_array Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 21 0 0] assume { [#"mystring.adb" 21 0 0] (if (False) then (
    true) else (
    ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:23:7:instantiated:main.adb:22:4] ([#"mystring.adb" 23 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:23:14:instantiated:main.adb:22:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Main__lines__to_string__TresultS.to_array (let temp___715 [@mlw:proxy_symbol] [@introduced] = (let temp___714 [@mlw:proxy_symbol] [@introduced] = (let temp___713 [@mlw:proxy_symbol] [@introduced] = (let temp___711 [@mlw:proxy_symbol] [@introduced] = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
   (let temp___710 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___712 [@mlw:proxy_symbol] [@introduced] = Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Main__lines__to_string__T144b.of_array(( [#"mystring.adb" 23 0 0] assert { [#"mystring.adb" 23 0 0] ([#"mystring.adb" 23 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:23:25:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@GP_Id:90] [@GP_Sloc:mystring.adb:23:25:instantiated:main.adb:22:4] ( (temp___710 <= temp___711) -> ( ( (Main__lines__TmystringstrD1.first <= temp___710) /\ (temp___710 <= Main__lines__TmystringstrD1.last) ) /\ ( (Main__lines__TmystringstrD1.first <= temp___711) /\ (temp___711 <= Main__lines__TmystringstrD1.last) ) ) ) )) };
    temp___712 )) (temp___710) (temp___711))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:23:25:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@GP_Id:91] [@GP_Sloc:mystring.adb:23:25:instantiated:main.adb:22:4] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Main__lines__to_string__T144b.first(temp___713))) ((Main__lines__to_string__T144b.last(temp___713)))) )) };
    (Standard__string.of_array((Main__lines__to_string__T144b.to_array(temp___713))) ((Main__lines__to_string__T144b.first(temp___713))) ((Main__lines__to_string__T144b.last(temp___713)))) )))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@GP_Sloc:mystring.adb:23:17:instantiated:main.adb:22:4] [@vc:annotation] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:23:17:instantiated:main.adb:22:4:VC_LENGTH_CHECK] [@GP_Shape:result_assign__typeconv] [@GP_Id:92] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___714) <= (Standard__string.last temp___714))) then (
     ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ (((Standard__string.last temp___714) - (Standard__string.first temp___714)) = ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) - (1 : int))) )) else (
     ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) < (1 : int)))) ) )) };
    (Main__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___714))) ((Standard__string.first(temp___714))) ((1 : int)))) ((1 : int)) ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 23 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:23:14:instantiated:main.adb:22:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:result_assign] [@GP_Sloc:mystring.adb:23:14:instantiated:main.adb:22:4] [@GP_Id:93] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Main__lines__to_string__TresultS.first temp___715) <= (Main__lines__to_string__TresultS.last temp___715))) then (
     ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ (((Main__lines__to_string__TresultS.last temp___715) - (Main__lines__to_string__TresultS.first temp___715)) = ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first)))) ) )) };
    temp___715 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:24:14:instantiated:main.adb:22:4] ([#"mystring.adb" 24 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:24:7:instantiated:main.adb:22:4] ([#"mystring.adb" 24 0 0] ( [#"mystring.adb" 24 0 0] (main__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 24 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 21 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@GP_Sloc:mystring.ads:21:30:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:94] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:21:30:instantiated:main.adb:22:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 21 0 0] begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(main__lines__to_string__result.Standard__string.string__content)) ))) )) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(main__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(main__lines__to_string__result.Standard__string.string__content)) ) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  main__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:28 instantiated at main.adb:22, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_718___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_718 as Temp_____aggregate_def_718
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___720   : int.
   (let temp___719 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_718.temp_____aggregate_def_718 temp___720) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___720 True True True True)) then (
     (forall temp___721   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___719 temp___721)) = temp___720))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:24 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__from_string__m as Main__lines__from_string__m
 use        Main__lines__from_string__j as Main__lines__from_string__j
 use        Main__lines__from_string__L_1__i as Main__lines__from_string__L_1__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__from_string__L_1 as Main__lines__from_string__L_1
 use        Main__lines__from_string__L_1__T149b as Main__lines__from_string__L_1__T149b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_718 as Temp_____aggregate_def_718
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__from_string__s___axiom as Main__lines__from_string__s___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__from_string__m___axiom as Main__lines__from_string__m___axiom
 use        Main__lines__from_string__j___axiom as Main__lines__from_string__j___axiom
 use        Main__lines__from_string__L_1___axiom as Main__lines__from_string__L_1___axiom
 use        Main__lines__from_string__L_1__i___axiom as Main__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_718___axiom as Temp_____aggregate_def_718___axiom
 use        Main__lines__from_string__L_1__T149b___axiom as Main__lines__from_string__L_1__T149b___axiom

 val main__lines__from_string__result [@model_trace:29253@result] [@name:From_String] [@model_projected]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 24 0 0][@GP_Subp:mystring.ads:24] 
   (__void_param : unit)
  requires { [#"mystring.ads" 24 0 0] true }
  ensures { [#"mystring.ads" 24 0 0] ([#"mystring.ads" 26 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:26:15:instantiated:main.adb:22:4] [@model_vc_post] [@GP_Id:106] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:26:15:instantiated:main.adb:22:4:VC_POSTCONDITION] ( [@GP_Sloc:mystring.ads:26:15:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29698] ((epsilon temp___result_734 : int.
   ( (temp___result_734 = (Main__lines__length.length main__lines__from_string__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_734 main__lines__from_string__result.Main__lines__mystring.mystring__content) )) = (Standard__string.length Main__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:24 instantiated at main.adb:22 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Main__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:24 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:24 instantiated at main.adb:22 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 25 0 0] ( [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:25:15:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@GP_Id:105] [@GP_Sloc:mystring.ads:25:15:instantiated:main.adb:22:4] (Standard__integer.range_check_(( [#"mystring.ads" 25 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:24 instantiated at main.adb:22 *)
  ;
   assume {  ( [@GP_Pretty_Ada:29684] ((Standard__string.length Main__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 27 0 0] ());
   ([#"mystring.adb" 28 0 0] ( (let main__lines__from_string__m__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = ( 0 : Main__lines__mystring__T13b.t13b ); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_718.temp_____aggregate_def_718((32 : int))) } } in (
    [#"mystring.adb" 28 0 0] (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__from_string__m__assume.Main__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 28 0 0] assume { [#"mystring.adb" 28 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 29 0 0] ());
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Main__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 35 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:main.adb:22:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=33368] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 31 0 0] ( [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:31:11:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:31:11:instantiated:main.adb:22:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Id:97] (Standard__integer.range_check_(( [#"mystring.adb" 31 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Main__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=33368] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:22:4] ([#"mystring.adb" 32 0 0] ([#"mystring.adb" 32 0 0] ( [@GP_Reason:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:22:4] [@comment:         raise Constraint_Error;          ^ mystring.adb:32:10:instantiated:main.adb:22:4:VC_RAISE] [@GP_Id:96] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:34:7:instantiated:main.adb:22:4] ([#"mystring.adb" 34 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:34:16:instantiated:main.adb:22:4] ([#"mystring.adb" 34 0 0] (let temp___723 [@mlw:proxy_symbol] [@introduced] = (let temp___722 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 34 0 0] begin ensures {true} let _ = (let _ = temp___722.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___722 ) with Main__lines__mystring.__split_fields = { ( temp___722.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 34 0 0] ( [@GP_Sloc:mystring.adb:34:20:instantiated:main.adb:22:4] [@vc:annotation] [@comment:      M.Length := S'Length;                    ^ mystring.adb:34:20:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] [@GP_Id:98] (Main__lines__mystring__T13b.range_check_(( [#"mystring.adb" 34 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Main__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___723.Main__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:35:24:instantiated:main.adb:22:4] ([#"mystring.adb" 35 0 0] (let temp___724 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Main__lines__from_string__s.s)) ) in (
   (let temp___725 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Main__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 35 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( temp___724 ));
    () (* Translation of an Ada loop from mystring.adb:35 instantiated at main.adb:22 *)
    ;
    (if ((Boolean.andb((temp___724 <= Main__lines__from_string__L_1__i.i.int__content)) ((Main__lines__from_string__L_1__i.i.int__content <= temp___725)))) then (
     [#"mystring.adb" 35 0 0] try
      ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__L_1__i.i.int__content in (
       ()))
       in () end ;
      (let temp___732 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : int
      ensures {[#"mystring.adb" 35 0 0] (result = Main__lines__from_string__L_1__i.i.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__j.j.int__content in (
        ()))
        in () end ;
       (let temp___731 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : int
       ensures {[#"mystring.adb" 35 0 0] (result = Main__lines__from_string__j.j.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 35 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___729 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 35 0 0] (val _f : Main__lines__mystring.mystring
        ensures {[#"mystring.adb" 35 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content })} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:35 instantiated at main.adb:22 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:35 instantiated at main.adb:22 *)
         ;
         (let temp___inv_733 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 36 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:102] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:36:49:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:36:49:instantiated:main.adb:22:4] (Standard__integer.range_check_((([#"mystring.adb" 36 0 0] ( [@GP_Sloc:mystring.adb:36:39:instantiated:main.adb:22:4] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:36:39:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:101] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 36 0 0] ( [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:36:33:instantiated:main.adb:22:4:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:36:33:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Id:103] ( [@GP_Pretty_Ada:33396] [@GP_Sloc:mystring.adb:36:33:instantiated:main.adb:22:4] (Main__lines__from_string__j.j.int__content = ((Main__lines__from_string__L_1__i.i.int__content - (Standard__string.first Main__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:35 instantiated at main.adb:22 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___729.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) ) /\ (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Main__lines__from_string__s.s) <= (Standard__string.last Main__lines__from_string__s.s)) )) then (
           (Main__lines__from_string__L_1__T149b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) Main__lines__from_string__L_1__i.i.int__content)) else true) )/\true )) (( ((Standard__string.first Main__lines__from_string__s.s) <= Main__lines__from_string__L_1__i.i.int__content) /\ (Main__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Main__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:35 instantiated at main.adb:22 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:35 instantiated at main.adb:22 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:37:10:instantiated:main.adb:22:4] ([#"mystring.adb" 37 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:37:16:instantiated:main.adb:22:4] ([#"mystring.adb" 37 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:37:19:instantiated:main.adb:22:4] ([#"mystring.adb" 37 0 0] (let temp___728 [@mlw:proxy_symbol] [@introduced] = (let temp___727 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 37 0 0] begin ensures {true} let _ = (let _ = temp___727.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___727 ) with Main__lines__mystring.__split_fields = { ( temp___727.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___726 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 37 0 0] assert { [#"mystring.adb" 37 0 0] ([#"mystring.adb" 37 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:37:16:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:37:16:instantiated:main.adb:22:4] [@GP_Id:99] ( (Main__lines__TmystringstrD1.first <= Main__lines__from_string__j.j.int__content) /\ (Main__lines__from_string__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__lines__from_string__s.s))) (Main__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___728.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:38:10:instantiated:main.adb:22:4] ([#"mystring.adb" 38 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:38:15:instantiated:main.adb:22:4] ([#"mystring.adb" 38 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:38:12:instantiated:main.adb:22:4] ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (Main__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 38 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@vc:annotation] [@GP_Sloc:mystring.adb:38:17:instantiated:main.adb:22:4] [@comment:         J := J + 1;                 ^ mystring.adb:38:17:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:100] (Standard__integer.range_check_((Main__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:35 instantiated at main.adb:22 *)
          ;
          (if ((Main__lines__from_string__L_1__i.i.int__content = temp___725)) then (
            raise Main__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 35 0 0] [#"mystring.adb" 35 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( (Main__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_733 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 36 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:102] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:36:49:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:36:49:instantiated:main.adb:22:4] (Standard__integer.range_check_((([#"mystring.adb" 36 0 0] ( [@GP_Sloc:mystring.adb:36:39:instantiated:main.adb:22:4] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:36:39:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:101] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:40:14:instantiated:main.adb:22:4] ([#"mystring.adb" 40 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:40:7:instantiated:main.adb:22:4] ([#"mystring.adb" 40 0 0] ( [#"mystring.adb" 40 0 0] (main__lines__from_string__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 40 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__from_string__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 26 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.ads:26:45:instantiated:main.adb:22:4] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:104] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:26:45:instantiated:main.adb:22:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 26 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  main__lines__from_string__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:28 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less__m1 as Main__lines__less__m1
 use        Main__lines__less__m2 as Main__lines__less__m2
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__less__i as Main__lines__less__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__less__L_2 as Main__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__less__m1___axiom as Main__lines__less__m1___axiom
 use        Main__lines__less__m2___axiom as Main__lines__less__m2___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__less__i___axiom as Main__lines__less__i___axiom
 use        Main__lines__less__L_2___axiom as Main__lines__less__L_2___axiom

 val main__lines__less__result [@model_trace:29272@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"mystring.ads" 28 0 0][@GP_Subp:mystring.ads:28] 
   (__void_param : unit)
  requires { [#"mystring.ads" 28 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:28 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 28 0 0] assume { [#"mystring.ads" 28 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 28 0 0] assume { [#"mystring.ads" 28 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:28 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:28 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 28 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:28 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 28 0 0] try
   ( ();
   ([#"mystring.adb" 44 0 0] ( [#"mystring.adb" 44 0 0] (Main__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 44 0 0] assume { [#"mystring.adb" 44 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 51 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:46:7:instantiated:main.adb:22:4] ([#"mystring.adb" 46 0 0] (if (( ([#"mystring.adb" 46 0 0] [#"mystring.adb" 46 0 0] (([@branch_id=33525] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) < (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=33525] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:47:10:instantiated:main.adb:22:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 47 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:48:7:instantiated:main.adb:22:4] (if (( ([#"mystring.adb" 48 0 0] [#"mystring.adb" 48 0 0] (([@branch_id=33535] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) > (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
    ( [@branch_id=33535] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:49:10:instantiated:main.adb:22:4] ([#"mystring.adb" 49 0 0] ( [#"mystring.adb" 49 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 49 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:51:35:instantiated:main.adb:22:4] ([#"mystring.adb" 51 0 0] ( () (* Translation of an Ada loop from mystring.adb:51 instantiated at main.adb:22 *)
     ;
     (if ((Main__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 51 0 0] try
       ( [#"mystring.adb" 51 0 0] begin ensures {true} let _ = (let _ = Main__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___739 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 51 0 0] (val _f : int
       ensures {[#"mystring.adb" 51 0 0] (result = Main__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:51 instantiated at main.adb:22 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:51 instantiated at main.adb:22 *)
        ;
        (let temp___inv_740 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 51 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 51 0 0] while True do
         invariant { 
          ([#"mystring.adb" 52 0 0] ( [@GP_Sloc:mystring.adb:52:36:instantiated:main.adb:22:4] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Id:112] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:52:36:instantiated:main.adb:22:4:VC_LOOP_INVARIANT] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Pretty_Ada:33556] [@GP_Sloc:mystring.adb:52:36:instantiated:main.adb:22:4] (Main__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:51 instantiated at main.adb:22 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True True True True) )/\true )) ((Main__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:51 instantiated at main.adb:22 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:51 instantiated at main.adb:22 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:53:23:instantiated:main.adb:22:4] ([#"mystring.adb" 53 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:53:35:instantiated:main.adb:22:4] ([#"mystring.adb" 53 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:53:13:instantiated:main.adb:22:4] ([#"mystring.adb" 53 0 0] (if (( ([#"mystring.adb" 53 0 0] [#"mystring.adb" 53 0 0] (([@branch_id=33563] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___737 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___737) (( [#"mystring.adb" 53 0 0] assert { [#"mystring.adb" 53 0 0] ([#"mystring.adb" 53 0 0] ( [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:53:23:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:53:23:instantiated:main.adb:22:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:110] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___738 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___738) ((  assert {  ([#"mystring.adb" 53 0 0] ( [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:53:35:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:53:35:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Id:111] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=33563] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:54:16:instantiated:main.adb:22:4] ([#"mystring.adb" 54 0 0] ( [#"mystring.adb" 54 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 54 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:55:13:instantiated:main.adb:22:4] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=33577] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___735 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___735) (( [#"mystring.adb" 55 0 0] assert { [#"mystring.adb" 55 0 0] ([#"mystring.adb" 55 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:55:26:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:108] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:55:26:instantiated:main.adb:22:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___736 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___736) ((  assert {  ([#"mystring.adb" 55 0 0] ( [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:55:38:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:55:38:instantiated:main.adb:22:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:109] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=33577] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:56:16:instantiated:main.adb:22:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:58:16:instantiated:main.adb:22:4] ([#"mystring.adb" 58 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:58:21:instantiated:main.adb:22:4] ([#"mystring.adb" 58 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:58:18:instantiated:main.adb:22:4] ([#"mystring.adb" 58 0 0] [#"mystring.adb" 58 0 0] (Main__lines__less__i.i.int__content <- ( ([#"mystring.adb" 58 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@GP_Id:107] [@comment:               I := I + 1;                       ^ mystring.adb:58:23:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:58:23:instantiated:main.adb:22:4] (Standard__integer.range_check_((Main__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:51 instantiated at main.adb:22 *)
         ;
         (if (not ( (Main__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Main__lines__less__L_2.L_2));
         (let temp___inv_740 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Main__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:62:10:instantiated:main.adb:22:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 62 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:42 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m as Main__lines__get__m
 use        Main__lines__get__index as Main__lines__get__index
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m___axiom as Main__lines__get__m___axiom
 use        Main__lines__get__index___axiom as Main__lines__get__index___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__get__result [@model_projected] [@name:Get] [@model_trace:29456@result]  : int__ref 
 
 let def [#"mystring.ads" 42 0 0][@GP_Subp:mystring.ads:42] 
   (__void_param : unit)
  requires { [#"mystring.ads" 42 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:42 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__get__m.m True False True True) };
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:42 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:42 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 42 0 0] begin ensures {true} let _ = (let _ = (Main__lines__get__index.index <= (Main__lines__length___axiom.length(Main__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:42 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 42 0 0] assume { [#"mystring.ads" 42 0 0] ( [@GP_Pretty_Ada:29834] (Main__lines__get__index.index <= (epsilon temp___result_742 : int.
   ( (temp___result_742 = (Main__lines__length.length Main__lines__get__m.m)) /\ (Main__lines__length.length__function_guard temp___result_742 Main__lines__get__m.m) ))) ) };
  [#"mystring.ads" 42 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:58:8:instantiated:main.adb:22:4] ([#"mystring.ads" 58 0 0] ( [#"mystring.ads" 58 0 0] (main__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___741 [@mlw:proxy_symbol] [@introduced] = Main__lines__get__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___741) (( [#"mystring.ads" 58 0 0] assert { [#"mystring.ads" 58 0 0] ([#"mystring.ads" 58 0 0] ( [@GP_Shape:return__ixdcomp] [@comment:     (M.Str(Index));             ^ mystring.ads:58:13:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.ads:58:13:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Id:113] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__get__index.index) /\ (Main__lines__get__index.index <= Main__lines__TmystringstrD1.last) ) )) };
    Main__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:30 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__equal__m1 as Main__lines__equal__m1
 use        Main__lines__equal__m2 as Main__lines__equal__m2
 use        Main__lines__get as Main__lines__get
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__equal__i as Main__lines__equal__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__equal__L_3 as Main__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__equal__m1___axiom as Main__lines__equal__m1___axiom
 use        Main__lines__equal__m2___axiom as Main__lines__equal__m2___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__equal__i___axiom as Main__lines__equal__i___axiom
 use        Main__lines__equal__L_3___axiom as Main__lines__equal__L_3___axiom

 val main__lines__equal__result [@name:Equal] [@model_projected] [@model_trace:29336@result]  : bool__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
  ensures { [#"mystring.ads" 30 0 0] ([#"mystring.ads" 31 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:31:15:instantiated:main.adb:22:4] [@GP_Id:123] [@model_vc_post] [@GP_Shape:pragargs__if] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:31:15:instantiated:main.adb:22:4:VC_POSTCONDITION] (if ((main__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:29305] [@GP_Sloc:mystring.ads:32:11:instantiated:main.adb:22:4] ((epsilon temp___result_756 : int.
    ( (temp___result_756 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_756 Main__lines__equal__m1.m1) )) = (epsilon temp___result_757 : int.
    ( (temp___result_757 = (Main__lines__length.length Main__lines__equal__m2.m2)) /\ (Main__lines__length.length__function_guard temp___result_757 Main__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 31 0 0]  [@model_trace:29323] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_758 : int.
     ( (temp___result_758 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_758 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:33:40:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29313] ((epsilon temp___result_759 : int.
     ( (temp___result_759 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_759 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_760 : int.
     ( (temp___result_760 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_760 Main__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Sloc:mystring.ads:31:15:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29912] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at main.adb:22 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m1.m1 True False True True) };
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at main.adb:22 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at main.adb:22 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 68 0 0] ( [#"mystring.adb" 68 0 0] (Main__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 68 0 0] assume { [#"mystring.adb" 68 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:70:7:instantiated:main.adb:22:4] ([#"mystring.adb" 70 0 0] (if (( ([#"mystring.adb" 70 0 0] [#"mystring.adb" 70 0 0] (([@branch_id=33714] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) <> (Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=33714] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:71:10:instantiated:main.adb:22:4] ([#"mystring.adb" 71 0 0] ( [#"mystring.adb" 71 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 71 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:73:35:instantiated:main.adb:22:4] ([#"mystring.adb" 73 0 0] ( () (* Translation of an Ada loop from mystring.adb:73 instantiated at main.adb:22 *)
    ;
    (if ((Main__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 73 0 0] try
      ( [#"mystring.adb" 73 0 0] begin ensures {true} let _ = (let _ = Main__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___745 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 73 0 0] (val _f : int
      ensures {[#"mystring.adb" 73 0 0] (result = Main__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:73 instantiated at main.adb:22 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:73 instantiated at main.adb:22 *)
       ;
       (let temp___inv_746 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 73 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:54:instantiated:main.adb:22:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:75:54:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:117] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___747 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___747) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:75:67:instantiated:main.adb:22:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:75:67:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Id:118] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___748 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___748) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:75:79:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Id:119] [@GP_Sloc:mystring.adb:75:79:instantiated:main.adb:22:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@name:J] [@model_trace:33755]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___749 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___749 j)))
        ) = (Standard__character__rep.to_rep (let temp___750 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___750 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 74 0 0] ( [@GP_Id:120] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:74:36:instantiated:main.adb:22:4:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:if__L_3_while__pragargs__and] [@GP_Sloc:mystring.adb:74:36:instantiated:main.adb:22:4] ( ( [@GP_Pretty_Ada:33736] [@GP_Sloc:mystring.adb:74:36:instantiated:main.adb:22:4] (Main__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 74 0 0]  [@name:J] [@model_trace:33755]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Pretty_Ada:33743] [@GP_Sloc:mystring.adb:75:60:instantiated:main.adb:22:4] ((Standard__character__rep.to_rep (let temp___751 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___751 j)))
          ) = (Standard__character__rep.to_rep (let temp___752 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___752 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:73 instantiated at main.adb:22 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True True True True) )/\true )) ((Main__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:73 instantiated at main.adb:22 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:73 instantiated at main.adb:22 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:76:23:instantiated:main.adb:22:4] ([#"mystring.adb" 76 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:76:36:instantiated:main.adb:22:4] ([#"mystring.adb" 76 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:76:13:instantiated:main.adb:22:4] ([#"mystring.adb" 76 0 0] (if (( ([#"mystring.adb" 76 0 0] [#"mystring.adb" 76 0 0] (([@branch_id=33768] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___743 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___743) (( [#"mystring.adb" 76 0 0] assert { [#"mystring.adb" 76 0 0] ([#"mystring.adb" 76 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@GP_Sloc:mystring.adb:76:23:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Id:115] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:76:23:instantiated:main.adb:22:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___744 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___744) ((  assert {  ([#"mystring.adb" 76 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Id:116] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:76:36:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:76:36:instantiated:main.adb:22:4] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=33768] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:22:4] ([#"mystring.adb" 77 0 0] ( [#"mystring.adb" 77 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 77 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:79:16:instantiated:main.adb:22:4] ([#"mystring.adb" 79 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:79:21:instantiated:main.adb:22:4] ([#"mystring.adb" 79 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:79:18:instantiated:main.adb:22:4] ([#"mystring.adb" 79 0 0] [#"mystring.adb" 79 0 0] (Main__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 79 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:79:23:instantiated:main.adb:22:4] [@GP_Id:114] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:               I := I + 1;                       ^ mystring.adb:79:23:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:73 instantiated at main.adb:22 *)
        ;
        (if (not ( (Main__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Main__lines__equal__L_3.L_3));
        (let temp___inv_746 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 75 0 0] ( [@GP_Sloc:mystring.adb:75:54:instantiated:main.adb:22:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:75:54:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:117] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___747 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___747) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:75:67:instantiated:main.adb:22:4] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:75:67:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Id:118] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___748 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___748) ((  assert {  ([#"mystring.adb" 75 0 0] ( [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:75:79:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Id:119] [@GP_Sloc:mystring.adb:75:79:instantiated:main.adb:22:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@name:J] [@model_trace:33755]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___749 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___749 j)))
         ) = (Standard__character__rep.to_rep (let temp___750 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___750 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Main__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:82:10:instantiated:main.adb:22:4] ([#"mystring.adb" 82 0 0] ( [#"mystring.adb" 82 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 82 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (main__lines__equal__result.bool__content) then (
   (Boolean.andb(((Main__lines__length___axiom.length(Main__lines__equal__m1.m1)) = (Main__lines__length___axiom.length(Main__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Main__lines__length___axiom.length(Main__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 33 0 0] ( [@GP_Id:121] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:mystring.ads:33:40:instantiated:main.adb:22:4] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:33:40:instantiated:main.adb:22:4:VC_PRECONDITION] (Main__lines__get___axiom.get(Main__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 33 0 0] ( [@GP_Id:122] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:33:52:instantiated:main.adb:22:4:VC_PRECONDITION] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Sloc:mystring.ads:33:52:instantiated:main.adb:22:4] (Main__lines__get___axiom.get(Main__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:29323] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_753 : int.
     ( (temp___result_753 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_753 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:29313] ((epsilon temp___result_754 : int.
     ( (temp___result_754 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_754 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_755 : int.
     ( (temp___result_755 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_755 Main__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  main__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:87 instantiated at main.adb:22, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_761___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_761 as Temp_____aggregate_def_761
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___763   : int.
   (let temp___762 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_761.temp_____aggregate_def_761 temp___763) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___763 True True True True)) then (
     (forall temp___764   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___762 temp___764)) = temp___763))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:38 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m as Main__lines__substring__m
 use        Main__lines__substring__from as Main__lines__substring__from
 use        Main__lines__substring__to as Main__lines__substring__to
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__substring__r as Main__lines__substring__r
 use        Main__lines__substring__j as Main__lines__substring__j
 use        Main__lines__substring__L_4__i as Main__lines__substring__L_4__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__substring__L_4 as Main__lines__substring__L_4
 use        Main__lines__substring__L_4__T165b as Main__lines__substring__L_4__T165b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_761 as Temp_____aggregate_def_761
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m___axiom as Main__lines__substring__m___axiom
 use        Main__lines__substring__from___axiom as Main__lines__substring__from___axiom
 use        Main__lines__substring__to___axiom as Main__lines__substring__to___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__substring__r___axiom as Main__lines__substring__r___axiom
 use        Main__lines__substring__j___axiom as Main__lines__substring__j___axiom
 use        Main__lines__substring__L_4___axiom as Main__lines__substring__L_4___axiom
 use        Main__lines__substring__L_4__i___axiom as Main__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_761___axiom as Temp_____aggregate_def_761___axiom
 use        Main__lines__substring__L_4__T165b___axiom as Main__lines__substring__L_4__T165b___axiom

 val main__lines__substring__result [@model_projected] [@name:Substring] [@model_trace:29412@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 38 0 0][@GP_Subp:mystring.ads:38] 
   (__void_param : unit)
  requires { [#"mystring.ads" 38 0 0] true }
  ensures { [#"mystring.ads" 38 0 0] ([#"mystring.ads" 40 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:40:14:instantiated:main.adb:22:4] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:40:14:instantiated:main.adb:22:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:133] ( [@GP_Sloc:mystring.ads:40:14:instantiated:main.adb:22:4] [@GP_Pretty_Ada:29807] ((epsilon temp___result_777 : int.
   ( (temp___result_777 = (Main__lines__length.length main__lines__substring__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_777 main__lines__substring__result.Main__lines__mystring.mystring__content) )) = ((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:38 instantiated at main.adb:22 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:38 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:38 instantiated at main.adb:22 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Main__lines__substring__from.from <= Main__lines__substring__to.to__)) ((Main__lines__substring__to.to__ <= (Main__lines__length___axiom.length(Main__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:38 instantiated at main.adb:22 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:29391] (Main__lines__substring__from.from <= Main__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:29394] (Main__lines__substring__to.to__ <= (epsilon temp___result_776 : int.
   ( (temp___result_776 = (Main__lines__length.length Main__lines__substring__m.m)) /\ (Main__lines__length.length__function_guard temp___result_776 Main__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 87 0 0] ( (let main__lines__substring__r__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 87 0 0] ( [@GP_Id:125] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:87:44:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:87:44:instantiated:main.adb:22:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Main__lines__mystring__T13b.range_check_(([#"mystring.adb" 87 0 0] ( [@GP_Id:124] [@vc:annotation] [@GP_Sloc:mystring.adb:87:44:instantiated:main.adb:22:4] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:87:44:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) )))) )))); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_761.temp_____aggregate_def_761((32 : int))) } } in (
     (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__substring__r__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 88 0 0] ());
   ([#"mystring.adb" 88 0 0] ( [#"mystring.adb" 88 0 0] (Main__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 88 0 0] assume { [#"mystring.adb" 88 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 90 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:90:25:instantiated:main.adb:22:4] ([#"mystring.adb" 90 0 0] (let temp___765 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__from.from in (
   (let temp___766 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__to.to__ in (
    ( [#"mystring.adb" 90 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( temp___765 ));
    () (* Translation of an Ada loop from mystring.adb:90 instantiated at main.adb:22 *)
    ;
    (if ((Boolean.andb((temp___765 <= Main__lines__substring__L_4__i.i.int__content)) ((Main__lines__substring__L_4__i.i.int__content <= temp___766)))) then (
     [#"mystring.adb" 90 0 0] try
      ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__L_4__i.i.int__content in (
       ()))
       in () end ;
      (let temp___774 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : int
      ensures {[#"mystring.adb" 90 0 0] (result = Main__lines__substring__L_4__i.i.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__j.j.int__content in (
        ()))
        in () end ;
       (let temp___773 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : int
       ensures {[#"mystring.adb" 90 0 0] (result = Main__lines__substring__j.j.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 90 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___771 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 90 0 0] (val _f : Main__lines__mystring.mystring
        ensures {[#"mystring.adb" 90 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content })} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:90 instantiated at main.adb:22 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:90 instantiated at main.adb:22 *)
         ;
         (let temp___inv_775 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 91 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:130] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:91:46:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:91:46:instantiated:main.adb:22:4] (Standard__integer.range_check_((([#"mystring.adb" 91 0 0] ( [@GP_Sloc:mystring.adb:91:39:instantiated:main.adb:22:4] [@GP_Id:129] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:91:39:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 91 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:91:33:instantiated:main.adb:22:4:VC_LOOP_INVARIANT] [@GP_Shape:L_4_while__pragargs__cmp] [@GP_Sloc:mystring.adb:91:33:instantiated:main.adb:22:4] [@GP_Id:131] ( [@GP_Pretty_Ada:33930] [@GP_Sloc:mystring.adb:91:33:instantiated:main.adb:22:4] (Main__lines__substring__j.j.int__content = ((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:90 instantiated at main.adb:22 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___771.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) ) /\ (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Main__lines__substring__from.from <= Main__lines__substring__to.to__) )) then (
           (Main__lines__substring__L_4__T165b.dynamic_property Main__lines__substring__from.from Main__lines__substring__to.to__ Main__lines__substring__L_4__i.i.int__content)) else true) )/\true )) (( (Main__lines__substring__from.from <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:90 instantiated at main.adb:22 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:90 instantiated at main.adb:22 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:92:10:instantiated:main.adb:22:4] ([#"mystring.adb" 92 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:92:16:instantiated:main.adb:22:4] ([#"mystring.adb" 92 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:92:19:instantiated:main.adb:22:4] ([#"mystring.adb" 92 0 0] (let temp___770 [@mlw:proxy_symbol] [@introduced] = (let temp___769 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 92 0 0] begin ensures {true} let _ = (let _ = temp___769.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___769 ) with Main__lines__mystring.__split_fields = { ( temp___769.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___768 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 92 0 0] assert { [#"mystring.adb" 92 0 0] ([#"mystring.adb" 92 0 0] ( [@GP_Sloc:mystring.adb:92:16:instantiated:main.adb:22:4] [@GP_Id:127] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:92:16:instantiated:main.adb:22:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__j.j.int__content) /\ (Main__lines__substring__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___767 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___767) ((  assert {  ([#"mystring.adb" 92 0 0] ( [@GP_Id:126] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:92:28:instantiated:main.adb:22:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:92:28:instantiated:main.adb:22:4:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
             Main__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___770.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:93:10:instantiated:main.adb:22:4] ([#"mystring.adb" 93 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:93:15:instantiated:main.adb:22:4] ([#"mystring.adb" 93 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:93:12:instantiated:main.adb:22:4] ([#"mystring.adb" 93 0 0] [#"mystring.adb" 93 0 0] (Main__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 93 0 0] ( [@comment:         J := J + 1;                 ^ mystring.adb:93:17:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Id:128] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:93:17:instantiated:main.adb:22:4] [@GP_Shape:L_4_while__j_assign__add] (Standard__integer.range_check_((Main__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:90 instantiated at main.adb:22 *)
          ;
          (if ((Main__lines__substring__L_4__i.i.int__content = temp___766)) then (
            raise Main__lines__substring__L_4.L_4));
          ([#"mystring.adb" 90 0 0] [#"mystring.adb" 90 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( (Main__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_775 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 91 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:130] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:91:46:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:91:46:instantiated:main.adb:22:4] (Standard__integer.range_check_((([#"mystring.adb" 91 0 0] ( [@GP_Sloc:mystring.adb:91:39:instantiated:main.adb:22:4] [@GP_Id:129] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:91:39:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:95:14:instantiated:main.adb:22:4] ([#"mystring.adb" 95 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:95:7:instantiated:main.adb:22:4] ([#"mystring.adb" 95 0 0] ( [#"mystring.adb" 95 0 0] (main__lines__substring__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 95 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__substring__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 40 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] [@GP_Id:132] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:40:51:instantiated:main.adb:22:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.ads:40:51:instantiated:main.adb:22:4] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  main__lines__substring__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:45 instantiated at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__get_line__m as Main__lines__get_line__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__get_line__m___axiom as Main__lines__get_line__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [#"mystring.ads" 45 0 0][@GP_Subp:mystring.ads:45] 
   (__void_param : unit)
  requires { [#"mystring.ads" 45 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:45 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 45 0 0] assume { [#"mystring.ads" 45 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:45 instantiated at main.adb:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:45 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 45 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:45 instantiated at main.adb:22 *)
  ;
  [#"mystring.ads" 45 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:100:18:instantiated:main.adb:22:4] ([#"mystring.adb" 100 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:100:18:instantiated:main.adb:22:4] ([#"mystring.adb" 100 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 100 0 0] assert { [#"mystring.adb" 100 0 0] ([#"mystring.adb" 100 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Sloc:mystring.adb:100:44:instantiated:main.adb:22:4] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:100:44:instantiated:main.adb:22:4:VC_RANGE_CHECK] [@GP_Id:134] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Main__lines__mystring__T13b__rep.to_rep({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___780 [@mlw:proxy_symbol] [@introduced] = (let temp___779 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___779.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___779 ) with Main__lines__mystring.__split_fields = { ( temp___779.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___778 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___778))) ((Standard__string.first(temp___778))) (Main__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___780.Main__lines__mystring.__split_fields ))))
     ;
     (let temp___782 [@mlw:proxy_symbol] [@introduced] = (let temp___781 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___781.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___781 ) with Main__lines__mystring.__split_fields = { ( temp___781.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 100 0 0] ( [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Sloc:mystring.adb:100:60:instantiated:main.adb:22:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:135] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:100:60:instantiated:main.adb:22:4:VC_RANGE_CHECK] (Main__lines__mystring__T13b.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___782.Main__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
