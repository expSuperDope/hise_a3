(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
  
  use        Standard__natural
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__natural.natural) requires { True }
    ensures  { True } returns int = (Standard__natural.natural'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type int32  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = int32,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type int32__ref  = { mutable int32__content : int32 }
  
  function   int32__ref_int32__content__projection (a : int32__ref) requires
    {  } ensures  {  } returns int32 = a.int32__content
  
  meta model_projection function int32__ref_int32__content__projection
  
  meta inline:no function int32__ref_int32__content__projection
  
  function   int32__havoc (x : int32__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32__rep
  
  use        Stack__int32
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Stack__int32.int32) requires { True } ensures 
    { True } returns int = (Stack__int32.int32'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Stack__int32.int32,
    predicate in_range = Stack__int32.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Stack__int32__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Array__Int__Stack__int32
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 512
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Stack__int32.map,
    function array_bool_eq = Array__Int__Stack__int32.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack_instance" defined at stack.ads:29, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack__stack_instance__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_array
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  type __split_fields  = { [name:Data]
                           [model_trace:.1300]rec__stack__stack_instance__data : Array__Int__Stack__int32.map;
                           [model_trace:.1305]
                           [name:Top_Index]rec__stack__stack_instance__top_index : Standard__natural.natural }
  
  function [name:Data] [model_trace:.1300] 
    __split_fields_rec__stack__stack_instance__data__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Stack__int32.map = a.rec__stack__stack_instance__data
  
  meta model_projection function __split_fields_rec__stack__stack_instance__data__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__data__projection
  
  function [model_trace:.1305] [name:Top_Index] 
    __split_fields_rec__stack__stack_instance__top_index__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__natural.natural = a.rec__stack__stack_instance__top_index
  
  meta model_projection function __split_fields_rec__stack__stack_instance__top_index__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__top_index__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   stack__stack_instance__data__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__data_ (a : __rep) requires
    { (stack__stack_instance__data__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__data) } returns
    Array__Int__Stack__int32.map
  
  function   stack__stack_instance__top_index__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__top_index_ (a : __rep) requires
    { (stack__stack_instance__top_index__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__top_index) }
    returns Standard__natural.natural
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((Stack__stack_array.bool_eq
               a.__split_fields.rec__stack__stack_instance__data
               b.__split_fields.rec__stack__stack_instance__data) /\
              ((Standard__natural__rep.to_rep
                  a.__split_fields.rec__stack__stack_instance__top_index)
                 = (Standard__natural__rep.to_rep
                      b.__split_fields.rec__stack__stack_instance__top_index)))
           then True  else False)

end

(* Module for axiomatizing type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_instance
  
  use export Stack__stack_instance__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack_instance  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   stack__stack_instance__data__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__data__last__bit () requires {  } ensures 
    {  } returns int
  
  function   stack__stack_instance__data__position () requires {  } ensures 
    {  } returns int
  
  axiom stack__stack_instance__data__first__bit_axiom : ((stack__stack_instance__data__first__bit
                                                            ) >= 0)
  
  axiom stack__stack_instance__data__last__bit_axiom : ((stack__stack_instance__data__last__bit
                                                           )
                                                          > (stack__stack_instance__data__first__bit
                                                               ))
  
  axiom stack__stack_instance__data__position_axiom : ((stack__stack_instance__data__position
                                                          ) >= 0)
  
  function   stack__stack_instance__top_index__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__last__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__position () requires {  }
    ensures  {  } returns int
  
  axiom stack__stack_instance__top_index__first__bit_axiom : ((stack__stack_instance__top_index__first__bit
                                                                 ) >= 0)
  
  axiom stack__stack_instance__top_index__last__bit_axiom : ((stack__stack_instance__top_index__last__bit
                                                                )
                                                               > (stack__stack_instance__top_index__first__bit
                                                                    ))
  
  axiom stack__stack_instance__top_index__position_axiom : ((stack__stack_instance__top_index__position
                                                               ) >= 0)
  
  function   user_eq (a : stack_instance b : stack_instance) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns stack_instance
  
  type stack_instance__ref  = { mutable stack_instance__content : stack_instance }
  
  function   stack_instance__ref_stack_instance__content__projection
    (a : stack_instance__ref) requires {  } ensures  {  } returns
    stack_instance = a.stack_instance__content
  
  meta model_projection function stack_instance__ref_stack_instance__content__projection
  
  meta inline:no function stack_instance__ref_stack_instance__content__projection
  
  function   stack_instance__havoc (x : stack_instance__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_instance___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_instance
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_207) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___is_init_203) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_206) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_209) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_210) : bool)
    requires { True } ensures  { True } returns
     = (if
       (Stack__stack_instance.stack__stack_instance__top_index__pred
          ([mlw:proxy_symbol] [introduced] temp___expr_209))
       then
       (( (Standard__natural__rep.to_rep ([mlw:proxy_symbol]
             [introduced] temp___expr_209).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index))
          = ( 0))
       )

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type pin  = <range 0 9999>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 9999
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = pin,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type pin__ref  = { mutable pin__content : pin }
  
  function   pin__ref_pin__content__projection (a : pin__ref) requires {  }
    ensures  {  } returns pin = a.pin__content
  
  meta model_projection function pin__ref_pin__content__projection
  
  meta inline:no function pin__ref_pin__content__projection
  
  function   pin__havoc (x : pin__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
  
  use        Pin__pin
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Pin__pin.pin) requires { True } ensures  { True }
    returns int = (Pin__pin.pin'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Pin__pin.pin,
    predicate in_range = Pin__pin.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "locker" defined at locker.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Locker__locker__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Pin__pin
  use        Pin__pin__rep
  
  type __split_fields  = { [name:Number]
                           [model_trace:.2031]rec__locker__locker__number : Pin__pin.pin;
                           [model_trace:.2038]
                           [name:Locked]rec__locker__locker__locked : bool }
  
  function [name:Number] [model_trace:.2031] 
    __split_fields_rec__locker__locker__number__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Pin__pin.pin = a.rec__locker__locker__number
  
  meta model_projection function __split_fields_rec__locker__locker__number__projection
  
  meta inline:no function __split_fields_rec__locker__locker__number__projection
  
  function [model_trace:.2038] [name:Locked] 
    __split_fields_rec__locker__locker__locked__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    bool = a.rec__locker__locker__locked
  
  meta model_projection function __split_fields_rec__locker__locker__locked__projection
  
  meta inline:no function __split_fields_rec__locker__locker__locked__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   locker__locker__number__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__number_ (a : __rep) requires
    { (locker__locker__number__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__number) } returns
    Pin__pin.pin
  
  function   locker__locker__locked__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__locked_ (a : __rep) requires
    { (locker__locker__locked__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__locked) } returns bool
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Pin__pin__rep.to_rep
                a.__split_fields.rec__locker__locker__number)
               = (Pin__pin__rep.to_rep
                    b.__split_fields.rec__locker__locker__number)) /\
              ((_gnatprove_standard.Boolean.to_int
                  a.__split_fields.rec__locker__locker__locked)
                 = (_gnatprove_standard.Boolean.to_int
                      b.__split_fields.rec__locker__locker__locked)))
           then True  else False)

end

(* Module for axiomatizing type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Locker__locker
  
  use export Locker__locker__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type locker  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   locker__locker__number__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__number__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__number__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__number__first__bit_axiom : ((locker__locker__number__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__number__last__bit_axiom : ((locker__locker__number__last__bit
                                                      )
                                                     > (locker__locker__number__first__bit
                                                          ))
  
  axiom locker__locker__number__position_axiom : ((locker__locker__number__position
                                                     ) >= 0)
  
  function   locker__locker__locked__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__locked__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__locked__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__locked__first__bit_axiom : ((locker__locker__locked__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__locked__last__bit_axiom : ((locker__locker__locked__last__bit
                                                      )
                                                     > (locker__locker__locked__first__bit
                                                          ))
  
  axiom locker__locker__locked__position_axiom : ((locker__locker__locked__position
                                                     ) >= 0)
  
  function   user_eq (a : locker b : locker) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns locker
  
  type locker__ref  = { mutable locker__content : locker }
  
  function   locker__ref_locker__content__projection (a : locker__ref)
    requires {  } ensures  {  } returns locker = a.locker__content
  
  meta model_projection function locker__ref_locker__content__projection
  
  meta inline:no function locker__ref_locker__content__projection
  
  function   locker__havoc (x : locker__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "l" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push__l
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function [model_projected] [model_trace:1226] [name:L] [sloc:stack.ads:22]
    l () requires {  } ensures  {  } returns Locker__locker.locker

end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Stack__stack_instance
  
  val s__split_fields [model_trace:1231] [model_projected]
  [name:S] [sloc:stack.ads:22]: Stack__stack_instance.__split_fields

end

(* Module for defining the constant "a" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push__a
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:1234] [name:A] [sloc:stack.ads:22] a () requires {  }
    ensures  {  } returns int

end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push__success
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val success [name:Success] [model_trace:1237]
  [model_projected] [sloc:stack.ads:22]: bool

end

(* Module for possibly declaring a logic function for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__is_locked
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { True } returns bool
  
  function   is_locked__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_164) : bool
    l : Locker__locker.locker) requires { True } ensures  { True } returns
    bool

end

(* Module giving axioms for type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Locker__locker___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_226) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___is_init_222) : bool ([mlw:proxy_symbol]
    [introduced] temp___skip_constant_223) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_toplevel_224) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_typ_inv_225) : bool) requires { True } ensures 
    { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_227) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___skip_top_level_228) : bool) requires { True }
    ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__is_locked___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  use        Locker__is_locked
  use        Locker__locker___axiom
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { ((result = (Locker__is_locked.is_locked l)) /\
         (Locker__is_locked.is_locked__function_guard result l) /\ True) }
    returns bool
  
  axiom is_locked__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_index
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack_index  = <range 1 512>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 512
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = stack_index,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type stack_index__ref  = { mutable stack_index__content : stack_index }
  
  function   stack_index__ref_stack_index__content__projection
    (a : stack_index__ref) requires {  } ensures  {  } returns
    stack_index = a.stack_index__content
  
  meta model_projection function stack_index__ref_stack_index__content__projection
  
  meta inline:no function stack_index__ref_stack_index__content__projection
  
  function   stack_index__havoc (x : stack_index__ref) requires {  } ensures 
    {  } returns unit

end

(* Module giving axioms for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__int32___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_190) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_186) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_187) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_188) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_189) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_186) = True) \/
          (Stack__int32.first <= Stack__int32.last))
       then
       (Stack__int32.dynamic_property Stack__int32.first Stack__int32.last
          ([mlw:proxy_symbol] [introduced] temp___expr_190))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_191) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_192) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_index___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__stack_index
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_176) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_174) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_175) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_172) = True) \/
          (Stack__stack_index.first <= Stack__stack_index.last))
       then
       (Stack__stack_index.dynamic_property Stack__stack_index.first
          Stack__stack_index.last ([mlw:proxy_symbol]
          [introduced] temp___expr_176))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_177) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_178) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_197) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_194) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_195) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_196) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_199) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_200) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__l___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__a___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__success___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pin__pin
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_219) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_216) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_217) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_218) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_215) = True) \/
          (Pin__pin.first <= Pin__pin.last))
       then
       (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last
          ([mlw:proxy_symbol] [introduced] temp___expr_219))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_220) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_221) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for checking contracts and absence of run-time errors in subprogram "push" defined at stack.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__push__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_instance
  use        Stack__stack_instance___axiom
  use        Locker__locker
  use        Stack__push__l
  use        Stack__push__s
  use        Stack__push__a
  use        Stack__push__success
  use        Locker__is_locked___axiom
  use        Stack__stack_index
  use        Stack__int32
  use        Stack__int32___axiom
  use        Stack__int32__rep
  use        Array__Int__Stack__int32
  use        Locker__locker___axiom
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        Stack__stack_index___axiom
  use        Stack__int32___axiom
  use        Stack__stack_array___axiom
  use        Stack__push__l___axiom
  use        Stack__push__s___axiom
  use        Stack__push__a___axiom
  use        Stack__push__success___axiom
  use        Stack__stack_instance___axiom
  use        Locker__is_locked___axiom
  use        Locker__locker___axiom
  use        Pin__pin___axiom
  
  function [GP_Subp:stack.ads:22] [sloc:stack.ads:22] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram stack.ads:22 *);
        assume
        { (Locker__locker___axiom.dynamic_invariant Stack__push__l.l True
             False True True) };
        assume
        { (Stack__stack_instance___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Stack__int32___axiom.dynamic_invariant Stack__push__a.a True False
             True True) };
        (* Assume moved pointers in outputs of the subprogram stack.ads:22 *);
        (* Check for RTE in the Pre of the subprogram stack.ads:22 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram stack.ads:22 *);
        (try
        ();
          ([GP_Sloc:stack.adb:15:16] ([sloc:stack.adb:15] ()));
          ([GP_Sloc:stack.adb:15:7] ([sloc:stack.adb:15] (if
                                                         ([sloc:stack.adb:15] ([branch_id=875]
                                                         _gnatprove_standard.Main.spark__branch
                                                         :=
                                                         (Locker__is_locked___axiom.is_locked
                                                            ( Stack__push__l.l))));
                                                         ([branch_id=875] _gnatprove_standard.Main.spark__branch).bool__content
                                                         then
                                                         ();
                                                         ([GP_Sloc:stack.adb:16:17] 
                                                         ([sloc:stack.adb:16] (
                                                         Stack__push__success.success
                                                         :=
                                                         (_gnatprove_standard.Boolean.of_int
                                                            0))));
                                                         ([GP_Sloc:stack.adb:17:10] 
                                                         ([sloc:stack.adb:17] raise Return__exc))
                                                          else ())));
          ([GP_Sloc:stack.adb:20:7] ([sloc:stack.adb:20] (if
                                                         ([sloc:stack.adb:20] ([branch_id=885]
                                                         _gnatprove_standard.Main.spark__branch
                                                         :=
                                                         (([sloc:stack.adb:20] 
                                                          ([comment:      if S.Top_Index + 1 <= Max_Capacity then                      ^ stack.adb:20:22:VC_OVERFLOW_CHECK]
                                                          [GP_Sloc:stack.adb:20:22]
                                                          [vc:annotation]
                                                          [GP_Reason:VC_OVERFLOW_CHECK]
                                                          [GP_Shape:if__cmp__add]
                                                          [GP_Id:2] (
                                                          Standard__integer.range_check_
                                                            ((Standard__natural__rep.to_rep
                                                                ( --pp_record_aggregate NOT IMPLEMENTED).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index)
                                                               + 1)))) <= 512)));
                                                         ([branch_id=885] _gnatprove_standard.Main.spark__branch).bool__content
                                                         then
                                                         ();
                                                         ([GP_Sloc:stack.adb:21:22] 
                                                         ([sloc:stack.adb:21] (let ([mlw:proxy_symbol]
                                                         [introduced] temp___257)
                                                         =
                                                         (let ([mlw:proxy_symbol]
                                                           [introduced] temp___256)
                                                           =
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           in abstract
                                                           ensures
                                                           { True } begin 
                                                            (let _ =
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___256).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index
                                                           in ())  end;
                                                           --pp_record_update NOT IMPLEMENTED)
                                                         in (
                                                         Stack__push__s.s__split_fields
                                                         :=
                                                         ([mlw:proxy_symbol]
                                                           [introduced] temp___257).Stack__stack_instance.__split_fields))));
                                                         ([GP_Sloc:stack.adb:22:30] 
                                                         ([sloc:stack.adb:22] (let ([mlw:proxy_symbol]
                                                         [introduced] temp___262)
                                                         =
                                                         (let ([mlw:proxy_symbol]
                                                           [introduced] temp___261)
                                                           =
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           in abstract
                                                           ensures
                                                           { True } begin 
                                                            (let _ =
                                                           ([mlw:proxy_symbol]
                                                             [introduced] temp___261).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__data
                                                           in ())  end;
                                                           --pp_record_update NOT IMPLEMENTED)
                                                         in (
                                                         Stack__push__s.s__split_fields
                                                         :=
                                                         ([mlw:proxy_symbol]
                                                           [introduced] temp___262).Stack__stack_instance.__split_fields))));
                                                         ([GP_Sloc:stack.adb:23:18] 
                                                         ([sloc:stack.adb:23] (
                                                         Stack__push__success.success
                                                         :=
                                                         (_gnatprove_standard.Boolean.of_int
                                                            1))))
                                                          else
                                                         ();
                                                         ([GP_Sloc:stack.adb:25:18] 
                                                         ([sloc:stack.adb:25] (
                                                         Stack__push__success.success
                                                         :=
                                                         (_gnatprove_standard.Boolean.of_int
                                                            0)))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures { True } begin  (let _ = True in ())  end

end
