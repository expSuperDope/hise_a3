(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
  
  use        Standard__natural
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__natural.natural) requires { True }
    ensures  { True } returns int = (Standard__natural.natural'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type int32  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = int32,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type int32__ref  = { mutable int32__content : int32 }
  
  function   int32__ref_int32__content__projection (a : int32__ref) requires
    {  } ensures  {  } returns int32 = a.int32__content
  
  meta model_projection function int32__ref_int32__content__projection
  
  meta inline:no function int32__ref_int32__content__projection
  
  function   int32__havoc (x : int32__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32__rep
  
  use        Stack__int32
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Stack__int32.int32) requires { True } ensures 
    { True } returns int = (Stack__int32.int32'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Stack__int32.int32,
    predicate in_range = Stack__int32.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Stack__int32__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Array__Int__Stack__int32
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 512
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Stack__int32.map,
    function array_bool_eq = Array__Int__Stack__int32.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack_instance" defined at stack.ads:29, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack__stack_instance__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_array
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  type __split_fields  = { [name:Data]
                           [model_trace:.1300]rec__stack__stack_instance__data : Array__Int__Stack__int32.map;
                           [model_trace:.1305]
                           [name:Top_Index]rec__stack__stack_instance__top_index : Standard__natural.natural }
  
  function [name:Data] [model_trace:.1300] 
    __split_fields_rec__stack__stack_instance__data__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Stack__int32.map = a.rec__stack__stack_instance__data
  
  meta model_projection function __split_fields_rec__stack__stack_instance__data__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__data__projection
  
  function [model_trace:.1305] [name:Top_Index] 
    __split_fields_rec__stack__stack_instance__top_index__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__natural.natural = a.rec__stack__stack_instance__top_index
  
  meta model_projection function __split_fields_rec__stack__stack_instance__top_index__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__top_index__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   stack__stack_instance__data__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__data_ (a : __rep) requires
    { (stack__stack_instance__data__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__data) } returns
    Array__Int__Stack__int32.map
  
  function   stack__stack_instance__top_index__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__top_index_ (a : __rep) requires
    { (stack__stack_instance__top_index__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__top_index) }
    returns Standard__natural.natural
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((Stack__stack_array.bool_eq
               a.__split_fields.rec__stack__stack_instance__data
               b.__split_fields.rec__stack__stack_instance__data) /\
              ((Standard__natural__rep.to_rep
                  a.__split_fields.rec__stack__stack_instance__top_index)
                 = (Standard__natural__rep.to_rep
                      b.__split_fields.rec__stack__stack_instance__top_index)))
           then True  else False)

end

(* Module for axiomatizing type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_instance
  
  use export Stack__stack_instance__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack_instance  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   stack__stack_instance__data__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__data__last__bit () requires {  } ensures 
    {  } returns int
  
  function   stack__stack_instance__data__position () requires {  } ensures 
    {  } returns int
  
  axiom stack__stack_instance__data__first__bit_axiom : ((stack__stack_instance__data__first__bit
                                                            ) >= 0)
  
  axiom stack__stack_instance__data__last__bit_axiom : ((stack__stack_instance__data__last__bit
                                                           )
                                                          > (stack__stack_instance__data__first__bit
                                                               ))
  
  axiom stack__stack_instance__data__position_axiom : ((stack__stack_instance__data__position
                                                          ) >= 0)
  
  function   stack__stack_instance__top_index__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__last__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__position () requires {  }
    ensures  {  } returns int
  
  axiom stack__stack_instance__top_index__first__bit_axiom : ((stack__stack_instance__top_index__first__bit
                                                                 ) >= 0)
  
  axiom stack__stack_instance__top_index__last__bit_axiom : ((stack__stack_instance__top_index__last__bit
                                                                )
                                                               > (stack__stack_instance__top_index__first__bit
                                                                    ))
  
  axiom stack__stack_instance__top_index__position_axiom : ((stack__stack_instance__top_index__position
                                                               ) >= 0)
  
  function   user_eq (a : stack_instance b : stack_instance) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns stack_instance
  
  type stack_instance__ref  = { mutable stack_instance__content : stack_instance }
  
  function   stack_instance__ref_stack_instance__content__projection
    (a : stack_instance__ref) requires {  } ensures  {  } returns
    stack_instance = a.stack_instance__content
  
  meta model_projection function stack_instance__ref_stack_instance__content__projection
  
  meta inline:no function stack_instance__ref_stack_instance__content__projection
  
  function   stack_instance__havoc (x : stack_instance__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_instance___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_instance
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_207) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___is_init_203) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_206) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_209) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_210) : bool)
    requires { True } ensures  { True } returns
     = (if
       (Stack__stack_instance.stack__stack_instance__top_index__pred
          ([mlw:proxy_symbol] [introduced] temp___expr_209))
       then
       (( (Standard__natural__rep.to_rep ([mlw:proxy_symbol]
             [introduced] temp___expr_209).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index))
          = ( 0))
       )

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type pin  = <range 0 9999>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 9999
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = pin,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type pin__ref  = { mutable pin__content : pin }
  
  function   pin__ref_pin__content__projection (a : pin__ref) requires {  }
    ensures  {  } returns pin = a.pin__content
  
  meta model_projection function pin__ref_pin__content__projection
  
  meta inline:no function pin__ref_pin__content__projection
  
  function   pin__havoc (x : pin__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
  
  use        Pin__pin
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Pin__pin.pin) requires { True } ensures  { True }
    returns int = (Pin__pin.pin'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Pin__pin.pin,
    predicate in_range = Pin__pin.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "locker" defined at locker.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Locker__locker__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Pin__pin
  use        Pin__pin__rep
  
  type __split_fields  = { [name:Number]
                           [model_trace:.2031]rec__locker__locker__number : Pin__pin.pin;
                           [model_trace:.2038]
                           [name:Locked]rec__locker__locker__locked : bool }
  
  function [name:Number] [model_trace:.2031] 
    __split_fields_rec__locker__locker__number__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Pin__pin.pin = a.rec__locker__locker__number
  
  meta model_projection function __split_fields_rec__locker__locker__number__projection
  
  meta inline:no function __split_fields_rec__locker__locker__number__projection
  
  function [model_trace:.2038] [name:Locked] 
    __split_fields_rec__locker__locker__locked__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    bool = a.rec__locker__locker__locked
  
  meta model_projection function __split_fields_rec__locker__locker__locked__projection
  
  meta inline:no function __split_fields_rec__locker__locker__locked__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   locker__locker__number__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__number_ (a : __rep) requires
    { (locker__locker__number__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__number) } returns
    Pin__pin.pin
  
  function   locker__locker__locked__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__locked_ (a : __rep) requires
    { (locker__locker__locked__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__locked) } returns bool
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Pin__pin__rep.to_rep
                a.__split_fields.rec__locker__locker__number)
               = (Pin__pin__rep.to_rep
                    b.__split_fields.rec__locker__locker__number)) /\
              ((_gnatprove_standard.Boolean.to_int
                  a.__split_fields.rec__locker__locker__locked)
                 = (_gnatprove_standard.Boolean.to_int
                      b.__split_fields.rec__locker__locker__locked)))
           then True  else False)

end

(* Module for axiomatizing type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Locker__locker
  
  use export Locker__locker__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type locker  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   locker__locker__number__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__number__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__number__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__number__first__bit_axiom : ((locker__locker__number__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__number__last__bit_axiom : ((locker__locker__number__last__bit
                                                      )
                                                     > (locker__locker__number__first__bit
                                                          ))
  
  axiom locker__locker__number__position_axiom : ((locker__locker__number__position
                                                     ) >= 0)
  
  function   locker__locker__locked__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__locked__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__locked__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__locked__first__bit_axiom : ((locker__locker__locked__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__locked__last__bit_axiom : ((locker__locker__locked__last__bit
                                                      )
                                                     > (locker__locker__locked__first__bit
                                                          ))
  
  axiom locker__locker__locked__position_axiom : ((locker__locker__locked__position
                                                     ) >= 0)
  
  function   user_eq (a : locker b : locker) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns locker
  
  type locker__ref  = { mutable locker__content : locker }
  
  function   locker__ref_locker__content__projection (a : locker__ref)
    requires {  } ensures  {  } returns locker = a.locker__content
  
  meta model_projection function locker__ref_locker__content__projection
  
  meta inline:no function locker__ref_locker__content__projection
  
  function   locker__havoc (x : locker__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining the constant "l" defined at stack.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__pop__l
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function [model_trace:1262] [model_projected] [name:L] [sloc:stack.ads:24]
    l () requires {  } ensures  {  } returns Locker__locker.locker

end

(* Module for defining a ref holding the value of variable "s" defined at stack.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Stack__stack_instance
  
  val s__split_fields [model_trace:1267] [model_projected]
  [name:S] [sloc:stack.ads:24]: Stack__stack_instance.__split_fields

end

(* Module for defining a ref holding the value of variable "a" defined at stack.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__a
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val a [model_projected] [name:A]
  [model_trace:1270] [sloc:stack.ads:24]: int

end

(* Module for defining a ref holding the value of variable "success" defined at stack.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__success
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val success [name:Success] [model_projected]
  [model_trace:1273] [sloc:stack.ads:24]: bool

end

(* Module for possibly declaring a logic function for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__is_locked
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { True } returns bool
  
  function   is_locked__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_164) : bool
    l : Locker__locker.locker) requires { True } ensures  { True } returns
    bool

end

(* Module giving axioms for type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Locker__locker___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_226) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___is_init_222) : bool ([mlw:proxy_symbol]
    [introduced] temp___skip_constant_223) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_toplevel_224) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_typ_inv_225) : bool) requires { True } ensures 
    { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_227) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___skip_top_level_228) : bool) requires { True }
    ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__is_locked___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  use        Locker__is_locked
  use        Locker__locker___axiom
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { ((result = (Locker__is_locked.is_locked l)) /\
         (Locker__is_locked.is_locked__function_guard result l) /\ True) }
    returns bool
  
  axiom is_locked__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:4400] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:4406] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for axiomatizing type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_index
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack_index  = <range 1 512>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 512
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = stack_index,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type stack_index__ref  = { mutable stack_index__content : stack_index }
  
  function   stack_index__ref_stack_index__content__projection
    (a : stack_index__ref) requires {  } ensures  {  } returns
    stack_index = a.stack_index__content
  
  meta model_projection function stack_index__ref_stack_index__content__projection
  
  meta inline:no function stack_index__ref_stack_index__content__projection
  
  function   stack_index__havoc (x : stack_index__ref) requires {  } ensures 
    {  } returns unit

end

(* Module giving axioms for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__int32___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_190) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_186) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_187) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_188) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_189) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_186) = True) \/
          (Stack__int32.first <= Stack__int32.last))
       then
       (Stack__int32.dynamic_property Stack__int32.first Stack__int32.last
          ([mlw:proxy_symbol] [introduced] temp___expr_190))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_191) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_192) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a value for string literal  defined at stack.adb:50, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_288
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_288 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_288__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "stack_index" defined at stack.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_index___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__stack_index
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_176) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_173) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_174) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_175) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_172) = True) \/
          (Stack__stack_index.first <= Stack__stack_index.last))
       then
       (Stack__stack_index.dynamic_property Stack__stack_index.first
          Stack__stack_index.last ([mlw:proxy_symbol]
          [introduced] temp___expr_176))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_177) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_178) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_197) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_193) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_194) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_195) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_196) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_199) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_200) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "l" defined at stack.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__l___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at stack.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "a" defined at stack.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__a___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "success" defined at stack.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__success___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pin__pin
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_219) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_216) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_217) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_218) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_215) = True) \/
          (Pin__pin.first <= Pin__pin.last))
       then
       (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last
          ([mlw:proxy_symbol] [introduced] temp___expr_219))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_220) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_221) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_169) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_166) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_167) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_168) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_165) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_169))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_170) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_171) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for checking contracts and absence of run-time errors in subprogram "pop" defined at stack.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__pop__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__natural
  use        Standard__natural__rep
  use        Standard__string
  use        Stack__stack_instance
  use        Stack__stack_instance___axiom
  use        Locker__locker
  use        Stack__pop__l
  use        Stack__pop__s
  use        Stack__pop__a
  use        Stack__pop__success
  use        Locker__is_locked___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Stack__stack_index
  use        Stack__int32
  use        Stack__int32___axiom
  use        Stack__int32__rep
  use        Array__Int__Stack__int32
  use        Locker__locker___axiom
  use        Temp___String_Literal_288
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Stack__int32
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Stack__stack_index___axiom
  use        Stack__int32___axiom
  use        Stack__stack_array___axiom
  use        Stack__pop__l___axiom
  use        Stack__pop__s___axiom
  use        Stack__pop__a___axiom
  use        Stack__pop__success___axiom
  use        Stack__stack_instance___axiom
  use        Locker__is_locked___axiom
  use        Locker__locker___axiom
  use        Pin__pin___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  
  function [GP_Subp:stack.ads:24] [sloc:stack.ads:24] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram stack.ads:24 *);
        assume
        { (Locker__locker___axiom.dynamic_invariant Stack__pop__l.l True
             False True True) };
        assume
        { (Stack__stack_instance___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        assume
        { (Stack__int32___axiom.dynamic_invariant !Stack__pop__a.a False
             False True True) };
        (* Assume moved pointers in outputs of the subprogram stack.ads:24 *);
        (* Check for RTE in the Pre of the subprogram stack.ads:24 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram stack.ads:24 *);
        (try
        ();
          ([GP_Sloc:stack.adb:49:16] ([sloc:stack.adb:49] ()));
          ([GP_Sloc:stack.adb:49:7] ([sloc:stack.adb:49] (if
                                                         ([sloc:stack.adb:49] ([branch_id=1017]
                                                         _gnatprove_standard.Main.spark__branch
                                                         :=
                                                         (Locker__is_locked___axiom.is_locked
                                                            ( Stack__pop__l.l))));
                                                         ([branch_id=1017] _gnatprove_standard.Main.spark__branch).bool__content
                                                         then
                                                         ();
                                                         ([GP_Sloc:stack.adb:50:10] 
                                                         ([sloc:stack.adb:50] ()));
                                                         ([GP_Sloc:stack.adb:50:10] 
                                                         ([sloc:stack.adb:50] (
                                                          any
                                                           --pp_effects NOT IMPLEMENTED
                                                           pre {}
                                                         post {} return unit);
                                                         (Ada___ada__text_io__put_line__2___axiom.put_line
                                                            (let ([mlw:proxy_symbol]
                                                            [introduced] temp___289)
                                                            =
                                                            ( (Temp___String_Literal_288.temp___String_Literal_288
                                                                 ())) in
                                                            (Standard__string.of_array
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___289)
                                                               1 7)));
                                                         ()));
                                                         ([GP_Sloc:stack.adb:51:17] 
                                                         ([sloc:stack.adb:51] (
                                                         Stack__pop__success.success
                                                         :=
                                                         (_gnatprove_standard.Boolean.of_int
                                                            0))));
                                                         ([GP_Sloc:stack.adb:52:11] 
                                                         ([sloc:stack.adb:52] (
                                                         Stack__pop__a.a :=
                                                         ( 0))));
                                                         ([GP_Sloc:stack.adb:53:10] 
                                                         ([sloc:stack.adb:53] raise Return__exc))
                                     else ())));
        ([GP_Sloc:stack.adb:56:7] ([sloc:stack.adb:56] (if
                                                       ([sloc:stack.adb:56] ([branch_id=1033]
                                                       _gnatprove_standard.Main.spark__branch
                                                       :=
                                                       (((Standard__natural__rep.to_rep
                                                            ( --pp_record_aggregate NOT IMPLEMENTED).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index)
                                                           - 1) >= 0)));
                                                       ([branch_id=1033] _gnatprove_standard.Main.spark__branch).bool__content
                                                       then
                                                       ();
                                                       ([GP_Sloc:stack.adb:57:12] 
                                                       ([sloc:stack.adb:57] (
                                                       Stack__pop__a.a :=
                                                       ( (Stack__int32__rep.to_rep
                                                            (let ([mlw:proxy_symbol]
                                                            [introduced] temp___293)
                                                            =
                                                            ( --pp_record_aggregate NOT IMPLEMENTED).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__data
                                                            in
                                                            (Array__Int__Stack__int32.get
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___293)
                                                               (let ([mlw:proxy_symbol]
                                                               [introduced] temp___294)
                                                               =
                                                               (Standard__natural__rep.to_rep
                                                                  ( --pp_record_aggregate NOT IMPLEMENTED).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index)
                                                               in assert
                                                               { ([sloc:stack.adb:57] 
                                                                 ([GP_Sloc:stack.adb:57:23]
                                                                 [GP_Shape:if__a_assign__ixdcomp__selectcomp]
                                                                 [vc:annotation]
                                                                 [comment:         A := S.Data(S.Top_Index);                       ^ stack.adb:57:23:VC_INDEX_CHECK]
                                                                 [GP_Reason:VC_INDEX_CHECK]
                                                                 [GP_Id:8] (
                                                                 (Stack__stack_index.first
                                                                    <= ([mlw:proxy_symbol]
                                                                    [introduced] temp___294))
                                                                   /\
                                                                   (([mlw:proxy_symbol]
                                                                    [introduced] temp___294)
                                                                    <= Stack__stack_index.last)))) };
                                                               ([mlw:proxy_symbol]
                                                               [introduced] temp___294)))))))));
                                                       ([GP_Sloc:stack.adb:58:22] 
                                                       ([sloc:stack.adb:58] (let ([mlw:proxy_symbol]
                                                       [introduced] temp___297)
                                                       =
                                                       (let ([mlw:proxy_symbol]
                                                         [introduced] temp___296)
                                                         =
                                                         ( --pp_record_aggregate NOT IMPLEMENTED)
                                                         in abstract ensures
                                                         { True } begin 
                                                          (let _ =
                                                         ([mlw:proxy_symbol]
                                                           [introduced] temp___296).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index
                                                         in ())  end;
                                                         --pp_record_update NOT IMPLEMENTED)
                                                       in (
                                                       Stack__pop__s.s__split_fields
                                                       :=
                                                       ([mlw:proxy_symbol]
                                                         [introduced] temp___297).Stack__stack_instance.__split_fields))));
                                                       ([GP_Sloc:stack.adb:59:18] 
                                                       ([sloc:stack.adb:59] (
                                                       Stack__pop__success.success
                                                       :=
                                                       (_gnatprove_standard.Boolean.of_int
                                                          1))))
                                                        else
                                                       ();
                                                       ([GP_Sloc:stack.adb:61:18] 
                                                       ([sloc:stack.adb:61] (
                                                       Stack__pop__success.success
                                                       :=
                                                       (_gnatprove_standard.Boolean.of_int
                                                          0)))))));
        raise Return__exc with | Return__exc  -> ());
    abstract ensures { True } begin  (let _ = True in ())  end

end
