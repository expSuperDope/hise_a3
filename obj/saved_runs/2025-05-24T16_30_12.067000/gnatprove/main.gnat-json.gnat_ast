(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type pin  = <range 0 9999>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 9999
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = pin,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type pin__ref  = { mutable pin__content : pin }
  
  function   pin__ref_pin__content__projection (a : pin__ref) requires {  }
    ensures  {  } returns pin = a.pin__content
  
  meta model_projection function pin__ref_pin__content__projection
  
  meta inline:no function pin__ref_pin__content__projection
  
  function   pin__havoc (x : pin__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
  
  use        Pin__pin
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Pin__pin.pin) requires { True } ensures  { True }
    returns int = (Pin__pin.pin'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Pin__pin.pin,
    predicate in_range = Pin__pin.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "locker" defined at locker.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Locker__locker__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Pin__pin
  use        Pin__pin__rep
  
  type __split_fields  = { [name:Number]
                           [model_trace:.3963]rec__locker__locker__number : Pin__pin.pin;
                           [model_trace:.3970]
                           [name:Locked]rec__locker__locker__locked : bool }
  
  function [name:Number] [model_trace:.3963] 
    __split_fields_rec__locker__locker__number__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Pin__pin.pin = a.rec__locker__locker__number
  
  meta model_projection function __split_fields_rec__locker__locker__number__projection
  
  meta inline:no function __split_fields_rec__locker__locker__number__projection
  
  function [model_trace:.3970] [name:Locked] 
    __split_fields_rec__locker__locker__locked__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    bool = a.rec__locker__locker__locked
  
  meta model_projection function __split_fields_rec__locker__locker__locked__projection
  
  meta inline:no function __split_fields_rec__locker__locker__locked__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   locker__locker__number__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__number_ (a : __rep) requires
    { (locker__locker__number__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__number) } returns
    Pin__pin.pin
  
  function   locker__locker__locked__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__locker__locker__locked_ (a : __rep) requires
    { (locker__locker__locked__pred a) } ensures 
    { (result = a.__split_fields.rec__locker__locker__locked) } returns bool
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Pin__pin__rep.to_rep
                a.__split_fields.rec__locker__locker__number)
               = (Pin__pin__rep.to_rep
                    b.__split_fields.rec__locker__locker__number)) /\
              ((_gnatprove_standard.Boolean.to_int
                  a.__split_fields.rec__locker__locker__locked)
                 = (_gnatprove_standard.Boolean.to_int
                      b.__split_fields.rec__locker__locker__locked)))
           then True  else False)

end

(* Module for axiomatizing type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Locker__locker
  
  use export Locker__locker__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type locker  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   locker__locker__number__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__number__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__number__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__number__first__bit_axiom : ((locker__locker__number__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__number__last__bit_axiom : ((locker__locker__number__last__bit
                                                      )
                                                     > (locker__locker__number__first__bit
                                                          ))
  
  axiom locker__locker__number__position_axiom : ((locker__locker__number__position
                                                     ) >= 0)
  
  function   locker__locker__locked__first__bit () requires {  } ensures 
    {  } returns int
  
  function   locker__locker__locked__last__bit () requires {  } ensures  {  }
    returns int
  
  function   locker__locker__locked__position () requires {  } ensures  {  }
    returns int
  
  axiom locker__locker__locked__first__bit_axiom : ((locker__locker__locked__first__bit
                                                       ) >= 0)
  
  axiom locker__locker__locked__last__bit_axiom : ((locker__locker__locked__last__bit
                                                      )
                                                     > (locker__locker__locked__first__bit
                                                          ))
  
  axiom locker__locker__locked__position_axiom : ((locker__locker__locked__position
                                                     ) >= 0)
  
  function   user_eq (a : locker b : locker) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns locker
  
  type locker__ref  = { mutable locker__content : locker }
  
  function   locker__ref_locker__content__projection (a : locker__ref)
    requires {  } ensures  {  } returns locker = a.locker__content
  
  meta model_projection function locker__ref_locker__content__projection
  
  meta inline:no function locker__ref_locker__content__projection
  
  function   locker__havoc (x : locker__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "l" defined at main.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Main__l
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  val l__split_fields [model_projected] [model_trace:886]
  [name:L] [sloc:main.adb:28]: Locker__locker.__split_fields

end

(* Module giving axioms for type "locker" defined at locker.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Locker__locker___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_248) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___is_init_244) : bool ([mlw:proxy_symbol]
    [introduced] temp___skip_constant_245) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_toplevel_246) : bool ([mlw:proxy_symbol]
    [introduced] temp___do_typ_inv_247) : bool) requires { True } ensures 
    { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_249) : Locker__locker.locker ([mlw:proxy_symbol]
    [introduced] temp___skip_top_level_250) : bool) requires { True }
    ensures  { True } returns  = True

end

(* Module for axiomatizing type "T13s" defined at mystring.ads:50 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Mystring_instance__lines__mystring__T13s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type t13s  = <range 0 2048>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 2048
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = t13s,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type t13s__ref  = { mutable t13s__content : t13s }
  
  function   t13s__ref_t13s__content__projection (a : t13s__ref) requires
    {  } ensures  {  } returns t13s = a.t13s__content
  
  meta model_projection function t13s__ref_t13s__content__projection
  
  meta inline:no function t13s__ref_t13s__content__projection
  
  function   t13s__havoc (x : t13s__ref) requires {  } ensures  {  } returns
    unit

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:50 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Mystring_instance__lines__mystring__T13s__rep
  
  use        Mystring_instance__lines__mystring__T13s
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Mystring_instance__lines__mystring__T13s.t13s)
    requires { True } ensures  { True } returns
    int = (Mystring_instance__lines__mystring__T13s.t13s'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Mystring_instance__lines__mystring__T13s.t13s,
    predicate in_range = Mystring_instance__lines__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:48 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Mystring_instance__lines__mystringstr
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Array__Int__Standard__character
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 2048
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:49 instantiated at mystring_instance.ads:4, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystring_instance__lines__mystring__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystring_instance__lines__mystring__T13s
  use        Mystring_instance__lines__mystring__T13s__rep
  use        Mystring_instance__lines__mystringstr
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  type __split_fields  = { [model_trace:.17187]
                           [name:Length]rec__mystring_instance__lines__mystring__length : Mystring_instance__lines__mystring__T13s.t13s;
                           [name:Str]
                           [model_trace:.17191]rec__mystring_instance__lines__mystring__str : Array__Int__Standard__character.map }
  
  function [model_trace:.17187] [name:Length] 
    __split_fields_rec__mystring_instance__lines__mystring__length__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Mystring_instance__lines__mystring__T13s.t13s = a.rec__mystring_instance__lines__mystring__length
  
  meta model_projection function __split_fields_rec__mystring_instance__lines__mystring__length__projection
  
  meta inline:no function __split_fields_rec__mystring_instance__lines__mystring__length__projection
  
  function [name:Str] [model_trace:.17191] 
    __split_fields_rec__mystring_instance__lines__mystring__str__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Standard__character.map = a.rec__mystring_instance__lines__mystring__str
  
  meta model_projection function __split_fields_rec__mystring_instance__lines__mystring__str__projection
  
  meta inline:no function __split_fields_rec__mystring_instance__lines__mystring__str__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__3__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__3__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__3__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__3__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__3__projection
  
  meta inline:no function __rep___split_fields__3__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   mystring_instance__lines__mystring__length__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__mystring_instance__lines__mystring__length_ (a : __rep)
    requires { (mystring_instance__lines__mystring__length__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__mystring_instance__lines__mystring__length) }
    returns Mystring_instance__lines__mystring__T13s.t13s
  
  function   mystring_instance__lines__mystring__str__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__mystring_instance__lines__mystring__str_ (a : __rep)
    requires { (mystring_instance__lines__mystring__str__pred a) } ensures 
    { (result = a.__split_fields.rec__mystring_instance__lines__mystring__str) }
    returns Array__Int__Standard__character.map
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Mystring_instance__lines__mystring__T13s__rep.to_rep
                a.__split_fields.rec__mystring_instance__lines__mystring__length)
               = (Mystring_instance__lines__mystring__T13s__rep.to_rep
                    b.__split_fields.rec__mystring_instance__lines__mystring__length))
              /\
              (Mystring_instance__lines__mystringstr.bool_eq
                 a.__split_fields.rec__mystring_instance__lines__mystring__str
                 b.__split_fields.rec__mystring_instance__lines__mystring__str))
           then True  else False)

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:49 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Mystring_instance__lines__mystring
  
  use export Mystring_instance__lines__mystring__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type mystring  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   mystring_instance__lines__mystring__length__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   mystring_instance__lines__mystring__length__last__bit ()
    requires {  } ensures  {  } returns int
  
  function   mystring_instance__lines__mystring__length__position () requires
    {  } ensures  {  } returns int
  
  axiom mystring_instance__lines__mystring__length__first__bit_axiom : 
  ((mystring_instance__lines__mystring__length__first__bit ) >= 0)
  
  axiom mystring_instance__lines__mystring__length__last__bit_axiom : 
  ((mystring_instance__lines__mystring__length__last__bit )
     > (mystring_instance__lines__mystring__length__first__bit ))
  
  axiom mystring_instance__lines__mystring__length__position_axiom : 
  ((mystring_instance__lines__mystring__length__position ) >= 0)
  
  function   mystring_instance__lines__mystring__str__first__bit () requires
    {  } ensures  {  } returns int
  
  function   mystring_instance__lines__mystring__str__last__bit () requires
    {  } ensures  {  } returns int
  
  function   mystring_instance__lines__mystring__str__position () requires
    {  } ensures  {  } returns int
  
  axiom mystring_instance__lines__mystring__str__first__bit_axiom : ((mystring_instance__lines__mystring__str__first__bit
                                                                    ) >= 0)
  
  axiom mystring_instance__lines__mystring__str__last__bit_axiom : ((mystring_instance__lines__mystring__str__last__bit
                                                                    )
                                                                    > (
                                                                    mystring_instance__lines__mystring__str__first__bit
                                                                    ))
  
  axiom mystring_instance__lines__mystring__str__position_axiom : ((mystring_instance__lines__mystring__str__position
                                                                    ) >= 0)
  
  function   user_eq (a : mystring b : mystring) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns mystring
  
  type mystring__ref  = { mutable mystring__content : mystring }
  
  function   mystring__ref_mystring__content__projection (a : mystring__ref)
    requires {  } ensures  {  } returns mystring = a.mystring__content
  
  meta model_projection function mystring__ref_mystring__content__projection
  
  meta inline:no function mystring__ref_mystring__content__projection
  
  function   mystring__havoc (x : mystring__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "s" defined at main.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystring_instance__lines__mystring
  
  val s__split_fields [model_trace:891] [model_projected]
  [name:S] [sloc:main.adb:29]: Mystring_instance__lines__mystring.__split_fields

end

(* Module giving axioms for type "mystring" defined at mystring.ads:49 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystring_instance__lines__mystring___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystring_instance__lines__mystring
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_267) : Mystring_instance__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___is_init_263) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_264) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_265) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_266) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_269) : Mystring_instance__lines__mystring.mystring
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_270) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
  
  use        Standard__natural
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__natural.natural) requires { True }
    ensures  { True } returns int = (Standard__natural.natural'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type int32  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = int32,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type int32__ref  = { mutable int32__content : int32 }
  
  function   int32__ref_int32__content__3__projection (a : int32__ref)
    requires {  } ensures  {  } returns int32 = a.int32__content
  
  meta model_projection function int32__ref_int32__content__3__projection
  
  meta inline:no function int32__ref_int32__content__3__projection
  
  function   int32__havoc (x : int32__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stack__int32__rep
  
  use        Stack__int32
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Stack__int32.int32) requires { True } ensures 
    { True } returns int = (Stack__int32.int32'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Stack__int32.int32,
    predicate in_range = Stack__int32.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tstack_arrayB" defined at stack.ads:15, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Stack__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Stack__int32__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  use        Array__Int__Stack__int32
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 512
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Stack__int32.map,
    function array_bool_eq = Array__Int__Stack__int32.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack_instance" defined at stack.ads:29, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack__stack_instance__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_array
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  type __split_fields  = { [name:Data]
                           [model_trace:.9535]rec__stack__stack_instance__data : Array__Int__Stack__int32.map;
                           [model_trace:.9540]
                           [name:Top_Index]rec__stack__stack_instance__top_index : Standard__natural.natural }
  
  function [name:Data] [model_trace:.9535] 
    __split_fields_rec__stack__stack_instance__data__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Stack__int32.map = a.rec__stack__stack_instance__data
  
  meta model_projection function __split_fields_rec__stack__stack_instance__data__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__data__projection
  
  function [model_trace:.9540] [name:Top_Index] 
    __split_fields_rec__stack__stack_instance__top_index__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__natural.natural = a.rec__stack__stack_instance__top_index
  
  meta model_projection function __split_fields_rec__stack__stack_instance__top_index__projection
  
  meta inline:no function __split_fields_rec__stack__stack_instance__top_index__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__4__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__4__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__4__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__4__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__4__projection
  
  meta inline:no function __rep___split_fields__4__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   stack__stack_instance__data__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__data_ (a : __rep) requires
    { (stack__stack_instance__data__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__data) } returns
    Array__Int__Stack__int32.map
  
  function   stack__stack_instance__top_index__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__stack__stack_instance__top_index_ (a : __rep) requires
    { (stack__stack_instance__top_index__pred a) } ensures 
    { (result = a.__split_fields.rec__stack__stack_instance__top_index) }
    returns Standard__natural.natural
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((Stack__stack_array.bool_eq
               a.__split_fields.rec__stack__stack_instance__data
               b.__split_fields.rec__stack__stack_instance__data) /\
              ((Standard__natural__rep.to_rep
                  a.__split_fields.rec__stack__stack_instance__top_index)
                 = (Standard__natural__rep.to_rep
                      b.__split_fields.rec__stack__stack_instance__top_index)))
           then True  else False)

end

(* Module for axiomatizing type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_instance
  
  use export Stack__stack_instance__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type stack_instance  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   stack__stack_instance__data__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__data__last__bit () requires {  } ensures 
    {  } returns int
  
  function   stack__stack_instance__data__position () requires {  } ensures 
    {  } returns int
  
  axiom stack__stack_instance__data__first__bit_axiom : ((stack__stack_instance__data__first__bit
                                                            ) >= 0)
  
  axiom stack__stack_instance__data__last__bit_axiom : ((stack__stack_instance__data__last__bit
                                                           )
                                                          > (stack__stack_instance__data__first__bit
                                                               ))
  
  axiom stack__stack_instance__data__position_axiom : ((stack__stack_instance__data__position
                                                          ) >= 0)
  
  function   stack__stack_instance__top_index__first__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__last__bit () requires {  }
    ensures  {  } returns int
  
  function   stack__stack_instance__top_index__position () requires {  }
    ensures  {  } returns int
  
  axiom stack__stack_instance__top_index__first__bit_axiom : ((stack__stack_instance__top_index__first__bit
                                                                 ) >= 0)
  
  axiom stack__stack_instance__top_index__last__bit_axiom : ((stack__stack_instance__top_index__last__bit
                                                                )
                                                               > (stack__stack_instance__top_index__first__bit
                                                                    ))
  
  axiom stack__stack_instance__top_index__position_axiom : ((stack__stack_instance__top_index__position
                                                               ) >= 0)
  
  function   user_eq (a : stack_instance b : stack_instance) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns stack_instance
  
  type stack_instance__ref  = { mutable stack_instance__content : stack_instance }
  
  function   stack_instance__ref_stack_instance__content__projection
    (a : stack_instance__ref) requires {  } ensures  {  } returns
    stack_instance = a.stack_instance__content
  
  meta model_projection function stack_instance__ref_stack_instance__content__projection
  
  meta inline:no function stack_instance__ref_stack_instance__content__projection
  
  function   stack_instance__havoc (x : stack_instance__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "sk" defined at main.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Main__sk
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Stack__stack_instance
  
  val sk__split_fields [name:Sk] [model_trace:896]
  [model_projected] [sloc:main.adb:30]: Stack__stack_instance.__split_fields

end

(* Module giving axioms for type "stack_instance" defined at stack.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_instance___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Stack__stack_instance
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_303) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___is_init_299) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_300) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_301) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_302) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_305) : Stack__stack_instance.stack_instance
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_306) : bool)
    requires { True } ensures  { True } returns
     = (if
       (Stack__stack_instance.stack__stack_instance__top_index__pred
          ([mlw:proxy_symbol] [introduced] temp___expr_305))
       then
       (( (Standard__natural__rep.to_rep ([mlw:proxy_symbol]
             [introduced] temp___expr_305).Stack__stack_instance.__split_fields.Stack__stack_instance.rec__stack__stack_instance__top_index))
          = ( 0))
       )

end

(* Module for axiomatizing type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type int32  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = int32,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type int32__ref  = { mutable int32__content : int32 }
  
  function   int32__ref_int32__content__4__projection (a : int32__ref)
    requires {  } ensures  {  } returns int32 = a.int32__content
  
  meta model_projection function int32__ref_int32__content__4__projection
  
  meta inline:no function int32__ref_int32__content__4__projection
  
  function   int32__havoc (x : int32__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__int32__rep
  
  use        Memorystore__int32
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Memorystore__int32.int32) requires { True } ensures 
    { True } returns int = (Memorystore__int32.int32'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Memorystore__int32.int32,
    predicate in_range = Memorystore__int32.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "cell_opt" defined at memorystore.ads:41, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__cell_opt__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Memorystore__int32
  use        Memorystore__int32__rep
  
  type __split_fields  = { [name:Valid]
                           [model_trace:.3099]rec__memorystore__cell_opt__valid : bool;
                           [name:Val]
                           [model_trace:.3105]rec__memorystore__cell_opt__val : Memorystore__int32.int32 }
  
  function [name:Valid] [model_trace:.3099] 
    __split_fields_rec__memorystore__cell_opt__valid__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    bool = a.rec__memorystore__cell_opt__valid
  
  meta model_projection function __split_fields_rec__memorystore__cell_opt__valid__projection
  
  meta inline:no function __split_fields_rec__memorystore__cell_opt__valid__projection
  
  function [name:Val] [model_trace:.3105] 
    __split_fields_rec__memorystore__cell_opt__val__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Memorystore__int32.int32 = a.rec__memorystore__cell_opt__val
  
  meta model_projection function __split_fields_rec__memorystore__cell_opt__val__projection
  
  meta inline:no function __split_fields_rec__memorystore__cell_opt__val__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__5__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__5__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__5__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__5__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__5__projection
  
  meta inline:no function __rep___split_fields__5__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   memorystore__cell_opt__valid__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__memorystore__cell_opt__valid_ (a : __rep) requires
    { (memorystore__cell_opt__valid__pred a) } ensures 
    { (result = a.__split_fields.rec__memorystore__cell_opt__valid) } returns
    bool
  
  function   memorystore__cell_opt__val__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__memorystore__cell_opt__val_ (a : __rep) requires
    { (memorystore__cell_opt__val__pred a) } ensures 
    { (result = a.__split_fields.rec__memorystore__cell_opt__val) } returns
    Memorystore__int32.int32
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((_gnatprove_standard.Boolean.to_int
                a.__split_fields.rec__memorystore__cell_opt__valid)
               = (_gnatprove_standard.Boolean.to_int
                    b.__split_fields.rec__memorystore__cell_opt__valid)) /\
              ((Memorystore__int32__rep.to_rep
                  a.__split_fields.rec__memorystore__cell_opt__val)
                 = (Memorystore__int32__rep.to_rep
                      b.__split_fields.rec__memorystore__cell_opt__val)))
           then True  else False)

end

(* Module for axiomatizing type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__cell_opt
  
  use export Memorystore__cell_opt__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type cell_opt  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   memorystore__cell_opt__valid__first__bit () requires {  }
    ensures  {  } returns int
  
  function   memorystore__cell_opt__valid__last__bit () requires {  }
    ensures  {  } returns int
  
  function   memorystore__cell_opt__valid__position () requires {  } ensures 
    {  } returns int
  
  axiom memorystore__cell_opt__valid__first__bit_axiom : ((memorystore__cell_opt__valid__first__bit
                                                             ) >= 0)
  
  axiom memorystore__cell_opt__valid__last__bit_axiom : ((memorystore__cell_opt__valid__last__bit
                                                            )
                                                           > (memorystore__cell_opt__valid__first__bit
                                                                ))
  
  axiom memorystore__cell_opt__valid__position_axiom : ((memorystore__cell_opt__valid__position
                                                           ) >= 0)
  
  function   memorystore__cell_opt__val__first__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__cell_opt__val__last__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__cell_opt__val__position () requires {  } ensures 
    {  } returns int
  
  axiom memorystore__cell_opt__val__first__bit_axiom : ((memorystore__cell_opt__val__first__bit
                                                           ) >= 0)
  
  axiom memorystore__cell_opt__val__last__bit_axiom : ((memorystore__cell_opt__val__last__bit
                                                          )
                                                         > (memorystore__cell_opt__val__first__bit
                                                              ))
  
  axiom memorystore__cell_opt__val__position_axiom : ((memorystore__cell_opt__val__position
                                                         ) >= 0)
  
  function   user_eq (a : cell_opt b : cell_opt) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns cell_opt
  
  type cell_opt__ref  = { mutable cell_opt__content : cell_opt }
  
  function   cell_opt__ref_cell_opt__content__projection (a : cell_opt__ref)
    requires {  } ensures  {  } returns cell_opt = a.cell_opt__content
  
  meta model_projection function cell_opt__ref_cell_opt__content__projection
  
  meta inline:no function cell_opt__ref_cell_opt__content__projection
  
  function   cell_opt__havoc (x : cell_opt__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing the array theory associated to type "Tmem_arrayB" defined at memorystore.ads:46, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Memorystore__cell_opt
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Memorystore__cell_opt
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__mem_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 1
  
  function   last () requires {  } ensures  {  } returns int = 256
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Memorystore__cell_opt.map,
    function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "database" defined at memorystore.ads:48, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Memorystore__database__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  use        Memorystore__mem_array
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  
  type __split_fields  = { [name:Mem]
                           [model_trace:.3120]rec__memorystore__database__mem : Array__Int__Memorystore__cell_opt.map;
                           [name:Cnt]
                           [model_trace:.3125]rec__memorystore__database__cnt : Standard__natural.natural }
  
  function [name:Mem] [model_trace:.3120] 
    __split_fields_rec__memorystore__database__mem__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Memorystore__cell_opt.map = a.rec__memorystore__database__mem
  
  meta model_projection function __split_fields_rec__memorystore__database__mem__projection
  
  meta inline:no function __split_fields_rec__memorystore__database__mem__projection
  
  function [name:Cnt] [model_trace:.3125] 
    __split_fields_rec__memorystore__database__cnt__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Standard__natural.natural = a.rec__memorystore__database__cnt
  
  meta model_projection function __split_fields_rec__memorystore__database__cnt__projection
  
  meta inline:no function __split_fields_rec__memorystore__database__cnt__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__6__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__6__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__6__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__6__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__6__projection
  
  meta inline:no function __rep___split_fields__6__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   memorystore__database__mem__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__memorystore__database__mem_ (a : __rep) requires
    { (memorystore__database__mem__pred a) } ensures 
    { (result = a.__split_fields.rec__memorystore__database__mem) } returns
    Array__Int__Memorystore__cell_opt.map
  
  function   memorystore__database__cnt__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__memorystore__database__cnt_ (a : __rep) requires
    { (memorystore__database__cnt__pred a) } ensures 
    { (result = a.__split_fields.rec__memorystore__database__cnt) } returns
    Standard__natural.natural
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((Memorystore__mem_array.bool_eq
               a.__split_fields.rec__memorystore__database__mem
               b.__split_fields.rec__memorystore__database__mem) /\
              ((Standard__natural__rep.to_rep
                  a.__split_fields.rec__memorystore__database__cnt)
                 = (Standard__natural__rep.to_rep
                      b.__split_fields.rec__memorystore__database__cnt)))
           then True  else False)

end

(* Module for axiomatizing type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__database
  
  use export Memorystore__database__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type database  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   memorystore__database__mem__first__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__database__mem__last__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__database__mem__position () requires {  } ensures 
    {  } returns int
  
  axiom memorystore__database__mem__first__bit_axiom : ((memorystore__database__mem__first__bit
                                                           ) >= 0)
  
  axiom memorystore__database__mem__last__bit_axiom : ((memorystore__database__mem__last__bit
                                                          )
                                                         > (memorystore__database__mem__first__bit
                                                              ))
  
  axiom memorystore__database__mem__position_axiom : ((memorystore__database__mem__position
                                                         ) >= 0)
  
  function   memorystore__database__cnt__first__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__database__cnt__last__bit () requires {  } ensures 
    {  } returns int
  
  function   memorystore__database__cnt__position () requires {  } ensures 
    {  } returns int
  
  axiom memorystore__database__cnt__first__bit_axiom : ((memorystore__database__cnt__first__bit
                                                           ) >= 0)
  
  axiom memorystore__database__cnt__last__bit_axiom : ((memorystore__database__cnt__last__bit
                                                          )
                                                         > (memorystore__database__cnt__first__bit
                                                              ))
  
  axiom memorystore__database__cnt__position_axiom : ((memorystore__database__cnt__position
                                                         ) >= 0)
  
  function   user_eq (a : database b : database) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns database
  
  type database__ref  = { mutable database__content : database }
  
  function   database__ref_database__content__projection (a : database__ref)
    requires {  } ensures  {  } returns database = a.database__content
  
  meta model_projection function database__ref_database__content__projection
  
  meta inline:no function database__ref_database__content__projection
  
  function   database__havoc (x : database__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "d" defined at main.adb:31, created in Gnat2Why.Decls.Translate_Variable *)
module Main__d
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Memorystore__database
  
  val d__split_fields [model_trace:901] [model_projected]
  [name:D] [sloc:main.adb:31]: Memorystore__database.__split_fields

end

(* Module for axiomatizing type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Memorystore__location_index
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type location_index  = <range 1 256>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns int = 256
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = location_index,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type location_index__ref  = { mutable location_index__content : location_index }
  
  function   location_index__ref_location_index__content__projection
    (a : location_index__ref) requires {  } ensures  {  } returns
    location_index = a.location_index__content
  
  meta model_projection function location_index__ref_location_index__content__projection
  
  meta inline:no function location_index__ref_location_index__content__projection
  
  function   location_index__havoc (x : location_index__ref) requires {  }
    ensures  {  } returns unit

end

(* Module giving axioms for type "database" defined at memorystore.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__database___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__natural
  use        Standard__natural__rep
  use        Memorystore__database
  use        Memorystore__location_index
  use        Memorystore__int32
  use        Memorystore__int32__rep
  use        Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_345) : Memorystore__database.database
    ([mlw:proxy_symbol] [introduced] temp___is_init_341) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_342) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_343) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_344) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_347) : Memorystore__database.database
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_348) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Memorystore__database.memorystore__database__mem__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_347))
        then
        (let ([mlw:proxy_symbol] [introduced] temp___349) =
        ([mlw:proxy_symbol]
          [introduced] temp___expr_347).Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__mem
        in --pp_universal_quantif NOT IMPLEMENTED) ) /\
          (if
          (Memorystore__database.memorystore__database__cnt__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_347))
          then
          (( (Standard__natural__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_347).Memorystore__database.__split_fields.Memorystore__database.rec__memorystore__database__cnt))
             = ( 0))
          ))

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   argument_count (__void_param : unit) requires { True } ensures 
    { True } returns int
  
  function   argument_count__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_165) : int
    __void_param : unit) requires { True } ensures  { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__natural
  use        Standard__natural___axiom
  use        Mycommandline__argument_count
  
  function   argument_count (__void_param : unit) requires { True } ensures 
    { ((result = (Mycommandline__argument_count.argument_count ())) /\
         (Mycommandline__argument_count.argument_count__function_guard result
            ()) /\
         (Standard__natural___axiom.dynamic_invariant result True False True
            True)) } returns int
  
  axiom argument_count__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:6262] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:6268] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function   argument (number : int) requires { True } ensures  { True }
    returns Standard__string.string__
  
  function   argument__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_166) : Standard__string.string__ number : int)
    requires { True } ensures  { True } returns bool

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__string
  use        Standard__string___axiom
  use        Mycommandline__argument_count
  use        Mycommandline__argument
  
  function   argument (number : int) requires
    { ([GP_Pretty_Ada:11338] (number
                                <= (epsilon ([mlw:proxy_symbol]
                                   [introduced] temp___result_353) : int {
                                   ((([mlw:proxy_symbol]
                                       [introduced] temp___result_353)
                                       = (Mycommandline__argument_count.argument_count
                                            ())) /\
                                      (Mycommandline__argument_count.argument_count__function_guard
                                         ([mlw:proxy_symbol]
                                         [introduced] temp___result_353) ()))}))) }
    ensures 
    { ((result = (Mycommandline__argument.argument number)) /\
         (Mycommandline__argument.argument__function_guard result number) /\
         (Standard__string___axiom.dynamic_invariant result True False True
            True)) } returns Standard__string.string__

end

(* Module for defining the constant "pin_str" defined at main.adb:41, created in Gnat2Why.Decls.Translate_Constant *)
module Main__B_1__pin_str
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function [model_projected] [name:PIN_Str] [model_trace:918]
    [sloc:main.adb:41] pin_str () requires {  } ensures  {  } returns
    Standard__string.string__

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__string
  
  function   from_string (s : Standard__string.string__) requires { True }
    ensures  { True } returns int
  
  function   from_string__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_168) : int
    s : Standard__string.string__) requires { True } ensures  { True }
    returns bool

end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Pin__pin
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_241) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_237) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_238) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_239) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_240) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_237) = True) \/
          (Pin__pin.first <= Pin__pin.last))
       then
       (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last
          ([mlw:proxy_symbol] [introduced] temp___expr_241))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_242) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_243) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Pin__from_string
  use        Pin__pin___axiom
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   from_string (s : Standard__string.string__) requires
    { (([GP_Pretty_Ada:2968] ((Standard__string.length s) = 4)) /\
         --pp_universal_quantif NOT IMPLEMENTED) } ensures 
    { ((result = (Pin__from_string.from_string s)) /\
         (Pin__from_string.from_string__function_guard result s) /\
         (Pin__pin___axiom.dynamic_invariant result True False True True)) }
    returns int
  
  axiom from_string__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at locker.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  use        Locker__locker___axiom
  
  function   init
    (l__split_fields : Locker__locker.__split_fields__ref n : int) requires
    { True } ensures 
    { (Locker__locker___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at stack.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Stack__stack_instance
  use        Stack__stack_instance___axiom
  
  function   init
    (s__split_fields : Stack__stack_instance.__split_fields__ref) requires
    { True } ensures 
    { (Stack__stack_instance___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at memorystore.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Memorystore__init___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Memorystore__database
  use        Memorystore__database___axiom
  
  function   init
    (d__split_fields : Memorystore__database.__split_fields__ref) requires
    { True } ensures 
    { (Memorystore__database___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for possibly declaring a logic function for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Locker__is_locked
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { True } returns bool
  
  function   is_locked__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_169) : bool
    l : Locker__locker.locker) requires { True } ensures  { True } returns
    bool

end

(* Module for declaring a program function (and possibly an axiom) for "is_locked" defined at locker.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Locker__is_locked___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  use        Locker__locker___axiom
  use        Locker__is_locked
  
  function   is_locked (l : Locker__locker.locker) requires { True } ensures 
    { ((result = (Locker__is_locked.is_locked l)) /\
         (Locker__is_locked.is_locked__function_guard result l) /\ True) }
    returns bool
  
  axiom is_locked__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:463, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put__4___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   put (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:6040] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out
                                     !Ada___ada__text_io__current_err.current_err)))
         /\
         ([GP_Pretty_Ada:6046] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out
                                       !Ada___ada__text_io__current_err.current_err)))) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:45 instantiated at mystring_instance.ads:4, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystring_instance__lines__get_line___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Mystring_instance__lines__mystring
  use        Mystring_instance__lines__mystring___axiom
  
  function   get_line
    (m__split_fields : Mystring_instance__lines__mystring.__split_fields__ref)
    requires { True } ensures 
    { (Mystring_instance__lines__mystring___axiom.dynamic_invariant
         --pp_record_aggregate NOT IMPLEMENTED True True True True) } returns
    unit

end

(* Module for declaring a program function (and possibly an axiom) for "execute" defined at commandhandler.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Commandhandler__execute___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Locker__locker
  use        Locker__locker___axiom
  use        Mystring_instance__lines__mystring
  use        Stack__stack_instance
  use        Stack__stack_instance___axiom
  use        Memorystore__database
  use        Memorystore__database___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   execute
    (l__split_fields : Locker__locker.__split_fields__ref
    sk__split_fields : Stack__stack_instance.__split_fields__ref
    d__split_fields : Memorystore__database.__split_fields__ref
    s : Mystring_instance__lines__mystring.mystring) requires { True }
    ensures 
    { (((Locker__locker___axiom.dynamic_invariant
           --pp_record_aggregate NOT IMPLEMENTED True True True True) /\
          (Stack__stack_instance___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True True True True)) /\
         (Memorystore__database___axiom.dynamic_invariant
            --pp_record_aggregate NOT IMPLEMENTED True True True True)) }
    returns unit

end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:55, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_2
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  --pp_exception_declaration NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:36, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_374
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_374 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_374__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:45, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_376
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_376 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_376__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:57, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_383
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_383 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_383__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:59, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_385
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_385 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_385__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "l" defined at main.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__l___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "s" defined at main.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "sk" defined at main.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__sk___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "d" defined at main.adb:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__d___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for defining the value of constant "pin_str" defined at main.adb:41, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__B_1__pin_str___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__string
  use        Mycommandline__argument
  use        Main__B_1__pin_str
  
  axiom pin_str__def_axiom : ((Main__B_1__pin_str.pin_str )
                                = (epsilon ([mlw:proxy_symbol]
                                  [introduced] temp___result_167) : Standard__string.string__ {
                                  ((([mlw:proxy_symbol]
                                      [introduced] temp___result_167)
                                      = (Mycommandline__argument.argument
                                           ( 1))) /\
                                     (Mycommandline__argument.argument__function_guard
                                        ([mlw:proxy_symbol]
                                        [introduced] temp___result_167) 
                                        ( 1)))}))

end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "location_index" defined at memorystore.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__location_index___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Memorystore__location_index
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_314) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_310) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_311) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_312) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_313) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_310) = True) \/
          (Memorystore__location_index.first
             <= Memorystore__location_index.last))
       then
       (Memorystore__location_index.dynamic_property
          Memorystore__location_index.first Memorystore__location_index.last
          ([mlw:proxy_symbol] [introduced] temp___expr_314))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_315) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_316) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "int32" defined at memorystore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__int32___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Memorystore__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_321) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_317) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_318) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_319) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_320) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_317) = True) \/
          (Memorystore__int32.first <= Memorystore__int32.last))
       then
       (Memorystore__int32.dynamic_property Memorystore__int32.first
          Memorystore__int32.last ([mlw:proxy_symbol]
          [introduced] temp___expr_321))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_322) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_323) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "cell_opt" defined at memorystore.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__cell_opt___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Memorystore__int32
  use        Memorystore__int32__rep
  use        Memorystore__cell_opt
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_328) : Memorystore__cell_opt.cell_opt
    ([mlw:proxy_symbol] [introduced] temp___is_init_324) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_325) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_326) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_327) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_329) : Memorystore__cell_opt.cell_opt
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_330) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Memorystore__cell_opt.memorystore__cell_opt__valid__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_329))
        then
        (([mlw:proxy_symbol]
           [introduced] temp___expr_329).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__valid
           = (_gnatprove_standard.Boolean.of_int 0))
        ) /\
          (if
          (Memorystore__cell_opt.memorystore__cell_opt__val__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_329))
          then
          (( (Memorystore__int32__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_329).Memorystore__cell_opt.__split_fields.Memorystore__cell_opt.rec__memorystore__cell_opt__val))
             = ( 0))
          ))

end

(* Module giving axioms for type "mem_array" defined at memorystore.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Memorystore__mem_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Memorystore__location_index
  use        Memorystore__int32
  use        Memorystore__int32__rep
  use        Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  use        Array__Int__Memorystore__cell_opt
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_335) : Array__Int__Memorystore__cell_opt.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_331) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_332) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_333) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_334) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_337) : Array__Int__Memorystore__cell_opt.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_338) : bool)
    requires { True } ensures  { True } returns
     = --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_170) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_174))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out
               !Ada___ada__text_io__current_err.current_err)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "int32" defined at stack.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__int32___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_286) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_282) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_283) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_284) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_285) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_282) = True) \/
          (Stack__int32.first <= Stack__int32.last))
       then
       (Stack__int32.dynamic_property Stack__int32.first Stack__int32.last
          ([mlw:proxy_symbol] [introduced] temp___expr_286))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_287) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_288) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "stack_array" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Stack__int32
  use        Array__Int__Stack__int32
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_293) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_289) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_290) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_291) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_292) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_295) : Array__Int__Stack__int32.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_296) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:48 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystring_instance__lines__mystringstr___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_257) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_253) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_254) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_255) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_256) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_259) : Array__Int__Standard__character.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_260) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "T13s" defined at mystring.ads:50 instantiated at mystring_instance.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystring_instance__lines__mystring__T13s___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Boolean
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Standard__string
  use        Standard__string___axiom
  use        Main__l
  use        Locker__locker
  use        Locker__locker___axiom
  use        Main__s
  use        Mystring_instance__lines__mystring
  use        Mystring_instance__lines__mystring___axiom
  use        Main__sk
  use        Stack__stack_instance
  use        Stack__stack_instance___axiom
  use        Main__d
  use        Memorystore__database
  use        Memorystore__database___axiom
  use        Mycommandline__argument_count___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Mycommandline__argument___axiom
  use        Main__B_1__pin_str
  use        Pin__from_string___axiom
  use        Locker__init___axiom
  use        Stack__init___axiom
  use        Memorystore__init___axiom
  use        Locker__is_locked___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Mystring_instance__lines__get_line___axiom
  use        Commandhandler__execute___axiom
  use        Main__L_2
  use        Temp___String_Literal_374
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_376
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_383
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_385
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__natural___axiom
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Main__l___axiom
  use        Main__s___axiom
  use        Main__sk___axiom
  use        Main__d___axiom
  use        Main__B_1__pin_str___axiom
  use        Main__L_2___axiom
  use        Mycommandline__argument_count___axiom
  use        Mycommandline__argument___axiom
  use        Pin__from_string___axiom
  use        Pin__pin___axiom
  use        Memorystore__location_index___axiom
  use        Memorystore__int32___axiom
  use        Memorystore__init___axiom
  use        Memorystore__cell_opt___axiom
  use        Memorystore__mem_array___axiom
  use        Memorystore__database___axiom
  use        Locker__init___axiom
  use        Locker__is_locked___axiom
  use        Locker__locker___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        Stack__int32___axiom
  use        Stack__stack_array___axiom
  use        Stack__init___axiom
  use        Stack__stack_instance___axiom
  use        Commandhandler__execute___axiom
  use        Mystring_instance__lines__mystringstr___axiom
  use        Mystring_instance__lines__mystring___axiom
  use        Mystring_instance__lines__get_line___axiom
  use        Mystring_instance__lines__mystring__T13s___axiom
  
  function [GP_Subp:main.adb:22] [sloc:main.adb:22] def (__void_param : unit)
    requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram main.adb:22 *);
        (* Assume moved pointers in outputs of the subprogram main.adb:22 *);
        (* Check for RTE in the Pre of the subprogram main.adb:22 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram main.adb:22 *);
        (try
        ();
          ([sloc:main.adb:23] ());
          ([sloc:main.adb:25] ());
          ([sloc:main.adb:26] ());
          ([sloc:main.adb:28] assume
          { (Locker__locker___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Locker__locker___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:29] assume
          { (Mystring_instance__lines__mystring___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Mystring_instance__lines__mystring___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:30] assume
          { (Stack__stack_instance___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Stack__stack_instance___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:31] assume
          { (Memorystore__database___axiom.default_initial_assumption
               --pp_record_aggregate NOT IMPLEMENTED False) };
          assume
          { (Memorystore__database___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED False False True True) });
          ([sloc:main.adb:40] ());
          ([sloc:main.adb:55] ());
          ();
          ([GP_Sloc:main.adb:35:20] ([sloc:main.adb:35] ()));
          ([GP_Sloc:main.adb:35:4] ([sloc:main.adb:35] (if
                                                       ([sloc:main.adb:35] ([branch_id=907]
                                                       _gnatprove_standard.Main.spark__branch
                                                       :=
                                                       ((Mycommandline__argument_count___axiom.argument_count
                                                           ()) <> 1)));
                                                       ([branch_id=907] _gnatprove_standard.Main.spark__branch).bool__content
                                                       then
                                                       ();
                                                       ([GP_Sloc:main.adb:36:6] 
                                                       ([sloc:main.adb:36] ()));
                                                       ([GP_Sloc:main.adb:36:6] 
                                                       ([sloc:main.adb:36] (
                                                        any
                                                         --pp_effects NOT IMPLEMENTED
                                                         pre {}
                                                       post {} return unit);
                                                       (Ada___ada__text_io__put_line__2___axiom.put_line
                                                          (let ([mlw:proxy_symbol]
                                                          [introduced] temp___375)
                                                          =
                                                          ( (Temp___String_Literal_374.temp___String_Literal_374
                                                               ())) in
                                                          (Standard__string.of_array
                                                             ([mlw:proxy_symbol]
                                                             [introduced] temp___375)
                                                             1 37)));
                                                       ()));
                                                       ([GP_Sloc:main.adb:37:6] 
                                                       ([sloc:main.adb:37] raise Return__exc))
                                    else ())));
        ([GP_Sloc:main.adb:40:4] ([sloc:main.adb:40] ();
                                 ([sloc:main.adb:41] ());
                                 ([sloc:main.adb:41] (let main__B_1__pin_str__assume
                                 =
                                 ([sloc:main.adb:41] ([GP_Reason:VC_PRECONDITION]
                                                     [vc:annotation]
                                                     [comment:      PIN_Str : constant String := MyCommandLine.Argument(1);                                                 ^ main.adb:41:49:VC_PRECONDITION]
                                                     [GP_Shape:B_1_declblk__pin_str_decl__call_argument]
                                                     [GP_Id:2]
                                                     [GP_Sloc:main.adb:41:49] (
                                                     Mycommandline__argument___axiom.argument
                                                       ( 1))))
                                 in assume
                                 { (main__B_1__pin_str__assume
                                      = Main__B_1__pin_str.pin_str) });
                                 assume
                                 { (Standard__string___axiom.dynamic_invariant
                                      Main__B_1__pin_str.pin_str True False
                                      True True) });
                                 ();
                                 ([GP_Sloc:main.adb:43:7] ([sloc:main.adb:43] 
                                                          (if
                                                          ([sloc:main.adb:43] ([branch_id=928]
                                                          _gnatprove_standard.Main.spark__branch
                                                          :=
                                                          ((abstract ensures
                                                              { True } begin 
                                                               (let _ =
                                                              Main__B_1__pin_str.pin_str
                                                              in ())  end;
                                                              (Standard__string.length
                                                                 Main__B_1__pin_str.pin_str)
                                                              <> 4) || (let i
                                                             =
                                                             ( any  pre {}
                                                               post {
                                                               } return int)
                                                            in
                                                            (if
                                                            (_gnatprove_standard.Boolean.andb
                                                               (abstract
                                                                  ensures
                                                                  { True } begin 
                                                                   (let _ =
                                                                  Main__B_1__pin_str.pin_str
                                                                  in ())  end;
                                                                  (Standard__string.first
                                                                    Main__B_1__pin_str.pin_str)
                                                                  <= i)
                                                               (i <= abstract
                                                                  ensures
                                                                  { True } begin 
                                                                   (let _ =
                                                                  Main__B_1__pin_str.pin_str
                                                                  in ())  end;
                                                                  (Standard__string.last
                                                                    Main__B_1__pin_str.pin_str)))
                                                            then
                                                            abstract ensures
                                                            { True } begin 
                                                             (let _ =
                                                            --pp_not NOT IMPLEMENTED
                                                            in ())  end ));
                                                            ( any  pre {}
                                                            post
                                                            {((result = True)
                                                                <->
                                                                --pp_existential_quantif NOT IMPLEMENTED)}
                                                            return bool))));
                                 ([branch_id=928] _gnatprove_standard.Main.spark__branch).bool__content
                                 then
                                 ();
                                 ([GP_Sloc:main.adb:45:10] ([sloc:main.adb:45] ()));
                                 ([GP_Sloc:main.adb:45:10] ([sloc:main.adb:45] (
                                                            any
                                                             --pp_effects NOT IMPLEMENTED
                                                             pre {}
                                                           post {} return
                                                           unit);
                                 (Ada___ada__text_io__put_line__2___axiom.put_line
                                    (let ([mlw:proxy_symbol]
                                    [introduced] temp___377) =
                                    ( (Temp___String_Literal_376.temp___String_Literal_376
                                         ())) in
                                    (Standard__string.of_array
                                       ([mlw:proxy_symbol]
                                       [introduced] temp___377) 1 37)));
                                 ()));
                                 ([GP_Sloc:main.adb:46:10] ([sloc:main.adb:46] raise Return__exc))
                                  else
                                 ();
                                 ([GP_Sloc:main.adb:48:22] ([sloc:main.adb:48] ()));
                                 ([GP_Sloc:main.adb:48:27] ([sloc:main.adb:48] ()));
                                 ([GP_Sloc:main.adb:48:16] ([sloc:main.adb:48] ()));
                                 ([GP_Sloc:main.adb:48:16] ([sloc:main.adb:48] (let ([mlw:proxy_symbol]
                                                           [introduced] temp___compl_378)
                                                           =
                                                           ( --pp_record_aggregate NOT IMPLEMENTED)
                                                           in
                                                           ( any
                                                              --pp_effects NOT IMPLEMENTED
                                                              pre {}
                                                           post {} return
                                                           unit);
                                 (Locker__init___axiom.init
                                    Main__l.l__split_fields
                                    ([sloc:main.adb:48] ([GP_Reason:VC_PRECONDITION]
                                                        [GP_Sloc:main.adb:48:27]
                                                        [GP_Shape:B_1_declblk__if__call_init__call_from_string]
                                                        [vc:annotation]
                                                        [GP_Id:0]
                                                        [comment:         Locker.Init(L,PIN.From_String(PIN_Str));                           ^ main.adb:48:27:VC_PRECONDITION] (
                                                        Pin__from_string___axiom.from_string
                                                          Main__B_1__pin_str.pin_str))));
                                 ()))))))));
([GP_Sloc:main.adb:52:15] ([sloc:main.adb:52] ()));
([GP_Sloc:main.adb:52:9] ([sloc:main.adb:52] ()));
([GP_Sloc:main.adb:52:9] ([sloc:main.adb:52] (let ([mlw:proxy_symbol]
                         [introduced] temp___compl_381) =
                         ( ( --pp_record_aggregate NOT IMPLEMENTED)) in
                         ( any --pp_effects NOT IMPLEMENTED pre {} post {
                         } return unit);
(Stack__init___axiom.init Main__sk.sk__split_fields);
())));
([GP_Sloc:main.adb:53:21] ([sloc:main.adb:53] ()));
([GP_Sloc:main.adb:53:15] ([sloc:main.adb:53] ()));
([GP_Sloc:main.adb:53:15] ([sloc:main.adb:53] (let ([mlw:proxy_symbol]
                          [introduced] temp___compl_382) =
                          ( ( --pp_record_aggregate NOT IMPLEMENTED)) in
                          ( any --pp_effects NOT IMPLEMENTED pre {} post {
                          } return unit);
(Memorystore__init___axiom.init Main__d.d__split_fields);
())));
([GP_Sloc:main.adb:55:4] ([sloc:main.adb:55] (* Translation of an Ada loop from main.adb:55 *);
                         (if True then
                         (try
                         (let temp___loop_entry_394 =
                           --pp_record_aggregate NOT IMPLEMENTED in
                           (let temp___loop_entry_393 =
                           --pp_record_aggregate NOT IMPLEMENTED in
                           (let temp___loop_entry_392 =
                           --pp_record_aggregate NOT IMPLEMENTED in
                           (let temp___loop_entry_391 =
                           --pp_record_aggregate NOT IMPLEMENTED in
                           (* While loop translating the Ada loop from main.adb:55 *);
                           ([sloc:main.adb:55] loop
                                                 (* Check for absence of RTE in the loop invariant and variant *)
                                                 
                                                 
                                                 (* Assume implicit invariants from the loop main.adb:55 *);
                                                 assume
                                                 { ((((True /\
                                                         (Memorystore__database___axiom.dynamic_invariant
                                                            --pp_record_aggregate NOT IMPLEMENTED
                                                            False True True
                                                            True) /\ True /\
                                                         True) /\
                                                        (Locker__locker___axiom.dynamic_invariant
                                                           --pp_record_aggregate NOT IMPLEMENTED
                                                           False True True
                                                           True) /\ True /\
                                                        True) /\
                                                       (Mystring_instance__lines__mystring___axiom.dynamic_invariant
                                                          --pp_record_aggregate NOT IMPLEMENTED
                                                          False True True
                                                          True) /\ True /\
                                                       True) /\
                                                      (Stack__stack_instance___axiom.dynamic_invariant
                                                         --pp_record_aggregate NOT IMPLEMENTED
                                                         False True True True)
                                                      /\ True /\ True) };
                                                 (* Continuation of loop after loop invariant and variant *);
                                                 ();
                                                 ([GP_Sloc:main.adb:56:27] 
                                                 ([sloc:main.adb:56] ()));
                                                 ([GP_Sloc:main.adb:56:16] 
                                                 ([sloc:main.adb:56] ()));
                                                 ([GP_Sloc:main.adb:56:7] 
                                                 ([sloc:main.adb:56] 
                                                 (if
                                                 ([sloc:main.adb:56] ([branch_id=974]
                                                 _gnatprove_standard.Main.spark__branch
                                                 :=
                                                 (Locker__is_locked___axiom.is_locked
                                                    ( --pp_record_aggregate NOT IMPLEMENTED))));
                                                 ([branch_id=974] _gnatprove_standard.Main.spark__branch).bool__content
                                                 then
                                                 ();
                                                 ([GP_Sloc:main.adb:57:10] 
                                                 ([sloc:main.adb:57] ()));
                                                 ([GP_Sloc:main.adb:57:10] 
                                                 ([sloc:main.adb:57] (
                                                  any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                                                 post {} return unit);
                                                 (Ada___ada__text_io__put__4___axiom.put
                                                    (let ([mlw:proxy_symbol]
                                                    [introduced] temp___384)
                                                    =
                                                    ( (Temp___String_Literal_383.temp___String_Literal_383
                                                         ())) in
                                                    (Standard__string.of_array
                                                       ([mlw:proxy_symbol]
                                                       [introduced] temp___384)
                                                       1 8)));
                                                 ()))  else
                                                 ();
                                                 ([GP_Sloc:main.adb:59:10] 
                                                 ([sloc:main.adb:59] ()));
                                                 ([GP_Sloc:main.adb:59:10] 
                                                 ([sloc:main.adb:59] (
                                                  any
                                                   --pp_effects NOT IMPLEMENTED
                                                   pre {}
                                                 post {} return unit);
                                                 (Ada___ada__text_io__put__4___axiom.put
                                                    (let ([mlw:proxy_symbol]
                                                    [introduced] temp___386)
                                                    =
                                                    ( (Temp___String_Literal_385.temp___String_Literal_385
                                                         ())) in
                                                    (Standard__string.of_array
                                                       ([mlw:proxy_symbol]
                                                       [introduced] temp___386)
                                                       1 10)));
                                                 ())))));
                           ([GP_Sloc:main.adb:62:22] ([sloc:main.adb:62] ()));
                           ([GP_Sloc:main.adb:62:12] ([sloc:main.adb:62] ()));
                           ([GP_Sloc:main.adb:62:12] ([sloc:main.adb:62] (let ([mlw:proxy_symbol]
                                                     [introduced] temp___compl_387)
                                                     =
                                                     ( ( --pp_record_aggregate NOT IMPLEMENTED))
                                                     in
                                                     ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                                     post {} return unit);
                           (Mystring_instance__lines__get_line___axiom.get_line
                              Main__s.s__split_fields);
                           ())));
                         ([GP_Sloc:main.adb:63:30] ([sloc:main.adb:63] ()));
                         ([GP_Sloc:main.adb:63:33] ([sloc:main.adb:63] ()));
                         ([GP_Sloc:main.adb:63:37] ([sloc:main.adb:63] ()));
                         ([GP_Sloc:main.adb:63:40] ([sloc:main.adb:63] ()));
                         ([GP_Sloc:main.adb:63:21] ([sloc:main.adb:63] ()));
                         ([GP_Sloc:main.adb:63:21] ([sloc:main.adb:63] (let ([mlw:proxy_symbol]
                                                   [introduced] temp___compl_388)
                                                   =
                                                   ( --pp_record_aggregate NOT IMPLEMENTED)
                                                   in
                                                   (let ([mlw:proxy_symbol]
                                                   [introduced] temp___compl_389)
                                                   =
                                                   ( --pp_record_aggregate NOT IMPLEMENTED)
                                                   in
                                                   (let ([mlw:proxy_symbol]
                                                   [introduced] temp___compl_390)
                                                   =
                                                   ( --pp_record_aggregate NOT IMPLEMENTED)
                                                   in
                                                   ( any
                                                      --pp_effects NOT IMPLEMENTED
                                                      pre {}
                                                   post {} return unit);
                         (Commandhandler__execute___axiom.execute
                            Main__l.l__split_fields Main__sk.sk__split_fields
                            Main__d.d__split_fields
                            ( --pp_record_aggregate NOT IMPLEMENTED));
                         ())))));
                         (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:55 *);
                         (if False then raise Main__L_2.L_2 )
                          end loop))))) with | Main__L_2.L_2  -> ())
)));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
