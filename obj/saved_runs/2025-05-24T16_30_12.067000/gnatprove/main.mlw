module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Pin__pin
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type pin = <range 0 9999>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (9999 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = pin,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type pin__ref = { mutable pin__content : pin }
  
  function pin__ref_pin__content__projection (a: pin__ref) : pin =
    a.pin__content
  
  meta "model_projection" function pin__ref_pin__content__projection
  
  meta "inline:no" function pin__ref_pin__content__projection
  
  val pin__havoc (x: pin__ref) : unit
    writes { x }
end

module Pin__pin__rep
  use Pin__pin as Pin__pin
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Pin__pin.pin) : int = Pin__pin.pin'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Pin__pin.pin,
    predicate in_range = Pin__pin.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Locker__locker__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Pin__pin as Pin__pin
  use Pin__pin__rep as Pin__pin__rep
  
  type __split_fields = {
                       rec__locker__locker__number : Pin__pin.pin;
                       rec__locker__locker__locked : bool
                       }
  
  function __split_fields_rec__locker__locker__number__projection (a: __split_fields) : 
    Pin__pin.pin =
    a.rec__locker__locker__number
  
  meta "model_projection" function __split_fields_rec__locker__locker__number__projection
  
  meta "inline:no" function __split_fields_rec__locker__locker__number__projection
  
  function __split_fields_rec__locker__locker__locked__projection (a: __split_fields) : bool =
    a.rec__locker__locker__locked
  
  meta "model_projection" function __split_fields_rec__locker__locker__locked__projection
  
  meta "inline:no" function __split_fields_rec__locker__locker__locked__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate locker__locker__number__pred (a: __rep) = true
  
  val locker__locker__number__pred (a: __rep) : bool
    ensures { result <-> (locker__locker__number__pred (a : __rep)) }
  
  val rec__locker__locker__number_ (a: __rep) : Pin__pin.pin
    requires { locker__locker__number__pred a }
    ensures { (result = ((__split_fields a).rec__locker__locker__number)) }
  
  predicate locker__locker__locked__pred (a: __rep) = true
  
  val locker__locker__locked__pred (a: __rep) : bool
    ensures { result <-> (locker__locker__locked__pred (a : __rep)) }
  
  val rec__locker__locker__locked_ (a: __rep) : bool
    requires { locker__locker__locked__pred a }
    ensures { (result = ((__split_fields a).rec__locker__locker__locked)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Pin__pin__rep.to_rep
            ((__split_fields a).rec__locker__locker__number))
           = (Pin__pin__rep.to_rep
                ((__split_fields b).rec__locker__locker__number))) /\
          ((Boolean.to_int ((__split_fields a).rec__locker__locker__locked))
             = (Boolean.to_int
                  ((__split_fields b).rec__locker__locker__locked)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Locker__locker
  use export Locker__locker__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type locker = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function locker__locker__number__first__bit : int
  
  val function locker__locker__number__last__bit : int
  
  val function locker__locker__number__position : int
  
  axiom locker__locker__number__first__bit_axiom:
    (locker__locker__number__first__bit >= (0 : int))
  
  axiom locker__locker__number__last__bit_axiom:
    (locker__locker__number__last__bit > locker__locker__number__first__bit)
  
  axiom locker__locker__number__position_axiom:
    (locker__locker__number__position >= (0 : int))
  
  val function locker__locker__locked__first__bit : int
  
  val function locker__locker__locked__last__bit : int
  
  val function locker__locker__locked__position : int
  
  axiom locker__locker__locked__first__bit_axiom:
    (locker__locker__locked__first__bit >= (0 : int))
  
  axiom locker__locker__locked__last__bit_axiom:
    (locker__locker__locked__last__bit > locker__locker__locked__first__bit)
  
  axiom locker__locker__locked__position_axiom:
    (locker__locker__locked__position >= (0 : int))
  
  val function user_eq (a: locker) (b: locker) : bool
  
  val function dummy : locker
  
  type locker__ref = { mutable locker__content : locker }
  
  function locker__ref_locker__content__projection (a: locker__ref) : locker =
    a.locker__content
  
  meta "model_projection" function locker__ref_locker__content__projection
  
  meta "inline:no" function locker__ref_locker__content__projection
  
  val locker__havoc (x: locker__ref) : unit
    writes { x }
end

module Main__l
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  
  val l__split_fields : Locker__locker.__split_fields__ref
end

module Locker__locker___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  
  predicate dynamic_invariant (temp___expr_248: Locker__locker.locker) (temp___is_init_244: bool) (temp___skip_constant_245: bool) (temp___do_toplevel_246: bool) (temp___do_typ_inv_247: bool) =
    true
  
  val dynamic_invariant (temp___expr_248: Locker__locker.locker) (temp___is_init_244: bool) (temp___skip_constant_245: bool) (temp___do_toplevel_246: bool) (temp___do_typ_inv_247: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_248 : Locker__locker.locker))
                      (temp___is_init_244 : bool))
                     (temp___skip_constant_245 : bool))
                    (temp___do_toplevel_246 : bool))
                   (temp___do_typ_inv_247 : bool)) }
  
  predicate default_initial_assumption (temp___expr_249: Locker__locker.locker) (temp___skip_top_level_250: bool) =
    true
  
  val default_initial_assumption (temp___expr_249: Locker__locker.locker) (temp___skip_top_level_250: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_249 : Locker__locker.locker))
                   (temp___skip_top_level_250 : bool)) }
end

module Mystring_instance__lines__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type t13s = <range 0 2048>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = t13s,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type t13s__ref = { mutable t13s__content : t13s }
  
  function t13s__ref_t13s__content__projection (a: t13s__ref) : t13s =
    a.t13s__content
  
  meta "model_projection" function t13s__ref_t13s__content__projection
  
  meta "inline:no" function t13s__ref_t13s__content__projection
  
  val t13s__havoc (x: t13s__ref) : unit
    writes { x }
end

module Mystring_instance__lines__mystring__T13s__rep
  use Mystring_instance__lines__mystring__T13s as Mystring_instance__lines__mystring__T13s
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Mystring_instance__lines__mystring__T13s.t13s) : int =
    Mystring_instance__lines__mystring__T13s.t13s'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Mystring_instance__lines__mystring__T13s.t13s,
    predicate in_range = Mystring_instance__lines__mystring__T13s.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Mystring_instance__lines__mystringstr
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type component_type = Standard__character.character
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2048 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Mystring_instance__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use Mystring_instance__lines__mystring__T13s as Mystring_instance__lines__mystring__T13s
  use Mystring_instance__lines__mystring__T13s__rep as Mystring_instance__lines__mystring__T13s__rep
  use Mystring_instance__lines__mystringstr as Mystring_instance__lines__mystringstr
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  type __split_fields = {
                       rec__mystring_instance__lines__mystring__length :
                         Mystring_instance__lines__mystring__T13s.t13s;
                       rec__mystring_instance__lines__mystring__str :
                         Array__Int__Standard__character.map
                       }
  
  function __split_fields_rec__mystring_instance__lines__mystring__length__projection (a: __split_fields) : 
    Mystring_instance__lines__mystring__T13s.t13s =
    a.rec__mystring_instance__lines__mystring__length
  
  meta "model_projection" function __split_fields_rec__mystring_instance__lines__mystring__length__projection
  
  meta "inline:no" function __split_fields_rec__mystring_instance__lines__mystring__length__projection
  
  function __split_fields_rec__mystring_instance__lines__mystring__str__projection (a: __split_fields) : 
    Array__Int__Standard__character.map =
    a.rec__mystring_instance__lines__mystring__str
  
  meta "model_projection" function __split_fields_rec__mystring_instance__lines__mystring__str__projection
  
  meta "inline:no" function __split_fields_rec__mystring_instance__lines__mystring__str__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__3__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__3__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__3__projection
  
  meta "inline:no" function __rep___split_fields__3__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate mystring_instance__lines__mystring__length__pred (a: __rep) =
    true
  
  val mystring_instance__lines__mystring__length__pred (a: __rep) : bool
    ensures { result
                <->
                (mystring_instance__lines__mystring__length__pred (a : __rep)) }
  
  val rec__mystring_instance__lines__mystring__length_ (a: __rep) : Mystring_instance__lines__mystring__T13s.t13s
    requires { mystring_instance__lines__mystring__length__pred a }
    ensures { (result
                 = ((__split_fields a).rec__mystring_instance__lines__mystring__length)) }
  
  predicate mystring_instance__lines__mystring__str__pred (a: __rep) = true
  
  val mystring_instance__lines__mystring__str__pred (a: __rep) : bool
    ensures { result
                <->
                (mystring_instance__lines__mystring__str__pred (a : __rep)) }
  
  val rec__mystring_instance__lines__mystring__str_ (a: __rep) : Array__Int__Standard__character.map
    requires { mystring_instance__lines__mystring__str__pred a }
    ensures { (result
                 = ((__split_fields a).rec__mystring_instance__lines__mystring__str)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Mystring_instance__lines__mystring__T13s__rep.to_rep
            ((__split_fields a).rec__mystring_instance__lines__mystring__length))
           = (Mystring_instance__lines__mystring__T13s__rep.to_rep
                ((__split_fields b).rec__mystring_instance__lines__mystring__length))) /\
          ((Mystring_instance__lines__mystringstr.bool_eq
              ((__split_fields a).rec__mystring_instance__lines__mystring__str))
             ((__split_fields b).rec__mystring_instance__lines__mystring__str))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Mystring_instance__lines__mystring
  use export Mystring_instance__lines__mystring__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type mystring = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function mystring_instance__lines__mystring__length__first__bit : 
    int
  
  val function mystring_instance__lines__mystring__length__last__bit : 
    int
  
  val function mystring_instance__lines__mystring__length__position : 
    int
  
  axiom mystring_instance__lines__mystring__length__first__bit_axiom:
    (mystring_instance__lines__mystring__length__first__bit >= (0 : int))
  
  axiom mystring_instance__lines__mystring__length__last__bit_axiom:
    (mystring_instance__lines__mystring__length__last__bit
       > mystring_instance__lines__mystring__length__first__bit)
  
  axiom mystring_instance__lines__mystring__length__position_axiom:
    (mystring_instance__lines__mystring__length__position >= (0 : int))
  
  val function mystring_instance__lines__mystring__str__first__bit : 
    int
  
  val function mystring_instance__lines__mystring__str__last__bit : int
  
  val function mystring_instance__lines__mystring__str__position : int
  
  axiom mystring_instance__lines__mystring__str__first__bit_axiom:
    (mystring_instance__lines__mystring__str__first__bit >= (0 : int))
  
  axiom mystring_instance__lines__mystring__str__last__bit_axiom:
    (mystring_instance__lines__mystring__str__last__bit
       > mystring_instance__lines__mystring__str__first__bit)
  
  axiom mystring_instance__lines__mystring__str__position_axiom:
    (mystring_instance__lines__mystring__str__position >= (0 : int))
  
  val function user_eq (a: mystring) (b: mystring) : bool
  
  val function dummy : mystring
  
  type mystring__ref = { mutable mystring__content : mystring }
  
  function mystring__ref_mystring__content__projection (a: mystring__ref) : mystring =
    a.mystring__content
  
  meta "model_projection" function mystring__ref_mystring__content__projection
  
  meta "inline:no" function mystring__ref_mystring__content__projection
  
  val mystring__havoc (x: mystring__ref) : unit
    writes { x }
end

module Main__s
  use _gnatprove_standard.Main
  use int.Int
  use Mystring_instance__lines__mystring as Mystring_instance__lines__mystring
  
  val s__split_fields : Mystring_instance__lines__mystring.__split_fields__ref
end

module Mystring_instance__lines__mystring___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Mystring_instance__lines__mystring as Mystring_instance__lines__mystring
  
  predicate dynamic_invariant (temp___expr_267: Mystring_instance__lines__mystring.mystring) (temp___is_init_263: bool) (temp___skip_constant_264: bool) (temp___do_toplevel_265: bool) (temp___do_typ_inv_266: bool) =
    true
  
  val dynamic_invariant (temp___expr_267: Mystring_instance__lines__mystring.mystring) (temp___is_init_263: bool) (temp___skip_constant_264: bool) (temp___do_toplevel_265: bool) (temp___do_typ_inv_266: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_267 :
                          Mystring_instance__lines__mystring.mystring))
                      (temp___is_init_263 : bool))
                     (temp___skip_constant_264 : bool))
                    (temp___do_toplevel_265 : bool))
                   (temp___do_typ_inv_266 : bool)) }
  
  predicate default_initial_assumption (temp___expr_269: Mystring_instance__lines__mystring.mystring) (temp___skip_top_level_270: bool) =
    true
  
  val default_initial_assumption (temp___expr_269: Mystring_instance__lines__mystring.mystring) (temp___skip_top_level_270: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_269 :
                       Mystring_instance__lines__mystring.mystring))
                   (temp___skip_top_level_270 : bool)) }
end

module Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type natural = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = natural,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type natural__ref = { mutable natural__content : natural }
  
  function natural__ref_natural__content__projection (a: natural__ref) : natural =
    a.natural__content
  
  meta "model_projection" function natural__ref_natural__content__projection
  
  meta "inline:no" function natural__ref_natural__content__projection
  
  val natural__havoc (x: natural__ref) : unit
    writes { x }
end

module Standard__natural__rep
  use Standard__natural as Standard__natural
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__natural.natural) : int =
    Standard__natural.natural'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Stack__int32
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type int32 = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = int32,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type int32__ref = { mutable int32__content : int32 }
  
  function int32__ref_int32__content__3__projection (a: int32__ref) : int32 =
    a.int32__content
  
  meta "model_projection" function int32__ref_int32__content__3__projection
  
  meta "inline:no" function int32__ref_int32__content__3__projection
  
  val int32__havoc (x: int32__ref) : unit
    writes { x }
end

module Stack__int32__rep
  use Stack__int32 as Stack__int32
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Stack__int32.int32) : int = Stack__int32.int32'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Stack__int32.int32,
    predicate in_range = Stack__int32.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Stack__int32
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Stack__int32 as Stack__int32
  use Stack__int32__rep as Stack__int32__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Stack__int32.int32
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_163 : int.
          if ((a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last)) then
            ((Stack__int32__rep.to_rep ((get a) temp___idx_163))
               = (Stack__int32__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_163))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_163 : int.
                 if ((a__first <= temp___idx_163) /\
                       (temp___idx_163 <= a__last)) then
                   ((Stack__int32__rep.to_rep ((get a) temp___idx_163))
                      = (Stack__int32__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_163))))
                 else true)))
end

module Stack__stack_array
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Stack__int32 as Stack__int32
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  
  type component_type = Stack__int32.int32
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (512 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Stack__int32.map,
    function array_bool_eq = Array__Int__Stack__int32.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Stack__stack_instance__rep
  use _gnatprove_standard.Main
  use int.Int
  use Standard__natural as Standard__natural
  use Standard__natural__rep as Standard__natural__rep
  use Stack__stack_array as Stack__stack_array
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  
  type __split_fields = {
                       rec__stack__stack_instance__data :
                         Array__Int__Stack__int32.map;
                       rec__stack__stack_instance__top_index :
                         Standard__natural.natural
                       }
  
  function __split_fields_rec__stack__stack_instance__data__projection (a: __split_fields) : 
    Array__Int__Stack__int32.map =
    a.rec__stack__stack_instance__data
  
  meta "model_projection" function __split_fields_rec__stack__stack_instance__data__projection
  
  meta "inline:no" function __split_fields_rec__stack__stack_instance__data__projection
  
  function __split_fields_rec__stack__stack_instance__top_index__projection (a: __split_fields) : 
    Standard__natural.natural =
    a.rec__stack__stack_instance__top_index
  
  meta "model_projection" function __split_fields_rec__stack__stack_instance__top_index__projection
  
  meta "inline:no" function __split_fields_rec__stack__stack_instance__top_index__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__4__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__4__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__4__projection
  
  meta "inline:no" function __rep___split_fields__4__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate stack__stack_instance__data__pred (a: __rep) = true
  
  val stack__stack_instance__data__pred (a: __rep) : bool
    ensures { result <-> (stack__stack_instance__data__pred (a : __rep)) }
  
  val rec__stack__stack_instance__data_ (a: __rep) : Array__Int__Stack__int32.map
    requires { stack__stack_instance__data__pred a }
    ensures { (result
                 = ((__split_fields a).rec__stack__stack_instance__data)) }
  
  predicate stack__stack_instance__top_index__pred (a: __rep) = true
  
  val stack__stack_instance__top_index__pred (a: __rep) : bool
    ensures { result <-> (stack__stack_instance__top_index__pred (a : __rep)) }
  
  val rec__stack__stack_instance__top_index_ (a: __rep) : Standard__natural.natural
    requires { stack__stack_instance__top_index__pred a }
    ensures { (result
                 = ((__split_fields a).rec__stack__stack_instance__top_index)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Stack__stack_array.bool_eq
            ((__split_fields a).rec__stack__stack_instance__data))
           ((__split_fields b).rec__stack__stack_instance__data)) /\
          ((Standard__natural__rep.to_rep
              ((__split_fields a).rec__stack__stack_instance__top_index))
             = (Standard__natural__rep.to_rep
                  ((__split_fields b).rec__stack__stack_instance__top_index)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Stack__stack_instance
  use export Stack__stack_instance__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type stack_instance = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function stack__stack_instance__data__first__bit : int
  
  val function stack__stack_instance__data__last__bit : int
  
  val function stack__stack_instance__data__position : int
  
  axiom stack__stack_instance__data__first__bit_axiom:
    (stack__stack_instance__data__first__bit >= (0 : int))
  
  axiom stack__stack_instance__data__last__bit_axiom:
    (stack__stack_instance__data__last__bit
       > stack__stack_instance__data__first__bit)
  
  axiom stack__stack_instance__data__position_axiom:
    (stack__stack_instance__data__position >= (0 : int))
  
  val function stack__stack_instance__top_index__first__bit : int
  
  val function stack__stack_instance__top_index__last__bit : int
  
  val function stack__stack_instance__top_index__position : int
  
  axiom stack__stack_instance__top_index__first__bit_axiom:
    (stack__stack_instance__top_index__first__bit >= (0 : int))
  
  axiom stack__stack_instance__top_index__last__bit_axiom:
    (stack__stack_instance__top_index__last__bit
       > stack__stack_instance__top_index__first__bit)
  
  axiom stack__stack_instance__top_index__position_axiom:
    (stack__stack_instance__top_index__position >= (0 : int))
  
  val function user_eq (a: stack_instance) (b: stack_instance) : bool
  
  val function dummy : stack_instance
  
  type stack_instance__ref = {
                            mutable stack_instance__content : stack_instance
                            }
  
  function stack_instance__ref_stack_instance__content__projection (a: stack_instance__ref) : stack_instance =
    a.stack_instance__content
  
  meta "model_projection" function stack_instance__ref_stack_instance__content__projection
  
  meta "inline:no" function stack_instance__ref_stack_instance__content__projection
  
  val stack_instance__havoc (x: stack_instance__ref) : unit
    writes { x }
end

module Main__sk
  use _gnatprove_standard.Main
  use int.Int
  use Stack__stack_instance as Stack__stack_instance
  
  val sk__split_fields : Stack__stack_instance.__split_fields__ref
end

module Stack__stack_instance___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  use Standard__natural__rep as Standard__natural__rep
  use Stack__stack_instance as Stack__stack_instance
  
  predicate dynamic_invariant (temp___expr_303: Stack__stack_instance.stack_instance) (temp___is_init_299: bool) (temp___skip_constant_300: bool) (temp___do_toplevel_301: bool) (temp___do_typ_inv_302: bool) =
    true
  
  val dynamic_invariant (temp___expr_303: Stack__stack_instance.stack_instance) (temp___is_init_299: bool) (temp___skip_constant_300: bool) (temp___do_toplevel_301: bool) (temp___do_typ_inv_302: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_303 :
                          Stack__stack_instance.stack_instance))
                      (temp___is_init_299 : bool))
                     (temp___skip_constant_300 : bool))
                    (temp___do_toplevel_301 : bool))
                   (temp___do_typ_inv_302 : bool)) }
  
  predicate default_initial_assumption (temp___expr_305: Stack__stack_instance.stack_instance) (temp___skip_top_level_306: bool) =
    if (Stack__stack_instance.stack__stack_instance__top_index__pred
          temp___expr_305) then
      ((Standard__natural__rep.to_rep
          ((Stack__stack_instance.__split_fields temp___expr_305).Stack__stack_instance.rec__stack__stack_instance__top_index))
         = (0 : int))
    else true
  
  val default_initial_assumption (temp___expr_305: Stack__stack_instance.stack_instance) (temp___skip_top_level_306: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_305 : Stack__stack_instance.stack_instance))
                   (temp___skip_top_level_306 : bool)) }
end

module Memorystore__int32
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type int32 = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = int32,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type int32__ref = { mutable int32__content : int32 }
  
  function int32__ref_int32__content__4__projection (a: int32__ref) : int32 =
    a.int32__content
  
  meta "model_projection" function int32__ref_int32__content__4__projection
  
  meta "inline:no" function int32__ref_int32__content__4__projection
  
  val int32__havoc (x: int32__ref) : unit
    writes { x }
end

module Memorystore__int32__rep
  use Memorystore__int32 as Memorystore__int32
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Memorystore__int32.int32) : int =
    Memorystore__int32.int32'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Memorystore__int32.int32,
    predicate in_range = Memorystore__int32.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Memorystore__cell_opt__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Memorystore__int32 as Memorystore__int32
  use Memorystore__int32__rep as Memorystore__int32__rep
  
  type __split_fields = {
                       rec__memorystore__cell_opt__valid : bool;
                       rec__memorystore__cell_opt__val :
                         Memorystore__int32.int32
                       }
  
  function __split_fields_rec__memorystore__cell_opt__valid__projection (a: __split_fields) : bool =
    a.rec__memorystore__cell_opt__valid
  
  meta "model_projection" function __split_fields_rec__memorystore__cell_opt__valid__projection
  
  meta "inline:no" function __split_fields_rec__memorystore__cell_opt__valid__projection
  
  function __split_fields_rec__memorystore__cell_opt__val__projection (a: __split_fields) : 
    Memorystore__int32.int32 =
    a.rec__memorystore__cell_opt__val
  
  meta "model_projection" function __split_fields_rec__memorystore__cell_opt__val__projection
  
  meta "inline:no" function __split_fields_rec__memorystore__cell_opt__val__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__5__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__5__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__5__projection
  
  meta "inline:no" function __rep___split_fields__5__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate memorystore__cell_opt__valid__pred (a: __rep) = true
  
  val memorystore__cell_opt__valid__pred (a: __rep) : bool
    ensures { result <-> (memorystore__cell_opt__valid__pred (a : __rep)) }
  
  val rec__memorystore__cell_opt__valid_ (a: __rep) : bool
    requires { memorystore__cell_opt__valid__pred a }
    ensures { (result
                 = ((__split_fields a).rec__memorystore__cell_opt__valid)) }
  
  predicate memorystore__cell_opt__val__pred (a: __rep) = true
  
  val memorystore__cell_opt__val__pred (a: __rep) : bool
    ensures { result <-> (memorystore__cell_opt__val__pred (a : __rep)) }
  
  val rec__memorystore__cell_opt__val_ (a: __rep) : Memorystore__int32.int32
    requires { memorystore__cell_opt__val__pred a }
    ensures { (result = ((__split_fields a).rec__memorystore__cell_opt__val)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Boolean.to_int
            ((__split_fields a).rec__memorystore__cell_opt__valid))
           = (Boolean.to_int
                ((__split_fields b).rec__memorystore__cell_opt__valid))) /\
          ((Memorystore__int32__rep.to_rep
              ((__split_fields a).rec__memorystore__cell_opt__val))
             = (Memorystore__int32__rep.to_rep
                  ((__split_fields b).rec__memorystore__cell_opt__val)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Memorystore__cell_opt
  use export Memorystore__cell_opt__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type cell_opt = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function memorystore__cell_opt__valid__first__bit : int
  
  val function memorystore__cell_opt__valid__last__bit : int
  
  val function memorystore__cell_opt__valid__position : int
  
  axiom memorystore__cell_opt__valid__first__bit_axiom:
    (memorystore__cell_opt__valid__first__bit >= (0 : int))
  
  axiom memorystore__cell_opt__valid__last__bit_axiom:
    (memorystore__cell_opt__valid__last__bit
       > memorystore__cell_opt__valid__first__bit)
  
  axiom memorystore__cell_opt__valid__position_axiom:
    (memorystore__cell_opt__valid__position >= (0 : int))
  
  val function memorystore__cell_opt__val__first__bit : int
  
  val function memorystore__cell_opt__val__last__bit : int
  
  val function memorystore__cell_opt__val__position : int
  
  axiom memorystore__cell_opt__val__first__bit_axiom:
    (memorystore__cell_opt__val__first__bit >= (0 : int))
  
  axiom memorystore__cell_opt__val__last__bit_axiom:
    (memorystore__cell_opt__val__last__bit
       > memorystore__cell_opt__val__first__bit)
  
  axiom memorystore__cell_opt__val__position_axiom:
    (memorystore__cell_opt__val__position >= (0 : int))
  
  val function user_eq (a: cell_opt) (b: cell_opt) : bool
  
  val function dummy : cell_opt
  
  type cell_opt__ref = { mutable cell_opt__content : cell_opt }
  
  function cell_opt__ref_cell_opt__content__projection (a: cell_opt__ref) : cell_opt =
    a.cell_opt__content
  
  meta "model_projection" function cell_opt__ref_cell_opt__content__projection
  
  meta "inline:no" function cell_opt__ref_cell_opt__content__projection
  
  val cell_opt__havoc (x: cell_opt__ref) : unit
    writes { x }
end

module Array__Int__Memorystore__cell_opt
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Memorystore__cell_opt as Memorystore__cell_opt
  
  function index_I1_one : int = 1 : int
  
  type component_type = Memorystore__cell_opt.cell_opt
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_164 : int.
          if ((a__first <= temp___idx_164) /\ (temp___idx_164 <= a__last)) then
            ((Memorystore__cell_opt.bool_eq ((get a) temp___idx_164))
               ((get b) ((b__first - a__first) + temp___idx_164)))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_164 : int.
                 if ((a__first <= temp___idx_164) /\
                       (temp___idx_164 <= a__last)) then
                   ((Memorystore__cell_opt.bool_eq ((get a) temp___idx_164))
                      ((get b) ((b__first - a__first) + temp___idx_164)))
                 else true)))
end

module Memorystore__mem_array
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Memorystore__cell_opt as Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  
  type component_type = Memorystore__cell_opt.cell_opt
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (256 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Memorystore__cell_opt.map,
    function array_bool_eq = Array__Int__Memorystore__cell_opt.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Memorystore__database__rep
  use _gnatprove_standard.Main
  use int.Int
  use Standard__natural as Standard__natural
  use Standard__natural__rep as Standard__natural__rep
  use Memorystore__mem_array as Memorystore__mem_array
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  
  type __split_fields = {
                       rec__memorystore__database__mem :
                         Array__Int__Memorystore__cell_opt.map;
                       rec__memorystore__database__cnt :
                         Standard__natural.natural
                       }
  
  function __split_fields_rec__memorystore__database__mem__projection (a: __split_fields) : 
    Array__Int__Memorystore__cell_opt.map =
    a.rec__memorystore__database__mem
  
  meta "model_projection" function __split_fields_rec__memorystore__database__mem__projection
  
  meta "inline:no" function __split_fields_rec__memorystore__database__mem__projection
  
  function __split_fields_rec__memorystore__database__cnt__projection (a: __split_fields) : 
    Standard__natural.natural =
    a.rec__memorystore__database__cnt
  
  meta "model_projection" function __split_fields_rec__memorystore__database__cnt__projection
  
  meta "inline:no" function __split_fields_rec__memorystore__database__cnt__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__6__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__6__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__6__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__6__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__6__projection
  
  meta "inline:no" function __rep___split_fields__6__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate memorystore__database__mem__pred (a: __rep) = true
  
  val memorystore__database__mem__pred (a: __rep) : bool
    ensures { result <-> (memorystore__database__mem__pred (a : __rep)) }
  
  val rec__memorystore__database__mem_ (a: __rep) : Array__Int__Memorystore__cell_opt.map
    requires { memorystore__database__mem__pred a }
    ensures { (result = ((__split_fields a).rec__memorystore__database__mem)) }
  
  predicate memorystore__database__cnt__pred (a: __rep) = true
  
  val memorystore__database__cnt__pred (a: __rep) : bool
    ensures { result <-> (memorystore__database__cnt__pred (a : __rep)) }
  
  val rec__memorystore__database__cnt_ (a: __rep) : Standard__natural.natural
    requires { memorystore__database__cnt__pred a }
    ensures { (result = ((__split_fields a).rec__memorystore__database__cnt)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Memorystore__mem_array.bool_eq
            ((__split_fields a).rec__memorystore__database__mem))
           ((__split_fields b).rec__memorystore__database__mem)) /\
          ((Standard__natural__rep.to_rep
              ((__split_fields a).rec__memorystore__database__cnt))
             = (Standard__natural__rep.to_rep
                  ((__split_fields b).rec__memorystore__database__cnt)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Memorystore__database
  use export Memorystore__database__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type database = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function memorystore__database__mem__first__bit : int
  
  val function memorystore__database__mem__last__bit : int
  
  val function memorystore__database__mem__position : int
  
  axiom memorystore__database__mem__first__bit_axiom:
    (memorystore__database__mem__first__bit >= (0 : int))
  
  axiom memorystore__database__mem__last__bit_axiom:
    (memorystore__database__mem__last__bit
       > memorystore__database__mem__first__bit)
  
  axiom memorystore__database__mem__position_axiom:
    (memorystore__database__mem__position >= (0 : int))
  
  val function memorystore__database__cnt__first__bit : int
  
  val function memorystore__database__cnt__last__bit : int
  
  val function memorystore__database__cnt__position : int
  
  axiom memorystore__database__cnt__first__bit_axiom:
    (memorystore__database__cnt__first__bit >= (0 : int))
  
  axiom memorystore__database__cnt__last__bit_axiom:
    (memorystore__database__cnt__last__bit
       > memorystore__database__cnt__first__bit)
  
  axiom memorystore__database__cnt__position_axiom:
    (memorystore__database__cnt__position >= (0 : int))
  
  val function user_eq (a: database) (b: database) : bool
  
  val function dummy : database
  
  type database__ref = { mutable database__content : database }
  
  function database__ref_database__content__projection (a: database__ref) : database =
    a.database__content
  
  meta "model_projection" function database__ref_database__content__projection
  
  meta "inline:no" function database__ref_database__content__projection
  
  val database__havoc (x: database__ref) : unit
    writes { x }
end

module Main__d
  use _gnatprove_standard.Main
  use int.Int
  use Memorystore__database as Memorystore__database
  
  val d__split_fields : Memorystore__database.__split_fields__ref
end

module Memorystore__location_index
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type location_index = <range 1 256>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (256 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = location_index,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type location_index__ref = {
                            mutable location_index__content : location_index
                            }
  
  function location_index__ref_location_index__content__projection (a: location_index__ref) : location_index =
    a.location_index__content
  
  meta "model_projection" function location_index__ref_location_index__content__projection
  
  meta "inline:no" function location_index__ref_location_index__content__projection
  
  val location_index__havoc (x: location_index__ref) : unit
    writes { x }
end

module Memorystore__database___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Standard__natural as Standard__natural
  use Standard__natural__rep as Standard__natural__rep
  use Memorystore__database as Memorystore__database
  use Memorystore__location_index as Memorystore__location_index
  use Memorystore__int32 as Memorystore__int32
  use Memorystore__int32__rep as Memorystore__int32__rep
  use Memorystore__cell_opt as Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  
  predicate dynamic_invariant (temp___expr_345: Memorystore__database.database) (temp___is_init_341: bool) (temp___skip_constant_342: bool) (temp___do_toplevel_343: bool) (temp___do_typ_inv_344: bool) =
    true
  
  val dynamic_invariant (temp___expr_345: Memorystore__database.database) (temp___is_init_341: bool) (temp___skip_constant_342: bool) (temp___do_toplevel_343: bool) (temp___do_typ_inv_344: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_345 : Memorystore__database.database))
                      (temp___is_init_341 : bool))
                     (temp___skip_constant_342 : bool))
                    (temp___do_toplevel_343 : bool))
                   (temp___do_typ_inv_344 : bool)) }
  
  predicate default_initial_assumption (temp___expr_347: Memorystore__database.database) (temp___skip_top_level_348: bool) =
    ((if (Memorystore__database.memorystore__database__mem__pred
            temp___expr_347) then
        (let temp___349 =
           (Memorystore__database.__split_fields temp___expr_347).Memorystore__database.rec__memorystore__database__mem in
         forall temp___350 : int.
           if ((Memorystore__location_index.first <= temp___350) /\
                 (temp___350 <= Memorystore__location_index.last)) then
             (let temp___351 =
                (Array__Int__Memorystore__cell_opt.get
                   ((Memorystore__database.__split_fields temp___expr_347).
                      Memorystore__database.rec__memorystore__database__mem))
                  temp___350 in
              ((if (Memorystore__cell_opt.memorystore__cell_opt__valid__pred
                      ((Array__Int__Memorystore__cell_opt.get
                          ((Memorystore__database.__split_fields
                               temp___expr_347).Memorystore__database.rec__memorystore__database__mem))
                         temp___350)) then
                  (((Memorystore__cell_opt.__split_fields
                        ((Array__Int__Memorystore__cell_opt.get
                            ((Memorystore__database.__split_fields
                                 temp___expr_347).Memorystore__database.rec__memorystore__database__mem))
                           temp___350)).Memorystore__cell_opt.rec__memorystore__cell_opt__valid)
                     = (Boolean.of_int (0 : int)))
                else true) /\
                 (if (Memorystore__cell_opt.memorystore__cell_opt__val__pred
                        ((Array__Int__Memorystore__cell_opt.get
                            ((Memorystore__database.__split_fields
                                 temp___expr_347).Memorystore__database.rec__memorystore__database__mem))
                           temp___350)) then
                    ((Memorystore__int32__rep.to_rep
                        ((Memorystore__cell_opt.__split_fields
                             ((Array__Int__Memorystore__cell_opt.get
                                 ((Memorystore__database.__split_fields
                                      temp___expr_347).Memorystore__database.rec__memorystore__database__mem))
                                temp___350)).Memorystore__cell_opt.rec__memorystore__cell_opt__val))
                       = (0 : int))
                  else true)))
           else true)
      else true) /\
       (if (Memorystore__database.memorystore__database__cnt__pred
              temp___expr_347) then
          ((Standard__natural__rep.to_rep
              ((Memorystore__database.__split_fields temp___expr_347).
                 Memorystore__database.rec__memorystore__database__cnt))
             = (0 : int))
        else true))
  
  val default_initial_assumption (temp___expr_347: Memorystore__database.database) (temp___skip_top_level_348: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_347 : Memorystore__database.database))
                   (temp___skip_top_level_348 : bool)) }
end

module Standard__natural___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__natural as Standard__natural
  
  predicate dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) =
    if ((temp___is_init_42 = True) \/
          (Standard__natural.first <= Standard__natural.last)) then
      (((Standard__natural.dynamic_property Standard__natural.first)
          Standard__natural.last)
         temp___expr_46)
    else true
  
  val dynamic_invariant (temp___expr_46: int) (temp___is_init_42: bool) (temp___skip_constant_43: bool) (temp___do_toplevel_44: bool) (temp___do_typ_inv_45: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_46 : int))
                      (temp___is_init_42 : bool))
                     (temp___skip_constant_43 : bool))
                    (temp___do_toplevel_44 : bool))
                   (temp___do_typ_inv_45 : bool)) }
  
  predicate default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) =
    true
  
  val default_initial_assumption (temp___expr_47: int) (temp___skip_top_level_48: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_47 : int))
                   (temp___skip_top_level_48 : bool)) }
end

module Mycommandline__argument_count
  use _gnatprove_standard.Main
  use int.Int
  
  val function argument_count (__void_param: unit) : int
  
  val predicate argument_count__function_guard (temp___result_165: int) (__void_param: unit)
end

module Mycommandline__argument_count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__natural as Standard__natural
  use Standard__natural___axiom as Standard__natural___axiom
  use Mycommandline__argument_count as Mycommandline__argument_count
  
  val argument_count (__void_param: unit) : int
    requires { true }
    ensures { (((result = (Mycommandline__argument_count.argument_count ())) /\
                  ((Mycommandline__argument_count.argument_count__function_guard
                      result)
                     ())) /\
                 (((((Standard__natural___axiom.dynamic_invariant result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom argument_count__post_axiom:
    forall __void_param : unit
          [Mycommandline__argument_count.argument_count __void_param].
      let result = Mycommandline__argument_count.argument_count __void_param in
      ((Standard__natural.dynamic_property Standard__natural.first)
         Standard__natural.last)
        result
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_161: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_162: int) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private)
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err }
    ensures { (([@GP_Pretty_Ada:6262]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err)))) /\
                 ([@GP_Pretty_Ada:6268]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__file_system.file_system))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))))) }
end

module Mycommandline__argument
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function argument (number: int) : Standard__string.string__
  
  val predicate argument__function_guard (temp___result_166: Standard__string.string__) (number: int)
end

module Mycommandline__argument___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Mycommandline__argument_count as Mycommandline__argument_count
  use Mycommandline__argument as Mycommandline__argument
  
  val argument (number: int) : Standard__string.string__
    requires { [@GP_Pretty_Ada:11338]
               (number
                  <= (epsilon temp___result_353: int.
                        ((temp___result_353
                            = (Mycommandline__argument_count.argument_count
                                 ())) /\
                           ((Mycommandline__argument_count.argument_count__function_guard
                               temp___result_353)
                              ()))))
    }
    ensures { (((result = (Mycommandline__argument.argument number)) /\
                  ((Mycommandline__argument.argument__function_guard result)
                     number)) /\
                 (((((Standard__string___axiom.dynamic_invariant result) True)
                      False)
                     True)
                    True)) }
end

module Main__B_1__pin_str
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function pin_str : Standard__string.string__
end

module Pin__from_string
  use _gnatprove_standard.Main
  use int.Int
  use Standard__string as Standard__string
  
  val function from_string (s: Standard__string.string__) : int
  
  val predicate from_string__function_guard (temp___result_168: int) (s: 
    Standard__string.string__)
end

module Pin__pin___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Pin__pin as Pin__pin
  
  predicate dynamic_invariant (temp___expr_241: int) (temp___is_init_237: bool) (temp___skip_constant_238: bool) (temp___do_toplevel_239: bool) (temp___do_typ_inv_240: bool) =
    if ((temp___is_init_237 = True) \/ (Pin__pin.first <= Pin__pin.last)) then
      (((Pin__pin.dynamic_property Pin__pin.first) Pin__pin.last)
         temp___expr_241)
    else true
  
  val dynamic_invariant (temp___expr_241: int) (temp___is_init_237: bool) (temp___skip_constant_238: bool) (temp___do_toplevel_239: bool) (temp___do_typ_inv_240: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_241 : int))
                      (temp___is_init_237 : bool))
                     (temp___skip_constant_238 : bool))
                    (temp___do_toplevel_239 : bool))
                   (temp___do_typ_inv_240 : bool)) }
  
  predicate default_initial_assumption (temp___expr_242: int) (temp___skip_top_level_243: bool) =
    true
  
  val default_initial_assumption (temp___expr_242: int) (temp___skip_top_level_243: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_242 : int))
                   (temp___skip_top_level_243 : bool)) }
end

module Pin__from_string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Pin__from_string as Pin__from_string
  use Pin__pin___axiom as Pin__pin___axiom
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val from_string (s: Standard__string.string__) : int
    requires { (([@GP_Pretty_Ada:2968]
                 ((Standard__string.length s) = (4 : int))) /\
                  (forall i : int.
                     ((((Standard__string.first s) <= i) /\
                         (i <= (Standard__string.last s))) ->
                        (([@GP_Pretty_Ada:2979]
                          ((Standard__character__rep.to_rep
                              ((Array__Int__Standard__character.get
                                  (Standard__string.to_array s))
                                 i))
                             >= (48 : int))) /\
                           ([@GP_Pretty_Ada:2985]
                            ((Standard__character__rep.to_rep
                                ((Array__Int__Standard__character.get
                                    (Standard__string.to_array s))
                                   i))
                               <= (57 : int)))))))
    }
    ensures { (((result = (Pin__from_string.from_string s)) /\
                  ((Pin__from_string.from_string__function_guard result) s)) /\
                 (((((Pin__pin___axiom.dynamic_invariant result) True) False)
                     True)
                    True)) }
  
  axiom from_string__post_axiom:
    forall s : Standard__string.string__ [Pin__from_string.from_string s].
      (((((((Standard__string___axiom.dynamic_invariant s) True) True) True)
           True) /\
          (([@GP_Pretty_Ada:2968] ((Standard__string.length s) = (4 : int))) /\
             (forall i : int.
                ((((Standard__string.first s) <= i) /\
                    (i <= (Standard__string.last s))) ->
                   (([@GP_Pretty_Ada:2979]
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (Standard__string.to_array s))
                            i))
                        >= (48 : int))) /\
                      ([@GP_Pretty_Ada:2985]
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (Standard__string.to_array s))
                              i))
                          <= (57 : int)))))))) ->
         (let result = Pin__from_string.from_string s in
          if ((Pin__from_string.from_string__function_guard result) s) then
            ((true /\
                (((((Pin__pin___axiom.dynamic_invariant result) True) False)
                    True)
                   True)) /\
               true)
          else true))
end

module Locker__init___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  use Locker__locker___axiom as Locker__locker___axiom
  
  val init (l__split_fields: Locker__locker.__split_fields__ref) (n: int) : 
    unit
    requires { true }
    writes { l__split_fields }
    ensures { ((((Locker__locker___axiom.dynamic_invariant
                    { Locker__locker.__split_fields =
                        (Locker__locker.__split_fields__content
                            l__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Stack__init___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Stack__stack_instance as Stack__stack_instance
  use Stack__stack_instance___axiom as Stack__stack_instance___axiom
  
  val init (s__split_fields: Stack__stack_instance.__split_fields__ref) : 
    unit
    requires { true }
    writes { s__split_fields }
    ensures { ((((Stack__stack_instance___axiom.dynamic_invariant
                    { Stack__stack_instance.__split_fields =
                        (Stack__stack_instance.__split_fields__content
                            s__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Memorystore__init___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Memorystore__database as Memorystore__database
  use Memorystore__database___axiom as Memorystore__database___axiom
  
  val init (d__split_fields: Memorystore__database.__split_fields__ref) : 
    unit
    requires { true }
    writes { d__split_fields }
    ensures { ((((Memorystore__database___axiom.dynamic_invariant
                    { Memorystore__database.__split_fields =
                        (Memorystore__database.__split_fields__content
                            d__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Locker__is_locked
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  
  val function is_locked (l: Locker__locker.locker) : bool
  
  val predicate is_locked__function_guard (temp___result_169: bool) (l: 
    Locker__locker.locker)
end

module Locker__is_locked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  use Locker__locker___axiom as Locker__locker___axiom
  use Locker__is_locked as Locker__is_locked
  
  val is_locked (l: Locker__locker.locker) : bool
    requires { true }
    ensures { (((result = (Locker__is_locked.is_locked l)) /\
                  ((Locker__is_locked.is_locked__function_guard result) l)) /\
                 true) }
  
  axiom is_locked__post_axiom:
    forall l : Locker__locker.locker [Locker__is_locked.is_locked l].
      ((((((Locker__locker___axiom.dynamic_invariant l) True) True) True)
          True) ->
         (let result = Locker__is_locked.is_locked l in
          if ((Locker__is_locked.is_locked__function_guard result) l) then
            ((true /\ true) /\ true)
          else true))
end

module Ada___ada__text_io__put__4___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val put (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err }
    ensures { (([@GP_Pretty_Ada:6040]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))
                         (Main.__private__content
                             Ada___ada__text_io__current_err.current_err)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err)))) /\
                 ([@GP_Pretty_Ada:6046]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__file_system.file_system))
                                (Main.__private__content
                                    Ada___ada__text_io__standard_in.standard_in))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_out.standard_out))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_err.standard_err))
                             (Main.__private__content
                                 Ada___ada__text_io__current_in.current_in))
                            (Main.__private__content
                                Ada___ada__text_io__current_out.current_out))
                           (Main.__private__content
                               Ada___ada__text_io__current_err.current_err)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out))
                          (Main.__private__content
                              Ada___ada__text_io__current_err.current_err))))) }
end

module Mystring_instance__lines__get_line___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Mystring_instance__lines__mystring as Mystring_instance__lines__mystring
  use Mystring_instance__lines__mystring___axiom as Mystring_instance__lines__mystring___axiom
  
  val get_line (m__split_fields: Mystring_instance__lines__mystring.__split_fields__ref) : 
    unit
    requires { true }
    writes { m__split_fields }
    ensures { ((((Mystring_instance__lines__mystring___axiom.dynamic_invariant
                    { Mystring_instance__lines__mystring.__split_fields =
                        (Mystring_instance__lines__mystring.__split_fields__content
                            m__split_fields) })
                   True)
                  True)
                 True)
                True }
end

module Commandhandler__execute___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Locker__locker as Locker__locker
  use Locker__locker___axiom as Locker__locker___axiom
  use Mystring_instance__lines__mystring as Mystring_instance__lines__mystring
  use Stack__stack_instance as Stack__stack_instance
  use Stack__stack_instance___axiom as Stack__stack_instance___axiom
  use Memorystore__database as Memorystore__database
  use Memorystore__database___axiom as Memorystore__database___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val execute (l__split_fields: Locker__locker.__split_fields__ref) (sk__split_fields: 
    Stack__stack_instance.__split_fields__ref) (d__split_fields: Memorystore__database.__split_fields__ref) (s: 
    Mystring_instance__lines__mystring.mystring) : unit
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes { Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err, l__split_fields, sk__split_fields, d__split_fields }
    ensures { (((((((Locker__locker___axiom.dynamic_invariant
                       { Locker__locker.__split_fields =
                           (Locker__locker.__split_fields__content
                               l__split_fields) })
                      True)
                     True)
                    True)
                   True) /\
                  (((((Stack__stack_instance___axiom.dynamic_invariant
                         { Stack__stack_instance.__split_fields =
                             (Stack__stack_instance.__split_fields__content
                                 sk__split_fields) })
                        True)
                       True)
                      True)
                     True)) /\
                 (((((Memorystore__database___axiom.dynamic_invariant
                        { Memorystore__database.__split_fields =
                            (Memorystore__database.__split_fields__content
                                d__split_fields) })
                       True)
                      True)
                     True)
                    True)) }
end

module Main__L_2
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_2
end

module Temp___String_Literal_374
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_374 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_374__def_axiom:
    forall __void_param : unit [temp___String_Literal_374 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_374 __void_param))
               (1 : int)))
           = (80 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_374 __void_param))
                 (2 : int)))
             = (108 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_374 __void_param))
                      (3 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_374 __void_param))
                        (4 : int)))
                    = (97 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_374 __void_param))
                       (5 : int)))
                   = (115 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_374 __void_param))
                       (6 : int)))
                   = (101 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (7 : int)))
                     = (32 : int)))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_374 __void_param))
                       (8 : int)))
                   = (112 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (9 : int)))
                     = (114 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (10 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (11 : int)))
                       = (118 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_374 __void_param))
                        (12 : int)))
                    = (105 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_374 __void_param))
                          (13 : int)))
                      = (100 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (14 : int)))
                     = (101 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (15 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (16 : int)))
                       = (97 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (17 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (18 : int)))
                       = (115 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (19 : int)))
                       = (105 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_374 __void_param))
                             (20 : int)))
                         = (110 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_374 __void_param))
                        (21 : int)))
                    = (103 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_374 __void_param))
                          (22 : int)))
                      = (108 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (23 : int)))
                     = (101 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (24 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (25 : int)))
                       = (52 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (26 : int)))
                     = (45 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (27 : int)))
                       = (100 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (28 : int)))
                       = (105 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_374 __void_param))
                             (29 : int)))
                         = (103 : int))))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_374 __void_param))
                         (30 : int)))
                     = (105 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (31 : int)))
                       = (116 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (32 : int)))
                       = (115 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_374 __void_param))
                             (33 : int)))
                         = (32 : int)))) /\
                  ((((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_374 __void_param))
                           (34 : int)))
                       = (80 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_374 __void_param))
                             (35 : int)))
                         = (73 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_374 __void_param))
                             (36 : int)))
                         = (78 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_374 __void_param))
                               (37 : int)))
                           = (46 : int))))))))
end

module Temp___String_Literal_376
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_376 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_376__def_axiom:
    forall __void_param : unit [temp___String_Literal_376 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_376 __void_param))
               (1 : int)))
           = (80 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_376 __void_param))
                 (2 : int)))
             = (108 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_376 __void_param))
                      (3 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_376 __void_param))
                        (4 : int)))
                    = (97 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_376 __void_param))
                       (5 : int)))
                   = (115 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_376 __void_param))
                       (6 : int)))
                   = (101 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (7 : int)))
                     = (32 : int)))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_376 __void_param))
                       (8 : int)))
                   = (112 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (9 : int)))
                     = (114 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (10 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (11 : int)))
                       = (118 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_376 __void_param))
                        (12 : int)))
                    = (105 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_376 __void_param))
                          (13 : int)))
                      = (100 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (14 : int)))
                     = (101 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (15 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (16 : int)))
                       = (97 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (17 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (18 : int)))
                       = (115 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (19 : int)))
                       = (105 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_376 __void_param))
                             (20 : int)))
                         = (110 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_376 __void_param))
                        (21 : int)))
                    = (103 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_376 __void_param))
                          (22 : int)))
                      = (108 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (23 : int)))
                     = (101 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (24 : int)))
                     = (32 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (25 : int)))
                       = (52 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (26 : int)))
                     = (45 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (27 : int)))
                       = (100 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (28 : int)))
                       = (105 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_376 __void_param))
                             (29 : int)))
                         = (103 : int))))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_376 __void_param))
                         (30 : int)))
                     = (105 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (31 : int)))
                       = (116 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (32 : int)))
                       = (115 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_376 __void_param))
                             (33 : int)))
                         = (32 : int)))) /\
                  ((((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_376 __void_param))
                           (34 : int)))
                       = (80 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_376 __void_param))
                             (35 : int)))
                         = (73 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_376 __void_param))
                             (36 : int)))
                         = (78 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_376 __void_param))
                               (37 : int)))
                           = (46 : int))))))))
end

module Temp___String_Literal_383
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_383 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_383__def_axiom:
    forall __void_param : unit [temp___String_Literal_383 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_383 __void_param))
               (1 : int)))
           = (108 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_383 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_383 __void_param))
                   (3 : int)))
               = (99 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_383 __void_param))
                     (4 : int)))
                 = (107 : int))) /\
             ((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_383 __void_param))
                    (5 : int)))
                = (101 : int))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_383 __void_param))
                     (6 : int)))
                 = (100 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_383 __void_param))
                       (7 : int)))
                   = (62 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_383 __void_param))
                      (8 : int)))
                  = (32 : int)))))
end

module Temp___String_Literal_385
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_385 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_385__def_axiom:
    forall __void_param : unit [temp___String_Literal_385 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_385 __void_param))
               (1 : int)))
           = (117 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_385 __void_param))
                 (2 : int)))
             = (110 : int))) /\
         (((((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_385 __void_param))
                   (3 : int)))
               = (108 : int)) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_385 __void_param))
                     (4 : int)))
                 = (111 : int))) /\
             (((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_385 __void_param))
                     (5 : int)))
                 = (99 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_385 __void_param))
                       (6 : int)))
                   = (107 : int)))) /\
            ((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_385 __void_param))
                     (7 : int)))
                 = (101 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_385 __void_param))
                       (8 : int)))
                   = (100 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_385 __void_param))
                       (9 : int)))
                   = (62 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_385 __void_param))
                         (10 : int)))
                     = (32 : int))))))
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Main__l___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__sk___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__d___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__B_1__pin_str___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__string as Standard__string
  use Mycommandline__argument as Mycommandline__argument
  use Main__B_1__pin_str as Main__B_1__pin_str
  
  axiom pin_str__def_axiom:
    (Main__B_1__pin_str.pin_str
       = (epsilon temp___result_167: Standard__string.string__.
            ((temp___result_167
                = (Mycommandline__argument.argument (1 : int))) /\
               ((Mycommandline__argument.argument__function_guard
                   temp___result_167)
                  (1 : int)))))
end

module Main__L_2___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Memorystore__location_index___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Memorystore__location_index as Memorystore__location_index
  
  predicate dynamic_invariant (temp___expr_314: int) (temp___is_init_310: bool) (temp___skip_constant_311: bool) (temp___do_toplevel_312: bool) (temp___do_typ_inv_313: bool) =
    if ((temp___is_init_310 = True) \/
          (Memorystore__location_index.first
             <= Memorystore__location_index.last)) then
      (((Memorystore__location_index.dynamic_property
           Memorystore__location_index.first)
          Memorystore__location_index.last)
         temp___expr_314)
    else true
  
  val dynamic_invariant (temp___expr_314: int) (temp___is_init_310: bool) (temp___skip_constant_311: bool) (temp___do_toplevel_312: bool) (temp___do_typ_inv_313: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_314 : int))
                      (temp___is_init_310 : bool))
                     (temp___skip_constant_311 : bool))
                    (temp___do_toplevel_312 : bool))
                   (temp___do_typ_inv_313 : bool)) }
  
  predicate default_initial_assumption (temp___expr_315: int) (temp___skip_top_level_316: bool) =
    true
  
  val default_initial_assumption (temp___expr_315: int) (temp___skip_top_level_316: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_315 : int))
                   (temp___skip_top_level_316 : bool)) }
end

module Memorystore__int32___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Memorystore__int32 as Memorystore__int32
  
  predicate dynamic_invariant (temp___expr_321: int) (temp___is_init_317: bool) (temp___skip_constant_318: bool) (temp___do_toplevel_319: bool) (temp___do_typ_inv_320: bool) =
    if ((temp___is_init_317 = True) \/
          (Memorystore__int32.first <= Memorystore__int32.last)) then
      (((Memorystore__int32.dynamic_property Memorystore__int32.first)
          Memorystore__int32.last)
         temp___expr_321)
    else true
  
  val dynamic_invariant (temp___expr_321: int) (temp___is_init_317: bool) (temp___skip_constant_318: bool) (temp___do_toplevel_319: bool) (temp___do_typ_inv_320: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_321 : int))
                      (temp___is_init_317 : bool))
                     (temp___skip_constant_318 : bool))
                    (temp___do_toplevel_319 : bool))
                   (temp___do_typ_inv_320 : bool)) }
  
  predicate default_initial_assumption (temp___expr_322: int) (temp___skip_top_level_323: bool) =
    true
  
  val default_initial_assumption (temp___expr_322: int) (temp___skip_top_level_323: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_322 : int))
                   (temp___skip_top_level_323 : bool)) }
end

module Memorystore__cell_opt___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Memorystore__int32 as Memorystore__int32
  use Memorystore__int32__rep as Memorystore__int32__rep
  use Memorystore__cell_opt as Memorystore__cell_opt
  
  predicate dynamic_invariant (temp___expr_328: Memorystore__cell_opt.cell_opt) (temp___is_init_324: bool) (temp___skip_constant_325: bool) (temp___do_toplevel_326: bool) (temp___do_typ_inv_327: bool) =
    true
  
  val dynamic_invariant (temp___expr_328: Memorystore__cell_opt.cell_opt) (temp___is_init_324: bool) (temp___skip_constant_325: bool) (temp___do_toplevel_326: bool) (temp___do_typ_inv_327: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_328 : Memorystore__cell_opt.cell_opt))
                      (temp___is_init_324 : bool))
                     (temp___skip_constant_325 : bool))
                    (temp___do_toplevel_326 : bool))
                   (temp___do_typ_inv_327 : bool)) }
  
  predicate default_initial_assumption (temp___expr_329: Memorystore__cell_opt.cell_opt) (temp___skip_top_level_330: bool) =
    ((if (Memorystore__cell_opt.memorystore__cell_opt__valid__pred
            temp___expr_329) then
        (((Memorystore__cell_opt.__split_fields temp___expr_329).Memorystore__cell_opt.rec__memorystore__cell_opt__valid)
           = (Boolean.of_int (0 : int)))
      else true) /\
       (if (Memorystore__cell_opt.memorystore__cell_opt__val__pred
              temp___expr_329) then
          ((Memorystore__int32__rep.to_rep
              ((Memorystore__cell_opt.__split_fields temp___expr_329).
                 Memorystore__cell_opt.rec__memorystore__cell_opt__val))
             = (0 : int))
        else true))
  
  val default_initial_assumption (temp___expr_329: Memorystore__cell_opt.cell_opt) (temp___skip_top_level_330: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_329 : Memorystore__cell_opt.cell_opt))
                   (temp___skip_top_level_330 : bool)) }
end

module Memorystore__mem_array___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Memorystore__location_index as Memorystore__location_index
  use Memorystore__int32 as Memorystore__int32
  use Memorystore__int32__rep as Memorystore__int32__rep
  use Memorystore__cell_opt as Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  use Array__Int__Memorystore__cell_opt as Array__Int__Memorystore__cell_opt
  
  predicate dynamic_invariant (temp___expr_335: Array__Int__Memorystore__cell_opt.map) (temp___is_init_331: bool) (temp___skip_constant_332: bool) (temp___do_toplevel_333: bool) (temp___do_typ_inv_334: bool) =
    true
  
  val dynamic_invariant (temp___expr_335: Array__Int__Memorystore__cell_opt.map) (temp___is_init_331: bool) (temp___skip_constant_332: bool) (temp___do_toplevel_333: bool) (temp___do_typ_inv_334: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_335 :
                          Array__Int__Memorystore__cell_opt.map))
                      (temp___is_init_331 : bool))
                     (temp___skip_constant_332 : bool))
                    (temp___do_toplevel_333 : bool))
                   (temp___do_typ_inv_334 : bool)) }
  
  predicate default_initial_assumption (temp___expr_337: Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_338: bool) =
    forall temp___339 : int.
      if ((Memorystore__location_index.first <= temp___339) /\
            (temp___339 <= Memorystore__location_index.last)) then
        (let temp___340 =
           (Array__Int__Memorystore__cell_opt.get temp___expr_337) temp___339 in
         ((if (Memorystore__cell_opt.memorystore__cell_opt__valid__pred
                 ((Array__Int__Memorystore__cell_opt.get temp___expr_337)
                    temp___339)) then
             (((Memorystore__cell_opt.__split_fields
                   ((Array__Int__Memorystore__cell_opt.get temp___expr_337)
                      temp___339)).Memorystore__cell_opt.rec__memorystore__cell_opt__valid)
                = (Boolean.of_int (0 : int)))
           else true) /\
            (if (Memorystore__cell_opt.memorystore__cell_opt__val__pred
                   ((Array__Int__Memorystore__cell_opt.get temp___expr_337)
                      temp___339)) then
               ((Memorystore__int32__rep.to_rep
                   ((Memorystore__cell_opt.__split_fields
                        ((Array__Int__Memorystore__cell_opt.get
                            temp___expr_337)
                           temp___339)).Memorystore__cell_opt.rec__memorystore__cell_opt__val))
                  = (0 : int))
             else true)))
      else true
  
  val default_initial_assumption (temp___expr_337: Array__Int__Memorystore__cell_opt.map) (temp___skip_top_level_338: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_337 : Array__Int__Memorystore__cell_opt.map))
                   (temp___skip_top_level_338 : bool)) }
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) =
    if ((temp___is_init_170 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_174)
    else true
  
  val dynamic_invariant (temp___expr_174: int) (temp___is_init_170: bool) (temp___skip_constant_171: bool) (temp___do_toplevel_172: bool) (temp___do_typ_inv_173: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_174 : int))
                      (temp___is_init_170 : bool))
                     (temp___skip_constant_171 : bool))
                    (temp___do_toplevel_172 : bool))
                   (temp___do_typ_inv_173 : bool)) }
  
  predicate default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) =
    true
  
  val default_initial_assumption (temp___expr_175: int) (temp___skip_top_level_176: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_175 : int))
                   (temp___skip_top_level_176 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out,
      Ada___ada__text_io__current_err.current_err }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out))
                        (Main.__private__content
                            Ada___ada__text_io__current_err.current_err))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__file_system___file_system___ : Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private, Ada___ada__text_io__current_err___current_err___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__file_system___file_system___)
                  Ada___ada__text_io__standard_in___standard_in___)
                 Ada___ada__text_io__standard_out___standard_out___)
                Ada___ada__text_io__standard_err___standard_err___)
               Ada___ada__text_io__current_in___current_in___)
              Ada___ada__text_io__current_out___current_out___)
             Ada___ada__text_io__current_err___current_err___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__file_system___file_system___)
               Ada___ada__text_io__standard_in___standard_in___)
              Ada___ada__text_io__standard_out___standard_out___)
             Ada___ada__text_io__standard_err___standard_err___)
            Ada___ada__text_io__current_in___current_in___)
           Ada___ada__text_io__current_out___current_out___)
          Ada___ada__text_io__current_err___current_err___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Stack__int32___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Stack__int32 as Stack__int32
  
  predicate dynamic_invariant (temp___expr_286: int) (temp___is_init_282: bool) (temp___skip_constant_283: bool) (temp___do_toplevel_284: bool) (temp___do_typ_inv_285: bool) =
    if ((temp___is_init_282 = True) \/
          (Stack__int32.first <= Stack__int32.last)) then
      (((Stack__int32.dynamic_property Stack__int32.first) Stack__int32.last)
         temp___expr_286)
    else true
  
  val dynamic_invariant (temp___expr_286: int) (temp___is_init_282: bool) (temp___skip_constant_283: bool) (temp___do_toplevel_284: bool) (temp___do_typ_inv_285: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_286 : int))
                      (temp___is_init_282 : bool))
                     (temp___skip_constant_283 : bool))
                    (temp___do_toplevel_284 : bool))
                   (temp___do_typ_inv_285 : bool)) }
  
  predicate default_initial_assumption (temp___expr_287: int) (temp___skip_top_level_288: bool) =
    true
  
  val default_initial_assumption (temp___expr_287: int) (temp___skip_top_level_288: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_287 : int))
                   (temp___skip_top_level_288 : bool)) }
end

module Stack__stack_array___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  use Array__Int__Stack__int32 as Array__Int__Stack__int32
  
  predicate dynamic_invariant (temp___expr_293: Array__Int__Stack__int32.map) (temp___is_init_289: bool) (temp___skip_constant_290: bool) (temp___do_toplevel_291: bool) (temp___do_typ_inv_292: bool) =
    true
  
  val dynamic_invariant (temp___expr_293: Array__Int__Stack__int32.map) (temp___is_init_289: bool) (temp___skip_constant_290: bool) (temp___do_toplevel_291: bool) (temp___do_typ_inv_292: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_293 : Array__Int__Stack__int32.map))
                      (temp___is_init_289 : bool))
                     (temp___skip_constant_290 : bool))
                    (temp___do_toplevel_291 : bool))
                   (temp___do_typ_inv_292 : bool)) }
  
  predicate default_initial_assumption (temp___expr_295: Array__Int__Stack__int32.map) (temp___skip_top_level_296: bool) =
    true
  
  val default_initial_assumption (temp___expr_295: Array__Int__Stack__int32.map) (temp___skip_top_level_296: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_295 : Array__Int__Stack__int32.map))
                   (temp___skip_top_level_296 : bool)) }
end

module Mystring_instance__lines__mystringstr___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  predicate dynamic_invariant (temp___expr_257: Array__Int__Standard__character.map) (temp___is_init_253: bool) (temp___skip_constant_254: bool) (temp___do_toplevel_255: bool) (temp___do_typ_inv_256: bool) =
    true
  
  val dynamic_invariant (temp___expr_257: Array__Int__Standard__character.map) (temp___is_init_253: bool) (temp___skip_constant_254: bool) (temp___do_toplevel_255: bool) (temp___do_typ_inv_256: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_257 : Array__Int__Standard__character.map))
                      (temp___is_init_253 : bool))
                     (temp___skip_constant_254 : bool))
                    (temp___do_toplevel_255 : bool))
                   (temp___do_typ_inv_256 : bool)) }
  
  predicate default_initial_assumption (temp___expr_259: Array__Int__Standard__character.map) (temp___skip_top_level_260: bool) =
    true
  
  val default_initial_assumption (temp___expr_259: Array__Int__Standard__character.map) (temp___skip_top_level_260: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_259 : Array__Int__Standard__character.map))
                   (temp___skip_top_level_260 : bool)) }
end

module Mystring_instance__lines__mystring__T13s___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__string as Standard__string
  use Standard__string___axiom as Standard__string___axiom
  use Main__l as Main__l
  use Locker__locker as Locker__locker
  use Locker__locker___axiom as Locker__locker___axiom
  use Main__s as Main__s
  use Mystring_instance__lines__mystring as Mystring_instance__lines__mystring
  use Mystring_instance__lines__mystring___axiom as Mystring_instance__lines__mystring___axiom
  use Main__sk as Main__sk
  use Stack__stack_instance as Stack__stack_instance
  use Stack__stack_instance___axiom as Stack__stack_instance___axiom
  use Main__d as Main__d
  use Memorystore__database as Memorystore__database
  use Memorystore__database___axiom as Memorystore__database___axiom
  use Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Mycommandline__argument___axiom as Mycommandline__argument___axiom
  use Main__B_1__pin_str as Main__B_1__pin_str
  use Pin__from_string___axiom as Pin__from_string___axiom
  use Locker__init___axiom as Locker__init___axiom
  use Stack__init___axiom as Stack__init___axiom
  use Memorystore__init___axiom as Memorystore__init___axiom
  use Locker__is_locked___axiom as Locker__is_locked___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Mystring_instance__lines__get_line___axiom as Mystring_instance__lines__get_line___axiom
  use Commandhandler__execute___axiom as Commandhandler__execute___axiom
  use Main__L_2 as Main__L_2
  use Temp___String_Literal_374 as Temp___String_Literal_374
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_376 as Temp___String_Literal_376
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_383 as Temp___String_Literal_383
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_385 as Temp___String_Literal_385
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__natural___axiom as Standard__natural___axiom
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Main__l___axiom as Main__l___axiom
  use Main__s___axiom as Main__s___axiom
  use Main__sk___axiom as Main__sk___axiom
  use Main__d___axiom as Main__d___axiom
  use Main__B_1__pin_str___axiom as Main__B_1__pin_str___axiom
  use Main__L_2___axiom as Main__L_2___axiom
  use Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
  use Mycommandline__argument___axiom as Mycommandline__argument___axiom
  use Pin__from_string___axiom as Pin__from_string___axiom
  use Pin__pin___axiom as Pin__pin___axiom
  use Memorystore__location_index___axiom as Memorystore__location_index___axiom
  use Memorystore__int32___axiom as Memorystore__int32___axiom
  use Memorystore__init___axiom as Memorystore__init___axiom
  use Memorystore__cell_opt___axiom as Memorystore__cell_opt___axiom
  use Memorystore__mem_array___axiom as Memorystore__mem_array___axiom
  use Memorystore__database___axiom as Memorystore__database___axiom
  use Locker__init___axiom as Locker__init___axiom
  use Locker__is_locked___axiom as Locker__is_locked___axiom
  use Locker__locker___axiom as Locker__locker___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use Stack__int32___axiom as Stack__int32___axiom
  use Stack__stack_array___axiom as Stack__stack_array___axiom
  use Stack__init___axiom as Stack__init___axiom
  use Stack__stack_instance___axiom as Stack__stack_instance___axiom
  use Commandhandler__execute___axiom as Commandhandler__execute___axiom
  use Mystring_instance__lines__mystringstr___axiom as Mystring_instance__lines__mystringstr___axiom
  use Mystring_instance__lines__mystring___axiom as Mystring_instance__lines__mystring___axiom
  use Mystring_instance__lines__get_line___axiom as Mystring_instance__lines__get_line___axiom
  use Mystring_instance__lines__mystring__T13s___axiom as Mystring_instance__lines__mystring__T13s___axiom
  
  let def (__void_param : unit)
    requires { [#"main.adb" 22 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram main.adb:22]
      ());
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram main.adb:22]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram main.adb:22]
      ());
     ([#"main.adb" 22 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram main.adb:22] ());
     ([#"main.adb" 22 0 0]
      (try
         ([#"main.adb" 23 0 0] ());
         ([#"main.adb" 25 0 0] ());
         ([#"main.adb" 26 0 0] ());
         ([#"main.adb" 28 0 0]
          (([#"main.adb" 28 0 0]
            assume {
              [#"main.adb" 28 0 0]
              ((Locker__locker___axiom.default_initial_assumption
                  { Locker__locker.__split_fields =
                      (Locker__locker.__split_fields__content
                          Main__l.l__split_fields) })
                 False) });
           ([#"main.adb" 28 0 0]
            assume {
              [#"main.adb" 28 0 0]
              (((((Locker__locker___axiom.dynamic_invariant
                     { Locker__locker.__split_fields =
                         (Locker__locker.__split_fields__content
                             Main__l.l__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 29 0 0]
          (([#"main.adb" 29 0 0]
            assume {
              [#"main.adb" 29 0 0]
              ((Mystring_instance__lines__mystring___axiom.default_initial_assumption
                  { Mystring_instance__lines__mystring.__split_fields =
                      (Mystring_instance__lines__mystring.__split_fields__content
                          Main__s.s__split_fields) })
                 False) });
           ([#"main.adb" 29 0 0]
            assume {
              [#"main.adb" 29 0 0]
              (((((Mystring_instance__lines__mystring___axiom.dynamic_invariant
                     { Mystring_instance__lines__mystring.__split_fields =
                         (Mystring_instance__lines__mystring.__split_fields__content
                             Main__s.s__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 30 0 0]
          (([#"main.adb" 30 0 0]
            assume {
              [#"main.adb" 30 0 0]
              ((Stack__stack_instance___axiom.default_initial_assumption
                  { Stack__stack_instance.__split_fields =
                      (Stack__stack_instance.__split_fields__content
                          Main__sk.sk__split_fields) })
                 False) });
           ([#"main.adb" 30 0 0]
            assume {
              [#"main.adb" 30 0 0]
              (((((Stack__stack_instance___axiom.dynamic_invariant
                     { Stack__stack_instance.__split_fields =
                         (Stack__stack_instance.__split_fields__content
                             Main__sk.sk__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 31 0 0]
          (([#"main.adb" 31 0 0]
            assume {
              [#"main.adb" 31 0 0]
              ((Memorystore__database___axiom.default_initial_assumption
                  { Memorystore__database.__split_fields =
                      (Memorystore__database.__split_fields__content
                          Main__d.d__split_fields) })
                 False) });
           ([#"main.adb" 31 0 0]
            assume {
              [#"main.adb" 31 0 0]
              (((((Memorystore__database___axiom.dynamic_invariant
                     { Memorystore__database.__split_fields =
                         (Memorystore__database.__split_fields__content
                             Main__d.d__split_fields) })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 40 0 0] ());
         ([#"main.adb" 55 0 0] ());
         ([@GP_Sloc:main.adb:35:20] [#"main.adb" 35 0 0] ());
         ([@GP_Sloc:main.adb:35:4]
          [#"main.adb" 35 0 0]
          (if (([#"main.adb" 35 0 0]
                [#"main.adb" 35 0 0]
                (([@branch_id=907] Main.spark__branch).bool__content <-
                   ((Mycommandline__argument_count___axiom.argument_count ())
                      <> (1 : int))));
               (([@branch_id=907] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:main.adb:36:6] [#"main.adb" 36 0 0] ());
              ([@GP_Sloc:main.adb:36:6]
               [#"main.adb" 36 0 0]
               (([#"main.adb" 36 0 0] (val _f : unit in
                                       _f));
                (Ada___ada__text_io__put_line__2___axiom.put_line
                   (let temp___375 =
                      Temp___String_Literal_374.temp___String_Literal_374 () in
                    ((Standard__string.of_array temp___375) (1 : int))
                      (37 : int)))));
              ([@GP_Sloc:main.adb:37:6]
               [#"main.adb" 37 0 0]
               [#"main.adb" 37 0 0] ((raise Return__exc) : unit)))
           else ()));
         ([@GP_Sloc:main.adb:40:4]
          [#"main.adb" 40 0 0]
          (([#"main.adb" 41 0 0] ());
           ([#"main.adb" 41 0 0]
            ((let main__B_1__pin_str__assume =
                [#"main.adb" 41 0 0]
                [@GP_Reason:VC_PRECONDITION]
                [@vc:annotation]
                [@comment:      PIN_Str : constant String := MyCommandLine.Argument(1);                                                 ^ main.adb:41:49:VC_PRECONDITION]
                [@GP_Shape:B_1_declblk__pin_str_decl__call_argument]
                [@GP_Id:2]
                [@GP_Sloc:main.adb:41:49]
                (Mycommandline__argument___axiom.argument (1 : int)) in
              assume {
                (main__B_1__pin_str__assume = Main__B_1__pin_str.pin_str) });
             assume {
               ((((Standard__string___axiom.dynamic_invariant
                     Main__B_1__pin_str.pin_str)
                    True)
                   False)
                  True)
                 True }));
           ([@GP_Sloc:main.adb:43:7]
            [#"main.adb" 43 0 0]
            (if (([#"main.adb" 43 0 0]
                  [#"main.adb" 43 0 0]
                  (([@branch_id=928] Main.spark__branch).bool__content <-
                     (((([#"main.adb" 43 0 0] ());
                        (Standard__string.length Main__B_1__pin_str.pin_str))
                         <> (4 : int))
                       ||
                        ((let i = [#"main.adb" 43 0 0] (val _f : int in
                                                        _f) in
                          if ((Boolean.andb
                                 ((([#"main.adb" 43 0 0] ());
                                   (Standard__string.first
                                      Main__B_1__pin_str.pin_str))
                                    <= i))
                                (i
                                   <= (([#"main.adb" 43 0 0] ());
                                       (Standard__string.last
                                          Main__B_1__pin_str.pin_str)))) then
                            ([#"main.adb" 43 0 0]
                             (begin
                                ensures { true }
                                let _ =
                                  let _ =
                                    not (let temp___379 =
                                           Standard__character__rep.to_rep
                                             ((Array__Int__Standard__character.get
                                                 (Standard__string.to_array
                                                    Main__B_1__pin_str.pin_str))
                                                (([#"main.adb" 43 0 0]
                                                  assert {
                                                    [#"main.adb" 43 0 0]
                                                    [#"main.adb" 44 0 0]
                                                    [@vc:annotation]
                                                    [@GP_Shape:B_1_declblk__if__orelse__forsome__in__ixdcomp]
                                                    [@comment:        (for some I in PIN_Str'Range => PIN_Str(I) not in '0' .. '9') then                                                 ^ main.adb:44:49:VC_INDEX_CHECK]
                                                    [@GP_Reason:VC_INDEX_CHECK]
                                                    [@GP_Id:1]
                                                    [@GP_Sloc:main.adb:44:49]
                                                    (((Standard__string.first
                                                         Main__B_1__pin_str.pin_str)
                                                        <= i) /\
                                                       (i
                                                          <= (Standard__string.last
                                                                Main__B_1__pin_str.pin_str))) });
                                                 i)) in
                                         (Boolean.andb
                                            ((48 : int) <= temp___379))
                                           (temp___379 <= (57 : int))) in
                                  () in
                                ()
                              end))
                          else ());
                         (val _f : bool
                            ensures { ((result = True) <->
                                         (exists i : int.
                                            ((((Standard__string.first
                                                  Main__B_1__pin_str.pin_str)
                                                 <= i) /\
                                                (i
                                                   <= (Standard__string.last
                                                         Main__B_1__pin_str.pin_str))) /\
                                               ((Boolean.notb
                                                   (let temp___380 =
                                                      Standard__character__rep.to_rep
                                                        ((Array__Int__Standard__character.get
                                                            (Standard__string.to_array
                                                               Main__B_1__pin_str.pin_str))
                                                           i) in
                                                    (Boolean.andb
                                                       ((48 : int)
                                                          <= temp___380))
                                                      (temp___380
                                                         <= (57 : int))))
                                                  = True)))) } in
                          _f)))));
                 (([@branch_id=928] Main.spark__branch).bool__content)) then
               (([@GP_Sloc:main.adb:45:10] [#"main.adb" 45 0 0] ());
                ([@GP_Sloc:main.adb:45:10]
                 [#"main.adb" 45 0 0]
                 (([#"main.adb" 45 0 0] (val _f : unit in
                                         _f));
                  (Ada___ada__text_io__put_line__2___axiom.put_line
                     (let temp___377 =
                        Temp___String_Literal_376.temp___String_Literal_376
                          () in
                      ((Standard__string.of_array temp___377) (1 : int))
                        (37 : int)))));
                ([@GP_Sloc:main.adb:46:10]
                 [#"main.adb" 46 0 0]
                 [#"main.adb" 46 0 0] ((raise Return__exc) : unit)))
             else
               (([@GP_Sloc:main.adb:48:22] [#"main.adb" 48 0 0] ());
                ([@GP_Sloc:main.adb:48:27] [#"main.adb" 48 0 0] ());
                ([@GP_Sloc:main.adb:48:16] [#"main.adb" 48 0 0] ());
                ([@GP_Sloc:main.adb:48:16]
                 [#"main.adb" 48 0 0]
                 (let temp___compl_378 =
                    { Locker__locker.__split_fields =
                        (Locker__locker.__split_fields__content
                            Main__l.l__split_fields) } in
                  ([#"main.adb" 48 0 0] (val _f : unit in
                                         _f));
                  ((Locker__init___axiom.init Main__l.l__split_fields)
                     ([#"main.adb" 48 0 0]
                      [@GP_Reason:VC_PRECONDITION]
                      [@GP_Sloc:main.adb:48:27]
                      [@GP_Shape:B_1_declblk__if__call_init__call_from_string]
                      [@vc:annotation]
                      [@GP_Id:0]
                      [@comment:         Locker.Init(L,PIN.From_String(PIN_Str));                           ^ main.adb:48:27:VC_PRECONDITION]
                      (Pin__from_string___axiom.from_string
                         Main__B_1__pin_str.pin_str))))))))));
         ([@GP_Sloc:main.adb:52:15] [#"main.adb" 52 0 0] ());
         ([@GP_Sloc:main.adb:52:9] [#"main.adb" 52 0 0] ());
         ([@GP_Sloc:main.adb:52:9]
          [#"main.adb" 52 0 0]
          (let temp___compl_381 =
             { Stack__stack_instance.__split_fields =
                 (Stack__stack_instance.__split_fields__content
                     Main__sk.sk__split_fields) } in
           ([#"main.adb" 52 0 0] (val _f : unit in
                                  _f));
           (Stack__init___axiom.init Main__sk.sk__split_fields)));
         ([@GP_Sloc:main.adb:53:21] [#"main.adb" 53 0 0] ());
         ([@GP_Sloc:main.adb:53:15] [#"main.adb" 53 0 0] ());
         ([@GP_Sloc:main.adb:53:15]
          [#"main.adb" 53 0 0]
          (let temp___compl_382 =
             { Memorystore__database.__split_fields =
                 (Memorystore__database.__split_fields__content
                     Main__d.d__split_fields) } in
           ([#"main.adb" 53 0 0] (val _f : unit in
                                  _f));
           (Memorystore__init___axiom.init Main__d.d__split_fields)));
         ([@GP_Sloc:main.adb:55:4]
          [#"main.adb" 55 0 0]
          (([@GNAT-comment:Translation of an Ada loop from main.adb:55] ());
           (if True then
              ([#"main.adb" 55 0 0]
               (try
                  let temp___loop_entry_394 =
                    { Stack__stack_instance.__split_fields =
                        (Stack__stack_instance.__split_fields__content
                            Main__sk.sk__split_fields) } in
                  let temp___loop_entry_393 =
                    { Mystring_instance__lines__mystring.__split_fields =
                        (Mystring_instance__lines__mystring.__split_fields__content
                            Main__s.s__split_fields) } in
                  let temp___loop_entry_392 =
                    { Locker__locker.__split_fields =
                        (Locker__locker.__split_fields__content
                            Main__l.l__split_fields) } in
                  let temp___loop_entry_391 =
                    { Memorystore__database.__split_fields =
                        (Memorystore__database.__split_fields__content
                            Main__d.d__split_fields) } in
                  ([@GNAT-comment:While loop translating the Ada loop from main.adb:55]
                   ());
                  ([#"main.adb" 55 0 0]
                   [#"main.adb" 55 0 0]
                   (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                     ());
                    while True do
                      ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                       (([@GNAT-comment:Assume implicit invariants from the loop main.adb:55]
                         ());
                        ([#"main.adb" 55 0 0]
                         assume {
                           [#"main.adb" 55 0 0]
                           ((((((((true /\
                                     (((((Memorystore__database___axiom.dynamic_invariant
                                            { Memorystore__database.__split_fields =
                                                (Memorystore__database.__split_fields__content
                                                    Main__d.d__split_fields) })
                                           False)
                                          True)
                                         True)
                                        True)) /\
                                    (true /\ true)) /\
                                   (((((Locker__locker___axiom.dynamic_invariant
                                          { Locker__locker.__split_fields =
                                              (Locker__locker.__split_fields__content
                                                  Main__l.l__split_fields) })
                                         False)
                                        True)
                                       True)
                                      True)) /\
                                  (true /\ true)) /\
                                 (((((Mystring_instance__lines__mystring___axiom.dynamic_invariant
                                        { Mystring_instance__lines__mystring.__split_fields =
                                            (Mystring_instance__lines__mystring.__split_fields__content
                                                Main__s.s__split_fields) })
                                       False)
                                      True)
                                     True)
                                    True)) /\
                                (true /\ true)) /\
                               (((((Stack__stack_instance___axiom.dynamic_invariant
                                      { Stack__stack_instance.__split_fields =
                                          (Stack__stack_instance.__split_fields__content
                                              Main__sk.sk__split_fields) })
                                     False)
                                    True)
                                   True)
                                  True)) /\
                              (true /\ true)) });
                        ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                         ());
                        ([@GP_Sloc:main.adb:56:27] [#"main.adb" 56 0 0] ());
                        ([@GP_Sloc:main.adb:56:16] [#"main.adb" 56 0 0] ());
                        ([@GP_Sloc:main.adb:56:7]
                         [#"main.adb" 56 0 0]
                         (if (([#"main.adb" 56 0 0]
                               [#"main.adb" 56 0 0]
                               (([@branch_id=974] Main.spark__branch).bool__content <-
                                  (Locker__is_locked___axiom.is_locked
                                     { Locker__locker.__split_fields =
                                         (Locker__locker.__split_fields__content
                                             Main__l.l__split_fields) })));
                              (([@branch_id=974] Main.spark__branch).bool__content)) then
                            (([@GP_Sloc:main.adb:57:10]
                              [#"main.adb" 57 0 0] ());
                             ([@GP_Sloc:main.adb:57:10]
                              [#"main.adb" 57 0 0]
                              (([#"main.adb" 57 0 0] (val _f : unit in
                                                      _f));
                               (Ada___ada__text_io__put__4___axiom.put
                                  (let temp___384 =
                                     Temp___String_Literal_383.temp___String_Literal_383
                                       () in
                                   ((Standard__string.of_array temp___384)
                                      (1 : int))
                                     (8 : int))))))
                          else
                            (([@GP_Sloc:main.adb:59:10]
                              [#"main.adb" 59 0 0] ());
                             ([@GP_Sloc:main.adb:59:10]
                              [#"main.adb" 59 0 0]
                              (([#"main.adb" 59 0 0] (val _f : unit in
                                                      _f));
                               (Ada___ada__text_io__put__4___axiom.put
                                  (let temp___386 =
                                     Temp___String_Literal_385.temp___String_Literal_385
                                       () in
                                   ((Standard__string.of_array temp___386)
                                      (1 : int))
                                     (10 : int))))))));
                        ([@GP_Sloc:main.adb:62:22] [#"main.adb" 62 0 0] ());
                        ([@GP_Sloc:main.adb:62:12] [#"main.adb" 62 0 0] ());
                        ([@GP_Sloc:main.adb:62:12]
                         [#"main.adb" 62 0 0]
                         (let temp___compl_387 =
                            { Mystring_instance__lines__mystring.__split_fields =
                                (Mystring_instance__lines__mystring.__split_fields__content
                                    Main__s.s__split_fields) } in
                          ([#"main.adb" 62 0 0] (val _f : unit in
                                                 _f));
                          (Mystring_instance__lines__get_line___axiom.get_line
                             Main__s.s__split_fields)));
                        ([@GP_Sloc:main.adb:63:30] [#"main.adb" 63 0 0] ());
                        ([@GP_Sloc:main.adb:63:33] [#"main.adb" 63 0 0] ());
                        ([@GP_Sloc:main.adb:63:37] [#"main.adb" 63 0 0] ());
                        ([@GP_Sloc:main.adb:63:40] [#"main.adb" 63 0 0] ());
                        ([@GP_Sloc:main.adb:63:21] [#"main.adb" 63 0 0] ());
                        ([@GP_Sloc:main.adb:63:21]
                         [#"main.adb" 63 0 0]
                         (let temp___compl_388 =
                            { Locker__locker.__split_fields =
                                (Locker__locker.__split_fields__content
                                    Main__l.l__split_fields) } in
                          let temp___compl_389 =
                            { Stack__stack_instance.__split_fields =
                                (Stack__stack_instance.__split_fields__content
                                    Main__sk.sk__split_fields) } in
                          let temp___compl_390 =
                            { Memorystore__database.__split_fields =
                                (Memorystore__database.__split_fields__content
                                    Main__d.d__split_fields) } in
                          ([#"main.adb" 63 0 0] (val _f : unit in
                                                 _f));
                          ((((Commandhandler__execute___axiom.execute
                                Main__l.l__split_fields)
                               Main__sk.sk__split_fields)
                              Main__d.d__split_fields)
                             { Mystring_instance__lines__mystring.__split_fields =
                                 (Mystring_instance__lines__mystring.__split_fields__content
                                     Main__s.s__split_fields) })));
                        ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:55]
                         ());
                        (if False then (raise Main__L_2.L_2)
                         else ())));
                      ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                       [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                       ());
                      ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                       ())
                    done))
                with Main__L_2.L_2 -> ()
                end))
            else ())));
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
